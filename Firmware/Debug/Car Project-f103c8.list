
Car Project-f103c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007074  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08007180  08007180  00017180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007574  08007574  00020104  2**0
                  CONTENTS
  4 .ARM          00000000  08007574  08007574  00020104  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007574  08007574  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007574  08007574  00017574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007578  08007578  00017578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0800757c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011a8  20000104  08007680  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012ac  08007680  000212ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9e7  00000000  00000000  0002012d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002adf  00000000  00000000  0002fb14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  000325f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00033578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fee  00000000  00000000  000343e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e0c  00000000  00000000  0004e3ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000922b9  00000000  00000000  000601da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2493  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000492c  00000000  00000000  000f24e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000104 	.word	0x20000104
 8000128:	00000000 	.word	0x00000000
 800012c:	08007168 	.word	0x08007168

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000108 	.word	0x20000108
 8000148:	08007168 	.word	0x08007168

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_d2uiz>:
 80004d8:	004a      	lsls	r2, r1, #1
 80004da:	d211      	bcs.n	8000500 <__aeabi_d2uiz+0x28>
 80004dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80004e0:	d211      	bcs.n	8000506 <__aeabi_d2uiz+0x2e>
 80004e2:	d50d      	bpl.n	8000500 <__aeabi_d2uiz+0x28>
 80004e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80004e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004ec:	d40e      	bmi.n	800050c <__aeabi_d2uiz+0x34>
 80004ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80004f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80004fa:	fa23 f002 	lsr.w	r0, r3, r2
 80004fe:	4770      	bx	lr
 8000500:	f04f 0000 	mov.w	r0, #0
 8000504:	4770      	bx	lr
 8000506:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800050a:	d102      	bne.n	8000512 <__aeabi_d2uiz+0x3a>
 800050c:	f04f 30ff 	mov.w	r0, #4294967295
 8000510:	4770      	bx	lr
 8000512:	f04f 0000 	mov.w	r0, #0
 8000516:	4770      	bx	lr

08000518 <MX_ADC1_Init>:


ADC_HandleTypeDef hadc1;

void MX_ADC1_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	; 0x28
 800051c:	af00      	add	r7, sp, #0


  ADC_ChannelConfTypeDef sConfig = {0};
 800051e:	f107 031c 	add.w	r3, r7, #28
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052a:	f107 030c 	add.w	r3, r7, #12
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]

  __HAL_RCC_ADC1_CLK_ENABLE();
 8000538:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <MX_ADC1_Init+0xb8>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a24      	ldr	r2, [pc, #144]	; (80005d0 <MX_ADC1_Init+0xb8>)
 800053e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <MX_ADC1_Init+0xb8>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <MX_ADC1_Init+0xb8>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a1e      	ldr	r2, [pc, #120]	; (80005d0 <MX_ADC1_Init+0xb8>)
 8000556:	f043 0304 	orr.w	r3, r3, #4
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <MX_ADC1_Init+0xb8>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f003 0304 	and.w	r3, r3, #4
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]
      /**ADC1 GPIO Configuration
      PA6     ------> ADC1_IN6
      */


      GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000568:	2340      	movs	r3, #64	; 0x40
 800056a:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800056c:	2303      	movs	r3, #3
 800056e:	613b      	str	r3, [r7, #16]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	4619      	mov	r1, r3
 8000576:	4817      	ldr	r0, [pc, #92]	; (80005d4 <MX_ADC1_Init+0xbc>)
 8000578:	f002 fe06 	bl	8003188 <HAL_GPIO_Init>
  //    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);




  hadc1.Instance = ADC1;
 800057c:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <MX_ADC1_Init+0xc0>)
 800057e:	4a17      	ldr	r2, [pc, #92]	; (80005dc <MX_ADC1_Init+0xc4>)
 8000580:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000582:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <MX_ADC1_Init+0xc0>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000588:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <MX_ADC1_Init+0xc0>)
 800058a:	2201      	movs	r2, #1
 800058c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800058e:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <MX_ADC1_Init+0xc0>)
 8000590:	2200      	movs	r2, #0
 8000592:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000594:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <MX_ADC1_Init+0xc0>)
 8000596:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800059a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <MX_ADC1_Init+0xc0>)
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80005a2:	4b0d      	ldr	r3, [pc, #52]	; (80005d8 <MX_ADC1_Init+0xc0>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	611a      	str	r2, [r3, #16]
  HAL_ADC_Init(&hadc1);
 80005a8:	480b      	ldr	r0, [pc, #44]	; (80005d8 <MX_ADC1_Init+0xc0>)
 80005aa:	f001 ff2b 	bl	8002404 <HAL_ADC_Init>

  sConfig.Channel = ADC_CHANNEL_6;
 80005ae:	2306      	movs	r3, #6
 80005b0:	61fb      	str	r3, [r7, #28]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005b2:	2301      	movs	r3, #1
 80005b4:	623b      	str	r3, [r7, #32]
  sConfig.SamplingTime =  ADC_SAMPLETIME_7CYCLES_5;
 80005b6:	2301      	movs	r3, #1
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	4619      	mov	r1, r3
 80005c0:	4805      	ldr	r0, [pc, #20]	; (80005d8 <MX_ADC1_Init+0xc0>)
 80005c2:	f002 f9e3 	bl	800298c <HAL_ADC_ConfigChannel>





}
 80005c6:	bf00      	nop
 80005c8:	3728      	adds	r7, #40	; 0x28
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40021000 	.word	0x40021000
 80005d4:	40010800 	.word	0x40010800
 80005d8:	20000120 	.word	0x20000120
 80005dc:	40012400 	.word	0x40012400

080005e0 <MX_GPIO_Init>:




void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 0310 	add.w	r3, r7, #16
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f4:	4b7a      	ldr	r3, [pc, #488]	; (80007e0 <MX_GPIO_Init+0x200>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a79      	ldr	r2, [pc, #484]	; (80007e0 <MX_GPIO_Init+0x200>)
 80005fa:	f043 0310 	orr.w	r3, r3, #16
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b77      	ldr	r3, [pc, #476]	; (80007e0 <MX_GPIO_Init+0x200>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0310 	and.w	r3, r3, #16
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060c:	4b74      	ldr	r3, [pc, #464]	; (80007e0 <MX_GPIO_Init+0x200>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a73      	ldr	r2, [pc, #460]	; (80007e0 <MX_GPIO_Init+0x200>)
 8000612:	f043 0320 	orr.w	r3, r3, #32
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b71      	ldr	r3, [pc, #452]	; (80007e0 <MX_GPIO_Init+0x200>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0320 	and.w	r3, r3, #32
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000624:	4b6e      	ldr	r3, [pc, #440]	; (80007e0 <MX_GPIO_Init+0x200>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a6d      	ldr	r2, [pc, #436]	; (80007e0 <MX_GPIO_Init+0x200>)
 800062a:	f043 0304 	orr.w	r3, r3, #4
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b6b      	ldr	r3, [pc, #428]	; (80007e0 <MX_GPIO_Init+0x200>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0304 	and.w	r3, r3, #4
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063c:	4b68      	ldr	r3, [pc, #416]	; (80007e0 <MX_GPIO_Init+0x200>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a67      	ldr	r2, [pc, #412]	; (80007e0 <MX_GPIO_Init+0x200>)
 8000642:	f043 0308 	orr.w	r3, r3, #8
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b65      	ldr	r3, [pc, #404]	; (80007e0 <MX_GPIO_Init+0x200>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0308 	and.w	r3, r3, #8
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	683b      	ldr	r3, [r7, #0]





  GPIO_InitStruct.Pin = LD1_PIN;
 8000654:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000658:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	2301      	movs	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2302      	movs	r3, #2
 8000664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD1_GPIO_PORT, &GPIO_InitStruct);
 8000666:	f107 0310 	add.w	r3, r7, #16
 800066a:	4619      	mov	r1, r3
 800066c:	485d      	ldr	r0, [pc, #372]	; (80007e4 <MX_GPIO_Init+0x204>)
 800066e:	f002 fd8b 	bl	8003188 <HAL_GPIO_Init>
  LD1(0);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000678:	485a      	ldr	r0, [pc, #360]	; (80007e4 <MX_GPIO_Init+0x204>)
 800067a:	f002 ff20 	bl	80034be <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = LD2_PIN;
 800067e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	2301      	movs	r3, #1
 8000686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	2302      	movs	r3, #2
 800068e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_PORT, &GPIO_InitStruct);
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	4619      	mov	r1, r3
 8000696:	4853      	ldr	r0, [pc, #332]	; (80007e4 <MX_GPIO_Init+0x204>)
 8000698:	f002 fd76 	bl	8003188 <HAL_GPIO_Init>
  LD2(0);
 800069c:	2201      	movs	r2, #1
 800069e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a2:	4850      	ldr	r0, [pc, #320]	; (80007e4 <MX_GPIO_Init+0x204>)
 80006a4:	f002 ff0b 	bl	80034be <HAL_GPIO_WritePin>


  GPIO_InitStruct.Pin = LD3_PIN;
 80006a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2302      	movs	r3, #2
 80006b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD3_GPIO_PORT, &GPIO_InitStruct);
 80006ba:	f107 0310 	add.w	r3, r7, #16
 80006be:	4619      	mov	r1, r3
 80006c0:	4848      	ldr	r0, [pc, #288]	; (80007e4 <MX_GPIO_Init+0x204>)
 80006c2:	f002 fd61 	bl	8003188 <HAL_GPIO_Init>
  LD3(0);
 80006c6:	2201      	movs	r2, #1
 80006c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006cc:	4845      	ldr	r0, [pc, #276]	; (80007e4 <MX_GPIO_Init+0x204>)
 80006ce:	f002 fef6 	bl	80034be <HAL_GPIO_WritePin>


  GPIO_InitStruct.Pin = LD4_PIN;
 80006d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d8:	2301      	movs	r3, #1
 80006da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	2302      	movs	r3, #2
 80006e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD4_GPIO_PORT, &GPIO_InitStruct);
 80006e4:	f107 0310 	add.w	r3, r7, #16
 80006e8:	4619      	mov	r1, r3
 80006ea:	483f      	ldr	r0, [pc, #252]	; (80007e8 <MX_GPIO_Init+0x208>)
 80006ec:	f002 fd4c 	bl	8003188 <HAL_GPIO_Init>
  LD4(0);
 80006f0:	2201      	movs	r2, #1
 80006f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f6:	483c      	ldr	r0, [pc, #240]	; (80007e8 <MX_GPIO_Init+0x208>)
 80006f8:	f002 fee1 	bl	80034be <HAL_GPIO_WritePin>


  /* IN0, IN1 , IN2 , IN3 */


  GPIO_InitStruct.Pin = IN0_PIN|IN1_PIN|IN2_PIN|IN3_PIN;
 80006fc:	2333      	movs	r3, #51	; 0x33
 80006fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2301      	movs	r3, #1
 8000702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2302      	movs	r3, #2
 800070a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	4619      	mov	r1, r3
 8000712:	4835      	ldr	r0, [pc, #212]	; (80007e8 <MX_GPIO_Init+0x208>)
 8000714:	f002 fd38 	bl	8003188 <HAL_GPIO_Init>


  /* IN4 ,  IN5 , IN6 , IN7  */


  GPIO_InitStruct.Pin =  IN4_PIN|IN5_PIN|IN6_PIN|IN7_PIN;
 8000718:	23f0      	movs	r3, #240	; 0xf0
 800071a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	2301      	movs	r3, #1
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2302      	movs	r3, #2
 8000726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	4619      	mov	r1, r3
 800072e:	482d      	ldr	r0, [pc, #180]	; (80007e4 <MX_GPIO_Init+0x204>)
 8000730:	f002 fd2a 	bl	8003188 <HAL_GPIO_Init>
  HAL_GPIO_Init(SW4_GPIO_PORT, &GPIO_InitStruct);
  */



  GPIO_InitStruct.Pin = SW1_PIN;
 8000734:	2380      	movs	r3, #128	; 0x80
 8000736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800073c:	2301      	movs	r3, #1
 800073e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW1_GPIO_PORT, &GPIO_InitStruct);
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	4619      	mov	r1, r3
 8000746:	4828      	ldr	r0, [pc, #160]	; (80007e8 <MX_GPIO_Init+0x208>)
 8000748:	f002 fd1e 	bl	8003188 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SW2_PIN;
 800074c:	2301      	movs	r3, #1
 800074e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000754:	2301      	movs	r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW2_GPIO_PORT, &GPIO_InitStruct);
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	4619      	mov	r1, r3
 800075e:	4821      	ldr	r0, [pc, #132]	; (80007e4 <MX_GPIO_Init+0x204>)
 8000760:	f002 fd12 	bl	8003188 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SW3_PIN;
 8000764:	2302      	movs	r3, #2
 8000766:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800076c:	2301      	movs	r3, #1
 800076e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW3_GPIO_PORT, &GPIO_InitStruct);
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	4619      	mov	r1, r3
 8000776:	481b      	ldr	r0, [pc, #108]	; (80007e4 <MX_GPIO_Init+0x204>)
 8000778:	f002 fd06 	bl	8003188 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SW4_PIN;
 800077c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000786:	2301      	movs	r3, #1
 8000788:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW4_GPIO_PORT, &GPIO_InitStruct);
 800078a:	f107 0310 	add.w	r3, r7, #16
 800078e:	4619      	mov	r1, r3
 8000790:	4814      	ldr	r0, [pc, #80]	; (80007e4 <MX_GPIO_Init+0x204>)
 8000792:	f002 fcf9 	bl	8003188 <HAL_GPIO_Init>



  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2100      	movs	r1, #0
 800079a:	2028      	movs	r0, #40	; 0x28
 800079c:	f002 fc0d 	bl	8002fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007a0:	2028      	movs	r0, #40	; 0x28
 80007a2:	f002 fc26 	bl	8002ff2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	2006      	movs	r0, #6
 80007ac:	f002 fc05 	bl	8002fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007b0:	2006      	movs	r0, #6
 80007b2:	f002 fc1e 	bl	8002ff2 <HAL_NVIC_EnableIRQ>


  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	2007      	movs	r0, #7
 80007bc:	f002 fbfd 	bl	8002fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007c0:	2007      	movs	r0, #7
 80007c2:	f002 fc16 	bl	8002ff2 <HAL_NVIC_EnableIRQ>


  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	2017      	movs	r0, #23
 80007cc:	f002 fbf5 	bl	8002fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007d0:	2017      	movs	r0, #23
 80007d2:	f002 fc0e 	bl	8002ff2 <HAL_NVIC_EnableIRQ>





}
 80007d6:	bf00      	nop
 80007d8:	3720      	adds	r7, #32
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000
 80007e4:	40010c00 	.word	0x40010c00
 80007e8:	40010800 	.word	0x40010800

080007ec <__io_putchar>:
void Motor_Dir(  uint8_t );



PUTCHAR_PROTOTYPE
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */

	if(serial_flag == ON)
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <__io_putchar+0x2c>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d108      	bne.n	800080e <__io_putchar+0x22>
	{
		HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80007fc:	1d39      	adds	r1, r7, #4
 80007fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000802:	2201      	movs	r2, #1
 8000804:	4805      	ldr	r0, [pc, #20]	; (800081c <__io_putchar+0x30>)
 8000806:	f004 fea2 	bl	800554e <HAL_UART_Transmit>
		return ch;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	e7ff      	b.n	800080e <__io_putchar+0x22>

	}

}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20001179 	.word	0x20001179
 800081c:	20001210 	.word	0x20001210

08000820 <Check_Switch>:




int Check_Switch(uint16_t GPIO_Pin)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	80fb      	strh	r3, [r7, #6]



	if(GPIO_Pin == SW1_PIN)
 800082a:	88fb      	ldrh	r3, [r7, #6]
 800082c:	2b80      	cmp	r3, #128	; 0x80
 800082e:	d126      	bne.n	800087e <Check_Switch+0x5e>
	{
		// switch state low
		sw1.state = HAL_GPIO_ReadPin(SW1_GPIO_PORT,SW1_PIN);
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	4852      	ldr	r0, [pc, #328]	; (800097c <Check_Switch+0x15c>)
 8000834:	f002 fe2c 	bl	8003490 <HAL_GPIO_ReadPin>
 8000838:	4603      	mov	r3, r0
 800083a:	461a      	mov	r2, r3
 800083c:	4b50      	ldr	r3, [pc, #320]	; (8000980 <Check_Switch+0x160>)
 800083e:	701a      	strb	r2, [r3, #0]


		if( sw1.state == LOW )
 8000840:	4b4f      	ldr	r3, [pc, #316]	; (8000980 <Check_Switch+0x160>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d10c      	bne.n	8000862 <Check_Switch+0x42>
		{

			if(sw1.cnt == 0)
 8000848:	4b4d      	ldr	r3, [pc, #308]	; (8000980 <Check_Switch+0x160>)
 800084a:	785b      	ldrb	r3, [r3, #1]
 800084c:	2b00      	cmp	r3, #0
 800084e:	f040 8090 	bne.w	8000972 <Check_Switch+0x152>
			{

				//	 printf("--- SW1 : Pushed ---\n");
				sw1.cnt++;
 8000852:	4b4b      	ldr	r3, [pc, #300]	; (8000980 <Check_Switch+0x160>)
 8000854:	785b      	ldrb	r3, [r3, #1]
 8000856:	3301      	adds	r3, #1
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b49      	ldr	r3, [pc, #292]	; (8000980 <Check_Switch+0x160>)
 800085c:	705a      	strb	r2, [r3, #1]
				// HAL_GPIO_TogglePin(LD1_GPIO_PORT,LD1_PIN);
				return TRUE;
 800085e:	2301      	movs	r3, #1
 8000860:	e087      	b.n	8000972 <Check_Switch+0x152>

		}


		// check_swtich() = ON;
		else if ( sw1.state == HIGH)
 8000862:	4b47      	ldr	r3, [pc, #284]	; (8000980 <Check_Switch+0x160>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b01      	cmp	r3, #1
 8000868:	f040 8083 	bne.w	8000972 <Check_Switch+0x152>
		{

			if(sw1.cnt != 0)
 800086c:	4b44      	ldr	r3, [pc, #272]	; (8000980 <Check_Switch+0x160>)
 800086e:	785b      	ldrb	r3, [r3, #1]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d07e      	beq.n	8000972 <Check_Switch+0x152>
			{
				// printf("--- SW1 : Pulled---\n");
				sw1.cnt = 0;
 8000874:	4b42      	ldr	r3, [pc, #264]	; (8000980 <Check_Switch+0x160>)
 8000876:	2200      	movs	r2, #0
 8000878:	705a      	strb	r2, [r3, #1]
				return FALSE;
 800087a:	2300      	movs	r3, #0
 800087c:	e079      	b.n	8000972 <Check_Switch+0x152>
		}
	}



	else if(GPIO_Pin == SW2_PIN)
 800087e:	88fb      	ldrh	r3, [r7, #6]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d124      	bne.n	80008ce <Check_Switch+0xae>
	{
		// switch state low

		sw2.state = HAL_GPIO_ReadPin(SW2_GPIO_PORT,SW2_PIN);
 8000884:	2101      	movs	r1, #1
 8000886:	483f      	ldr	r0, [pc, #252]	; (8000984 <Check_Switch+0x164>)
 8000888:	f002 fe02 	bl	8003490 <HAL_GPIO_ReadPin>
 800088c:	4603      	mov	r3, r0
 800088e:	461a      	mov	r2, r3
 8000890:	4b3d      	ldr	r3, [pc, #244]	; (8000988 <Check_Switch+0x168>)
 8000892:	701a      	strb	r2, [r3, #0]

		if( sw2.state == LOW )
 8000894:	4b3c      	ldr	r3, [pc, #240]	; (8000988 <Check_Switch+0x168>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d10b      	bne.n	80008b4 <Check_Switch+0x94>
		{

			if(sw2.cnt == 0)
 800089c:	4b3a      	ldr	r3, [pc, #232]	; (8000988 <Check_Switch+0x168>)
 800089e:	785b      	ldrb	r3, [r3, #1]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d166      	bne.n	8000972 <Check_Switch+0x152>
			{

				//	 printf("--- SW2 : Pushed ---\n");
				sw2.cnt++;
 80008a4:	4b38      	ldr	r3, [pc, #224]	; (8000988 <Check_Switch+0x168>)
 80008a6:	785b      	ldrb	r3, [r3, #1]
 80008a8:	3301      	adds	r3, #1
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	4b36      	ldr	r3, [pc, #216]	; (8000988 <Check_Switch+0x168>)
 80008ae:	705a      	strb	r2, [r3, #1]
				// 	HAL_GPIO_TogglePin(LD2_GPIO_PORT,LD2_PIN);
				return TRUE;
 80008b0:	2301      	movs	r3, #1
 80008b2:	e05e      	b.n	8000972 <Check_Switch+0x152>

		}


		// check_swtich() = ON;
		else if ( sw2.state == HIGH)
 80008b4:	4b34      	ldr	r3, [pc, #208]	; (8000988 <Check_Switch+0x168>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d15a      	bne.n	8000972 <Check_Switch+0x152>
		{

			if(sw2.cnt != 0)
 80008bc:	4b32      	ldr	r3, [pc, #200]	; (8000988 <Check_Switch+0x168>)
 80008be:	785b      	ldrb	r3, [r3, #1]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d056      	beq.n	8000972 <Check_Switch+0x152>
			{
				// printf("--- SW2 : Pulled---\n");
				sw2.cnt = 0;
 80008c4:	4b30      	ldr	r3, [pc, #192]	; (8000988 <Check_Switch+0x168>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	705a      	strb	r2, [r3, #1]
				return FALSE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	e051      	b.n	8000972 <Check_Switch+0x152>
		}
	}



	else if(GPIO_Pin == SW3_PIN)
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d124      	bne.n	800091e <Check_Switch+0xfe>
	{
		// switch state low

		sw3.state = HAL_GPIO_ReadPin(SW3_GPIO_PORT,SW3_PIN);
 80008d4:	2102      	movs	r1, #2
 80008d6:	482b      	ldr	r0, [pc, #172]	; (8000984 <Check_Switch+0x164>)
 80008d8:	f002 fdda 	bl	8003490 <HAL_GPIO_ReadPin>
 80008dc:	4603      	mov	r3, r0
 80008de:	461a      	mov	r2, r3
 80008e0:	4b2a      	ldr	r3, [pc, #168]	; (800098c <Check_Switch+0x16c>)
 80008e2:	701a      	strb	r2, [r3, #0]
		if( sw3.state == LOW )
 80008e4:	4b29      	ldr	r3, [pc, #164]	; (800098c <Check_Switch+0x16c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d10b      	bne.n	8000904 <Check_Switch+0xe4>
		{

			if(sw3.cnt == 0)
 80008ec:	4b27      	ldr	r3, [pc, #156]	; (800098c <Check_Switch+0x16c>)
 80008ee:	785b      	ldrb	r3, [r3, #1]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d13e      	bne.n	8000972 <Check_Switch+0x152>
			{

				//	 printf("--- SW3 : Pushed ---\n");
				sw3.cnt++;
 80008f4:	4b25      	ldr	r3, [pc, #148]	; (800098c <Check_Switch+0x16c>)
 80008f6:	785b      	ldrb	r3, [r3, #1]
 80008f8:	3301      	adds	r3, #1
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	4b23      	ldr	r3, [pc, #140]	; (800098c <Check_Switch+0x16c>)
 80008fe:	705a      	strb	r2, [r3, #1]
				// 	HAL_GPIO_TogglePin(LD3_GPIO_PORT,LD3_PIN);
				return TRUE;
 8000900:	2301      	movs	r3, #1
 8000902:	e036      	b.n	8000972 <Check_Switch+0x152>

		}


		// check_swtich() = ON;
		else if ( sw3.state == HIGH)
 8000904:	4b21      	ldr	r3, [pc, #132]	; (800098c <Check_Switch+0x16c>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d132      	bne.n	8000972 <Check_Switch+0x152>
		{

			if(sw3.cnt != 0)
 800090c:	4b1f      	ldr	r3, [pc, #124]	; (800098c <Check_Switch+0x16c>)
 800090e:	785b      	ldrb	r3, [r3, #1]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d02e      	beq.n	8000972 <Check_Switch+0x152>
			{
				// printf("--- SW3 : Pulled---\n");
				sw3.cnt = 0;
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <Check_Switch+0x16c>)
 8000916:	2200      	movs	r2, #0
 8000918:	705a      	strb	r2, [r3, #1]
				return FALSE;
 800091a:	2300      	movs	r3, #0
 800091c:	e029      	b.n	8000972 <Check_Switch+0x152>
		}
	}



	else if(GPIO_Pin == SW4_PIN)
 800091e:	88fb      	ldrh	r3, [r7, #6]
 8000920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000924:	d125      	bne.n	8000972 <Check_Switch+0x152>
	{
		// switch state low
		sw4.state = HAL_GPIO_ReadPin(SW4_GPIO_PORT,SW4_PIN);
 8000926:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800092a:	4816      	ldr	r0, [pc, #88]	; (8000984 <Check_Switch+0x164>)
 800092c:	f002 fdb0 	bl	8003490 <HAL_GPIO_ReadPin>
 8000930:	4603      	mov	r3, r0
 8000932:	461a      	mov	r2, r3
 8000934:	4b16      	ldr	r3, [pc, #88]	; (8000990 <Check_Switch+0x170>)
 8000936:	701a      	strb	r2, [r3, #0]
		if( sw4.state == LOW )
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <Check_Switch+0x170>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d10b      	bne.n	8000958 <Check_Switch+0x138>
		{

			if(sw4.cnt == 0)
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <Check_Switch+0x170>)
 8000942:	785b      	ldrb	r3, [r3, #1]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d114      	bne.n	8000972 <Check_Switch+0x152>
			{

				//	 printf("--- SW4 : Pushed ---\n");
				sw4.cnt++;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <Check_Switch+0x170>)
 800094a:	785b      	ldrb	r3, [r3, #1]
 800094c:	3301      	adds	r3, #1
 800094e:	b2da      	uxtb	r2, r3
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <Check_Switch+0x170>)
 8000952:	705a      	strb	r2, [r3, #1]
				// 	HAL_GPIO_TogglePin(LD4_GPIO_PORT,LD4_PIN);
				return TRUE;
 8000954:	2301      	movs	r3, #1
 8000956:	e00c      	b.n	8000972 <Check_Switch+0x152>

		}


		// check_swtich() = ON;
		else if ( sw4.state == HIGH)
 8000958:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <Check_Switch+0x170>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d108      	bne.n	8000972 <Check_Switch+0x152>
		{

			if(sw4.cnt != 0)
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <Check_Switch+0x170>)
 8000962:	785b      	ldrb	r3, [r3, #1]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d004      	beq.n	8000972 <Check_Switch+0x152>
			{
				// printf("--- SW4 : Pulled---\n");
				sw4.cnt = 0;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <Check_Switch+0x170>)
 800096a:	2200      	movs	r2, #0
 800096c:	705a      	strb	r2, [r3, #1]
				return FALSE;
 800096e:	2300      	movs	r3, #0
 8000970:	e7ff      	b.n	8000972 <Check_Switch+0x152>





}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40010800 	.word	0x40010800
 8000980:	20000150 	.word	0x20000150
 8000984:	40010c00 	.word	0x40010c00
 8000988:	20000154 	.word	0x20000154
 800098c:	20000158 	.word	0x20000158
 8000990:	2000015c 	.word	0x2000015c

08000994 <Check_Motor>:




int Check_Motor(MOTOR* Motor)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]



	Motor->Pwm->State = TIM_CHANNEL_STATE_GET(&htim2,Motor->Pwm->Channel);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d104      	bne.n	80009b0 <Check_Motor+0x1c>
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <Check_Motor+0x74>)
 80009a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	e017      	b.n	80009e0 <Check_Motor+0x4c>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	2b04      	cmp	r3, #4
 80009b8:	d104      	bne.n	80009c4 <Check_Motor+0x30>
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <Check_Motor+0x74>)
 80009bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	e00d      	b.n	80009e0 <Check_Motor+0x4c>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	2b08      	cmp	r3, #8
 80009cc:	d104      	bne.n	80009d8 <Check_Motor+0x44>
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <Check_Motor+0x74>)
 80009d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	e003      	b.n	80009e0 <Check_Motor+0x4c>
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <Check_Motor+0x74>)
 80009da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	6812      	ldr	r2, [r2, #0]
 80009e4:	7213      	strb	r3, [r2, #8]

	printf("%s = (%d,%d)\n",Motor -> Name, Motor -> Dir, Motor -> Pwm -> State );
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6899      	ldr	r1, [r3, #8]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	685a      	ldr	r2, [r3, #4]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	7a1b      	ldrb	r3, [r3, #8]
 80009f4:	4805      	ldr	r0, [pc, #20]	; (8000a0c <Check_Motor+0x78>)
 80009f6:	f005 facb 	bl	8005f90 <iprintf>


	return Motor->Dir;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	685b      	ldr	r3, [r3, #4]





}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20001180 	.word	0x20001180
 8000a0c:	08007180 	.word	0x08007180

08000a10 <Set_Motor>:




int Set_Motor(MOTOR* Motor, int Dir)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]





	if(Dir == HOLD)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d13f      	bne.n	8000aa0 <Set_Motor+0x90>
	{



		HAL_TIM_PWM_Stop(&htim2, Motor->Pwm->Channel);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	4619      	mov	r1, r3
 8000a28:	4853      	ldr	r0, [pc, #332]	; (8000b78 <Set_Motor+0x168>)
 8000a2a:	f003 fec5 	bl	80047b8 <HAL_TIM_PWM_Stop>
		Motor-> Pwm->State = TIM_CHANNEL_STATE_GET(&htim2,Motor->Pwm->Channel);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d104      	bne.n	8000a42 <Set_Motor+0x32>
 8000a38:	4b4f      	ldr	r3, [pc, #316]	; (8000b78 <Set_Motor+0x168>)
 8000a3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	e017      	b.n	8000a72 <Set_Motor+0x62>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	2b04      	cmp	r3, #4
 8000a4a:	d104      	bne.n	8000a56 <Set_Motor+0x46>
 8000a4c:	4b4a      	ldr	r3, [pc, #296]	; (8000b78 <Set_Motor+0x168>)
 8000a4e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	e00d      	b.n	8000a72 <Set_Motor+0x62>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	2b08      	cmp	r3, #8
 8000a5e:	d104      	bne.n	8000a6a <Set_Motor+0x5a>
 8000a60:	4b45      	ldr	r3, [pc, #276]	; (8000b78 <Set_Motor+0x168>)
 8000a62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	e003      	b.n	8000a72 <Set_Motor+0x62>
 8000a6a:	4b43      	ldr	r3, [pc, #268]	; (8000b78 <Set_Motor+0x168>)
 8000a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	6812      	ldr	r2, [r2, #0]
 8000a76:	7213      	strb	r3, [r2, #8]
		Motor -> Dir = HOLD;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	605a      	str	r2, [r3, #4]

		HAL_GPIO_WritePin(Motor->GPIOx,Motor->Pin1,0);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	68d8      	ldr	r0, [r3, #12]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	8a1b      	ldrh	r3, [r3, #16]
 8000a86:	2200      	movs	r2, #0
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f002 fd18 	bl	80034be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor->GPIOx,Motor->Pin2,0);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	68d8      	ldr	r0, [r3, #12]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	8a5b      	ldrh	r3, [r3, #18]
 8000a96:	2200      	movs	r2, #0
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f002 fd10 	bl	80034be <HAL_GPIO_WritePin>
 8000a9e:	e066      	b.n	8000b6e <Set_Motor+0x15e>


	}

	else if( Dir != HOLD )
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d063      	beq.n	8000b6e <Set_Motor+0x15e>
	{

		Motor-> Pwm->State = TIM_CHANNEL_STATE_GET(&htim2,Motor->Pwm->Channel);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d104      	bne.n	8000aba <Set_Motor+0xaa>
 8000ab0:	4b31      	ldr	r3, [pc, #196]	; (8000b78 <Set_Motor+0x168>)
 8000ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	e017      	b.n	8000aea <Set_Motor+0xda>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	2b04      	cmp	r3, #4
 8000ac2:	d104      	bne.n	8000ace <Set_Motor+0xbe>
 8000ac4:	4b2c      	ldr	r3, [pc, #176]	; (8000b78 <Set_Motor+0x168>)
 8000ac6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	e00d      	b.n	8000aea <Set_Motor+0xda>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	2b08      	cmp	r3, #8
 8000ad6:	d104      	bne.n	8000ae2 <Set_Motor+0xd2>
 8000ad8:	4b27      	ldr	r3, [pc, #156]	; (8000b78 <Set_Motor+0x168>)
 8000ada:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	e003      	b.n	8000aea <Set_Motor+0xda>
 8000ae2:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <Set_Motor+0x168>)
 8000ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	6812      	ldr	r2, [r2, #0]
 8000aee:	7213      	strb	r3, [r2, #8]

		if ( Motor -> Pwm->State == HAL_TIM_STATE_READY )
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	7a1b      	ldrb	r3, [r3, #8]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d139      	bne.n	8000b6e <Set_Motor+0x15e>
		{

			// Set Motor on
			HAL_TIM_PWM_Start(&htim2 , Motor->Pwm->Channel);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	4619      	mov	r1, r3
 8000b02:	481d      	ldr	r0, [pc, #116]	; (8000b78 <Set_Motor+0x168>)
 8000b04:	f003 fdb6 	bl	8004674 <HAL_TIM_PWM_Start>
			Motor -> Pwm ->State= HAL_TIM_STATE_BUSY;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2202      	movs	r2, #2
 8000b0e:	721a      	strb	r2, [r3, #8]


			// Set Direction

			if( Dir == FORWARD )
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d113      	bne.n	8000b3e <Set_Motor+0x12e>





				HAL_GPIO_WritePin(Motor->GPIOx,Motor->Pin1,0);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	68d8      	ldr	r0, [r3, #12]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	8a1b      	ldrh	r3, [r3, #16]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	4619      	mov	r1, r3
 8000b22:	f002 fccc 	bl	80034be <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor->GPIOx,Motor->Pin2,1);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	68d8      	ldr	r0, [r3, #12]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	8a5b      	ldrh	r3, [r3, #18]
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4619      	mov	r1, r3
 8000b32:	f002 fcc4 	bl	80034be <HAL_GPIO_WritePin>


				Motor -> Dir = FORWARD;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2201      	movs	r2, #1
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	e017      	b.n	8000b6e <Set_Motor+0x15e>



			}

			else if(Dir == BACKWARD )
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b44:	d113      	bne.n	8000b6e <Set_Motor+0x15e>





				HAL_GPIO_WritePin(Motor->GPIOx,Motor->Pin1,1);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	68d8      	ldr	r0, [r3, #12]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	8a1b      	ldrh	r3, [r3, #16]
 8000b4e:	2201      	movs	r2, #1
 8000b50:	4619      	mov	r1, r3
 8000b52:	f002 fcb4 	bl	80034be <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Motor->GPIOx,Motor->Pin2,0);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	68d8      	ldr	r0, [r3, #12]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	8a5b      	ldrh	r3, [r3, #18]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	4619      	mov	r1, r3
 8000b62:	f002 fcac 	bl	80034be <HAL_GPIO_WritePin>
				Motor -> Dir = BACKWARD;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f04f 32ff 	mov.w	r2, #4294967295
 8000b6c:	605a      	str	r2, [r3, #4]





}
 8000b6e:	bf00      	nop
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20001180 	.word	0x20001180

08000b7c <main>:



/* USER CODE BEGIN 1 */
int main(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0





	Motor1.Name = "Motor1";
 8000b80:	4b2a      	ldr	r3, [pc, #168]	; (8000c2c <main+0xb0>)
 8000b82:	4a2b      	ldr	r2, [pc, #172]	; (8000c30 <main+0xb4>)
 8000b84:	609a      	str	r2, [r3, #8]
	Motor2.Name = "Motor2";
 8000b86:	4b2b      	ldr	r3, [pc, #172]	; (8000c34 <main+0xb8>)
 8000b88:	4a2b      	ldr	r2, [pc, #172]	; (8000c38 <main+0xbc>)
 8000b8a:	609a      	str	r2, [r3, #8]
	Motor3.Name = "Motor3";
 8000b8c:	4b2b      	ldr	r3, [pc, #172]	; (8000c3c <main+0xc0>)
 8000b8e:	4a2c      	ldr	r2, [pc, #176]	; (8000c40 <main+0xc4>)
 8000b90:	609a      	str	r2, [r3, #8]
	Motor4.Name = "Motor4";
 8000b92:	4b2c      	ldr	r3, [pc, #176]	; (8000c44 <main+0xc8>)
 8000b94:	4a2c      	ldr	r2, [pc, #176]	; (8000c48 <main+0xcc>)
 8000b96:	609a      	str	r2, [r3, #8]



	HAL_Init();
 8000b98:	f001 fbd2 	bl	8002340 <HAL_Init>

	SystemClock_Config();
 8000b9c:	f000 ffc7 	bl	8001b2e <SystemClock_Config>

	MX_GPIO_Init();
 8000ba0:	f7ff fd1e 	bl	80005e0 <MX_GPIO_Init>


	MX_TIM2_Init( 100  , 1000 , 0 ); // freq = 72*10^6 / 100 * 1000 = 720Hz
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000baa:	2064      	movs	r0, #100	; 0x64
 8000bac:	f001 f844 	bl	8001c38 <MX_TIM2_Init>
	// 144, 1000, 500H




	MX_TIM4_Init(6400,500,1000);
 8000bb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bb4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000bb8:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8000bbc:	f001 f91c 	bl	8001df8 <MX_TIM4_Init>
	MX_ADC1_Init();
 8000bc0:	f7ff fcaa 	bl	8000518 <MX_ADC1_Init>

	HAL_TIM_Base_Start(&htim4);
 8000bc4:	4821      	ldr	r0, [pc, #132]	; (8000c4c <main+0xd0>)
 8000bc6:	f003 faa3 	bl	8004110 <HAL_TIM_Base_Start>
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000bca:	2100      	movs	r1, #0
 8000bcc:	481f      	ldr	r0, [pc, #124]	; (8000c4c <main+0xd0>)
 8000bce:	f003 fb67 	bl	80042a0 <HAL_TIM_OC_Start_IT>

	HAL_ADC_Start(&hadc1);
 8000bd2:	481f      	ldr	r0, [pc, #124]	; (8000c50 <main+0xd4>)
 8000bd4:	f001 fcee 	bl	80025b4 <HAL_ADC_Start>
	HAL_ADCEx_Calibration_Start(&hadc1);
 8000bd8:	481d      	ldr	r0, [pc, #116]	; (8000c50 <main+0xd4>)
 8000bda:	f002 f86b 	bl	8002cb4 <HAL_ADCEx_Calibration_Start>


	MX_USART1_UART_Init(38400);      /* UART1 : USB TO TTL */
 8000bde:	f44f 4016 	mov.w	r0, #38400	; 0x9600
 8000be2:	f001 faaf 	bl	8002144 <MX_USART1_UART_Init>
	MX_USART3_UART_Init(38400);      /* UART3 : BLUETOOTH  */
 8000be6:	f44f 4016 	mov.w	r0, #38400	; 0x9600
 8000bea:	f001 fb17 	bl	800221c <MX_USART3_UART_Init>


	HAL_UART_Receive_IT(&huart1,(uint8_t*)&uart1.rxdata, 1);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4918      	ldr	r1, [pc, #96]	; (8000c54 <main+0xd8>)
 8000bf2:	4819      	ldr	r0, [pc, #100]	; (8000c58 <main+0xdc>)
 8000bf4:	f004 fd3d 	bl	8005672 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3,(uint8_t*)&uart3.rxdata, 1);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4918      	ldr	r1, [pc, #96]	; (8000c5c <main+0xe0>)
 8000bfc:	4818      	ldr	r0, [pc, #96]	; (8000c60 <main+0xe4>)
 8000bfe:	f004 fd38 	bl	8005672 <HAL_UART_Receive_IT>

	HAL_TIM_Base_Start(&htim2);
 8000c02:	4818      	ldr	r0, [pc, #96]	; (8000c64 <main+0xe8>)
 8000c04:	f003 fa84 	bl	8004110 <HAL_TIM_Base_Start>


	Set_Motor(&Motor1,HOLD);
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4808      	ldr	r0, [pc, #32]	; (8000c2c <main+0xb0>)
 8000c0c:	f7ff ff00 	bl	8000a10 <Set_Motor>
	Set_Motor(&Motor2,HOLD);
 8000c10:	2100      	movs	r1, #0
 8000c12:	4808      	ldr	r0, [pc, #32]	; (8000c34 <main+0xb8>)
 8000c14:	f7ff fefc 	bl	8000a10 <Set_Motor>
	Set_Motor(&Motor3,HOLD);
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4808      	ldr	r0, [pc, #32]	; (8000c3c <main+0xc0>)
 8000c1c:	f7ff fef8 	bl	8000a10 <Set_Motor>
	Set_Motor(&Motor4,HOLD);
 8000c20:	2100      	movs	r1, #0
 8000c22:	4808      	ldr	r0, [pc, #32]	; (8000c44 <main+0xc8>)
 8000c24:	f7ff fef4 	bl	8000a10 <Set_Motor>



	while (1)
 8000c28:	e7fe      	b.n	8000c28 <main+0xac>
 8000c2a:	bf00      	nop
 8000c2c:	20000040 	.word	0x20000040
 8000c30:	08007190 	.word	0x08007190
 8000c34:	20000054 	.word	0x20000054
 8000c38:	08007198 	.word	0x08007198
 8000c3c:	20000068 	.word	0x20000068
 8000c40:	080071a0 	.word	0x080071a0
 8000c44:	2000007c 	.word	0x2000007c
 8000c48:	080071a8 	.word	0x080071a8
 8000c4c:	200011c8 	.word	0x200011c8
 8000c50:	20000120 	.word	0x20000120
 8000c54:	20000166 	.word	0x20000166
 8000c58:	20001210 	.word	0x20001210
 8000c5c:	2000096e 	.word	0x2000096e
 8000c60:	20001254 	.word	0x20001254
 8000c64:	20001180 	.word	0x20001180

08000c68 <HAL_UART_RxCpltCallback>:

/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]





	if( huart->Instance == USART1 )
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a99      	ldr	r2, [pc, #612]	; (8000edc <HAL_UART_RxCpltCallback+0x274>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	f040 80f7 	bne.w	8000e6a <HAL_UART_RxCpltCallback+0x202>
	{

		if(uart1.rxcnt < UART_RX_BUF_SIZE)
		{

			HAL_UART_Receive_IT(&huart1,(uint8_t*)&uart1.rxdata, 1);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	4998      	ldr	r1, [pc, #608]	; (8000ee0 <HAL_UART_RxCpltCallback+0x278>)
 8000c80:	4898      	ldr	r0, [pc, #608]	; (8000ee4 <HAL_UART_RxCpltCallback+0x27c>)
 8000c82:	f004 fcf6 	bl	8005672 <HAL_UART_Receive_IT>
			HAL_UART_Transmit(&huart1,(uint8_t*)&uart1.rxdata, 1,0xffff);
 8000c86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4994      	ldr	r1, [pc, #592]	; (8000ee0 <HAL_UART_RxCpltCallback+0x278>)
 8000c8e:	4895      	ldr	r0, [pc, #596]	; (8000ee4 <HAL_UART_RxCpltCallback+0x27c>)
 8000c90:	f004 fc5d 	bl	800554e <HAL_UART_Transmit>
			uart1.rxbuf[uart1.rxcnt]  = uart1.rxdata;
 8000c94:	4b94      	ldr	r3, [pc, #592]	; (8000ee8 <HAL_UART_RxCpltCallback+0x280>)
 8000c96:	791b      	ldrb	r3, [r3, #4]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4b93      	ldr	r3, [pc, #588]	; (8000ee8 <HAL_UART_RxCpltCallback+0x280>)
 8000c9c:	799a      	ldrb	r2, [r3, #6]
 8000c9e:	4b92      	ldr	r3, [pc, #584]	; (8000ee8 <HAL_UART_RxCpltCallback+0x280>)
 8000ca0:	440b      	add	r3, r1
 8000ca2:	71da      	strb	r2, [r3, #7]
			uart1.rxcnt++;
 8000ca4:	4b90      	ldr	r3, [pc, #576]	; (8000ee8 <HAL_UART_RxCpltCallback+0x280>)
 8000ca6:	791b      	ldrb	r3, [r3, #4]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	4b8e      	ldr	r3, [pc, #568]	; (8000ee8 <HAL_UART_RxCpltCallback+0x280>)
 8000cae:	711a      	strb	r2, [r3, #4]

			if(uart1.rxdata == '\n') // ���͸� �Է½�.
 8000cb0:	4b8d      	ldr	r3, [pc, #564]	; (8000ee8 <HAL_UART_RxCpltCallback+0x280>)
 8000cb2:	799b      	ldrb	r3, [r3, #6]
 8000cb4:	2b0a      	cmp	r3, #10
 8000cb6:	f040 80a7 	bne.w	8000e08 <HAL_UART_RxCpltCallback+0x1a0>
			{

				uart1.rxdata = '\0';
 8000cba:	4b8b      	ldr	r3, [pc, #556]	; (8000ee8 <HAL_UART_RxCpltCallback+0x280>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	719a      	strb	r2, [r3, #6]
				uart1.rxcnt--;
 8000cc0:	4b89      	ldr	r3, [pc, #548]	; (8000ee8 <HAL_UART_RxCpltCallback+0x280>)
 8000cc2:	791b      	ldrb	r3, [r3, #4]
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	4b87      	ldr	r3, [pc, #540]	; (8000ee8 <HAL_UART_RxCpltCallback+0x280>)
 8000cca:	711a      	strb	r2, [r3, #4]
				uart1.rxbuf[uart1.rxcnt] = '\0';
 8000ccc:	4b86      	ldr	r3, [pc, #536]	; (8000ee8 <HAL_UART_RxCpltCallback+0x280>)
 8000cce:	791b      	ldrb	r3, [r3, #4]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b85      	ldr	r3, [pc, #532]	; (8000ee8 <HAL_UART_RxCpltCallback+0x280>)
 8000cd4:	4413      	add	r3, r2
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	71da      	strb	r2, [r3, #7]
				 *   HAL_UART_Transmit(&huart3,(uint8_t*)uart3.txbuf, strlen(uart3.txbuf),10);
				 */



				printf("Slave : %s\n",uart1.rxbuf);
 8000cda:	4984      	ldr	r1, [pc, #528]	; (8000eec <HAL_UART_RxCpltCallback+0x284>)
 8000cdc:	4884      	ldr	r0, [pc, #528]	; (8000ef0 <HAL_UART_RxCpltCallback+0x288>)
 8000cde:	f005 f957 	bl	8005f90 <iprintf>
				if(strcmp(uart1.rxbuf,"ld1") == 0)
 8000ce2:	4984      	ldr	r1, [pc, #528]	; (8000ef4 <HAL_UART_RxCpltCallback+0x28c>)
 8000ce4:	4881      	ldr	r0, [pc, #516]	; (8000eec <HAL_UART_RxCpltCallback+0x284>)
 8000ce6:	f7ff fa31 	bl	800014c <strcmp>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d108      	bne.n	8000d02 <HAL_UART_RxCpltCallback+0x9a>
				{
					printf("Toggle LD1\n");
 8000cf0:	4881      	ldr	r0, [pc, #516]	; (8000ef8 <HAL_UART_RxCpltCallback+0x290>)
 8000cf2:	f005 f9e7 	bl	80060c4 <puts>
					HAL_GPIO_TogglePin(LD1_GPIO_PORT,LD1_PIN);
 8000cf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfa:	4880      	ldr	r0, [pc, #512]	; (8000efc <HAL_UART_RxCpltCallback+0x294>)
 8000cfc:	f002 fbf7 	bl	80034ee <HAL_GPIO_TogglePin>
 8000d00:	e076      	b.n	8000df0 <HAL_UART_RxCpltCallback+0x188>
				}
				else if(strcmp(uart1.rxbuf,"ld2") == 0)
 8000d02:	497f      	ldr	r1, [pc, #508]	; (8000f00 <HAL_UART_RxCpltCallback+0x298>)
 8000d04:	4879      	ldr	r0, [pc, #484]	; (8000eec <HAL_UART_RxCpltCallback+0x284>)
 8000d06:	f7ff fa21 	bl	800014c <strcmp>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d108      	bne.n	8000d22 <HAL_UART_RxCpltCallback+0xba>
				{
					printf("Toggle LD2\n");
 8000d10:	487c      	ldr	r0, [pc, #496]	; (8000f04 <HAL_UART_RxCpltCallback+0x29c>)
 8000d12:	f005 f9d7 	bl	80060c4 <puts>
					HAL_GPIO_TogglePin(LD2_GPIO_PORT,LD2_PIN);
 8000d16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d1a:	4878      	ldr	r0, [pc, #480]	; (8000efc <HAL_UART_RxCpltCallback+0x294>)
 8000d1c:	f002 fbe7 	bl	80034ee <HAL_GPIO_TogglePin>
 8000d20:	e066      	b.n	8000df0 <HAL_UART_RxCpltCallback+0x188>
				}
				else if(strcmp(uart1.rxbuf,"ld3") == 0)
 8000d22:	4979      	ldr	r1, [pc, #484]	; (8000f08 <HAL_UART_RxCpltCallback+0x2a0>)
 8000d24:	4871      	ldr	r0, [pc, #452]	; (8000eec <HAL_UART_RxCpltCallback+0x284>)
 8000d26:	f7ff fa11 	bl	800014c <strcmp>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d108      	bne.n	8000d42 <HAL_UART_RxCpltCallback+0xda>
				{
					printf("Toggle LD3\n");
 8000d30:	4876      	ldr	r0, [pc, #472]	; (8000f0c <HAL_UART_RxCpltCallback+0x2a4>)
 8000d32:	f005 f9c7 	bl	80060c4 <puts>
					HAL_GPIO_TogglePin(LD3_GPIO_PORT,LD3_PIN);
 8000d36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3a:	4870      	ldr	r0, [pc, #448]	; (8000efc <HAL_UART_RxCpltCallback+0x294>)
 8000d3c:	f002 fbd7 	bl	80034ee <HAL_GPIO_TogglePin>
 8000d40:	e056      	b.n	8000df0 <HAL_UART_RxCpltCallback+0x188>
				}
				else if(strcmp(uart1.rxbuf,"ld4") == 0)
 8000d42:	4973      	ldr	r1, [pc, #460]	; (8000f10 <HAL_UART_RxCpltCallback+0x2a8>)
 8000d44:	4869      	ldr	r0, [pc, #420]	; (8000eec <HAL_UART_RxCpltCallback+0x284>)
 8000d46:	f7ff fa01 	bl	800014c <strcmp>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d108      	bne.n	8000d62 <HAL_UART_RxCpltCallback+0xfa>
				{
					printf("Toggle LD4\n");
 8000d50:	4870      	ldr	r0, [pc, #448]	; (8000f14 <HAL_UART_RxCpltCallback+0x2ac>)
 8000d52:	f005 f9b7 	bl	80060c4 <puts>
					HAL_GPIO_TogglePin(LD4_GPIO_PORT,LD4_PIN);
 8000d56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d5a:	486f      	ldr	r0, [pc, #444]	; (8000f18 <HAL_UART_RxCpltCallback+0x2b0>)
 8000d5c:	f002 fbc7 	bl	80034ee <HAL_GPIO_TogglePin>
 8000d60:	e046      	b.n	8000df0 <HAL_UART_RxCpltCallback+0x188>
				}
				else if ( strcmp(uart1.rxbuf,"tim4") == 0 )
 8000d62:	496e      	ldr	r1, [pc, #440]	; (8000f1c <HAL_UART_RxCpltCallback+0x2b4>)
 8000d64:	4861      	ldr	r0, [pc, #388]	; (8000eec <HAL_UART_RxCpltCallback+0x284>)
 8000d66:	f7ff f9f1 	bl	800014c <strcmp>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d123      	bne.n	8000db8 <HAL_UART_RxCpltCallback+0x150>
				{


					if (TIM4_FLAG == OFF)
 8000d70:	4b6b      	ldr	r3, [pc, #428]	; (8000f20 <HAL_UART_RxCpltCallback+0x2b8>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10d      	bne.n	8000d94 <HAL_UART_RxCpltCallback+0x12c>
					{
						printf("--- TIM4 : ACTIVATED ---\n");
 8000d78:	486a      	ldr	r0, [pc, #424]	; (8000f24 <HAL_UART_RxCpltCallback+0x2bc>)
 8000d7a:	f005 f9a3 	bl	80060c4 <puts>
						HAL_TIM_Base_Start(&htim4);
 8000d7e:	486a      	ldr	r0, [pc, #424]	; (8000f28 <HAL_UART_RxCpltCallback+0x2c0>)
 8000d80:	f003 f9c6 	bl	8004110 <HAL_TIM_Base_Start>
						HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000d84:	2100      	movs	r1, #0
 8000d86:	4868      	ldr	r0, [pc, #416]	; (8000f28 <HAL_UART_RxCpltCallback+0x2c0>)
 8000d88:	f003 fa8a 	bl	80042a0 <HAL_TIM_OC_Start_IT>
						TIM4_FLAG = ON;
 8000d8c:	4b64      	ldr	r3, [pc, #400]	; (8000f20 <HAL_UART_RxCpltCallback+0x2b8>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	e02d      	b.n	8000df0 <HAL_UART_RxCpltCallback+0x188>

					}
					else if ( TIM4_FLAG == ON)
 8000d94:	4b62      	ldr	r3, [pc, #392]	; (8000f20 <HAL_UART_RxCpltCallback+0x2b8>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d129      	bne.n	8000df0 <HAL_UART_RxCpltCallback+0x188>
					{

						printf("--- TIM4 : INACTIVATED ---\n");
 8000d9c:	4863      	ldr	r0, [pc, #396]	; (8000f2c <HAL_UART_RxCpltCallback+0x2c4>)
 8000d9e:	f005 f991 	bl	80060c4 <puts>
						HAL_TIM_Base_Stop(&htim4);
 8000da2:	4861      	ldr	r0, [pc, #388]	; (8000f28 <HAL_UART_RxCpltCallback+0x2c0>)
 8000da4:	f003 f9fe 	bl	80041a4 <HAL_TIM_Base_Stop>
						HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_1);
 8000da8:	2100      	movs	r1, #0
 8000daa:	485f      	ldr	r0, [pc, #380]	; (8000f28 <HAL_UART_RxCpltCallback+0x2c0>)
 8000dac:	f003 fb60 	bl	8004470 <HAL_TIM_OC_Stop_IT>
						TIM4_FLAG = OFF;
 8000db0:	4b5b      	ldr	r3, [pc, #364]	; (8000f20 <HAL_UART_RxCpltCallback+0x2b8>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
 8000db6:	e01b      	b.n	8000df0 <HAL_UART_RxCpltCallback+0x188>
					}

				}
				else if ( strcmp(uart1.rxbuf,"UART") == 0)
 8000db8:	495d      	ldr	r1, [pc, #372]	; (8000f30 <HAL_UART_RxCpltCallback+0x2c8>)
 8000dba:	484c      	ldr	r0, [pc, #304]	; (8000eec <HAL_UART_RxCpltCallback+0x284>)
 8000dbc:	f7ff f9c6 	bl	800014c <strcmp>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d114      	bne.n	8000df0 <HAL_UART_RxCpltCallback+0x188>
				{

					if(serial_flag == OFF)
 8000dc6:	4b5b      	ldr	r3, [pc, #364]	; (8000f34 <HAL_UART_RxCpltCallback+0x2cc>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d106      	bne.n	8000ddc <HAL_UART_RxCpltCallback+0x174>
					{
						serial_flag = ON;
 8000dce:	4b59      	ldr	r3, [pc, #356]	; (8000f34 <HAL_UART_RxCpltCallback+0x2cc>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
						printf("--- UART : ACTIVATED ---\n");
 8000dd4:	4858      	ldr	r0, [pc, #352]	; (8000f38 <HAL_UART_RxCpltCallback+0x2d0>)
 8000dd6:	f005 f975 	bl	80060c4 <puts>
 8000dda:	e009      	b.n	8000df0 <HAL_UART_RxCpltCallback+0x188>
					}
					else if (serial_flag == ON)
 8000ddc:	4b55      	ldr	r3, [pc, #340]	; (8000f34 <HAL_UART_RxCpltCallback+0x2cc>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d105      	bne.n	8000df0 <HAL_UART_RxCpltCallback+0x188>
					{
						printf("--- UART : INACTIVATED ---\n");
 8000de4:	4855      	ldr	r0, [pc, #340]	; (8000f3c <HAL_UART_RxCpltCallback+0x2d4>)
 8000de6:	f005 f96d 	bl	80060c4 <puts>
						serial_flag = OFF;
 8000dea:	4b52      	ldr	r3, [pc, #328]	; (8000f34 <HAL_UART_RxCpltCallback+0x2cc>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
					}

				}
				bzero(uart1.rxbuf,sizeof(uart1.rxbuf));
 8000df0:	4b3e      	ldr	r3, [pc, #248]	; (8000eec <HAL_UART_RxCpltCallback+0x284>)
 8000df2:	4618      	mov	r0, r3
 8000df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df8:	461a      	mov	r2, r3
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	f005 f8c0 	bl	8005f80 <memset>

				uart1.rxcnt = 0;
 8000e00:	4b39      	ldr	r3, [pc, #228]	; (8000ee8 <HAL_UART_RxCpltCallback+0x280>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	711a      	strb	r2, [r3, #4]

	}



}
 8000e06:	e3c8      	b.n	800159a <HAL_UART_RxCpltCallback+0x932>
			else if ( uart1.rxdata == '\b')
 8000e08:	4b37      	ldr	r3, [pc, #220]	; (8000ee8 <HAL_UART_RxCpltCallback+0x280>)
 8000e0a:	799b      	ldrb	r3, [r3, #6]
 8000e0c:	2b08      	cmp	r3, #8
 8000e0e:	f040 83c4 	bne.w	800159a <HAL_UART_RxCpltCallback+0x932>
				uart1.rxdata = '\0';
 8000e12:	4b35      	ldr	r3, [pc, #212]	; (8000ee8 <HAL_UART_RxCpltCallback+0x280>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	719a      	strb	r2, [r3, #6]
				HAL_UART_Transmit(&huart1, (uint8_t *)" ", 1, 0xFFFF);
 8000e18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	4948      	ldr	r1, [pc, #288]	; (8000f40 <HAL_UART_RxCpltCallback+0x2d8>)
 8000e20:	4830      	ldr	r0, [pc, #192]	; (8000ee4 <HAL_UART_RxCpltCallback+0x27c>)
 8000e22:	f004 fb94 	bl	800554e <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t *)"\b", 1, 0xFFFF);
 8000e26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	4945      	ldr	r1, [pc, #276]	; (8000f44 <HAL_UART_RxCpltCallback+0x2dc>)
 8000e2e:	482d      	ldr	r0, [pc, #180]	; (8000ee4 <HAL_UART_RxCpltCallback+0x27c>)
 8000e30:	f004 fb8d 	bl	800554e <HAL_UART_Transmit>
				uart1.rxcnt--;
 8000e34:	4b2c      	ldr	r3, [pc, #176]	; (8000ee8 <HAL_UART_RxCpltCallback+0x280>)
 8000e36:	791b      	ldrb	r3, [r3, #4]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <HAL_UART_RxCpltCallback+0x280>)
 8000e3e:	711a      	strb	r2, [r3, #4]
				uart1.rxbuf[uart1.rxcnt] = '\0';
 8000e40:	4b29      	ldr	r3, [pc, #164]	; (8000ee8 <HAL_UART_RxCpltCallback+0x280>)
 8000e42:	791b      	ldrb	r3, [r3, #4]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <HAL_UART_RxCpltCallback+0x280>)
 8000e48:	4413      	add	r3, r2
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	71da      	strb	r2, [r3, #7]
				uart1.rxcnt--;
 8000e4e:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <HAL_UART_RxCpltCallback+0x280>)
 8000e50:	791b      	ldrb	r3, [r3, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4b24      	ldr	r3, [pc, #144]	; (8000ee8 <HAL_UART_RxCpltCallback+0x280>)
 8000e58:	711a      	strb	r2, [r3, #4]
				uart1.rxbuf[uart1.rxcnt] = '\0';
 8000e5a:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <HAL_UART_RxCpltCallback+0x280>)
 8000e5c:	791b      	ldrb	r3, [r3, #4]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <HAL_UART_RxCpltCallback+0x280>)
 8000e62:	4413      	add	r3, r2
 8000e64:	2200      	movs	r2, #0
 8000e66:	71da      	strb	r2, [r3, #7]
}
 8000e68:	e397      	b.n	800159a <HAL_UART_RxCpltCallback+0x932>
	else if( huart->Instance == USART3 )
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a36      	ldr	r2, [pc, #216]	; (8000f48 <HAL_UART_RxCpltCallback+0x2e0>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	f040 8392 	bne.w	800159a <HAL_UART_RxCpltCallback+0x932>
			HAL_UART_Receive_IT(&huart3,(uint8_t*)&uart3.rxdata, 1);
 8000e76:	2201      	movs	r2, #1
 8000e78:	4934      	ldr	r1, [pc, #208]	; (8000f4c <HAL_UART_RxCpltCallback+0x2e4>)
 8000e7a:	4835      	ldr	r0, [pc, #212]	; (8000f50 <HAL_UART_RxCpltCallback+0x2e8>)
 8000e7c:	f004 fbf9 	bl	8005672 <HAL_UART_Receive_IT>
			uart3.rxbuf[uart3.rxcnt]  = uart3.rxdata;
 8000e80:	4b34      	ldr	r3, [pc, #208]	; (8000f54 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e82:	791b      	ldrb	r3, [r3, #4]
 8000e84:	4619      	mov	r1, r3
 8000e86:	4b33      	ldr	r3, [pc, #204]	; (8000f54 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e88:	799a      	ldrb	r2, [r3, #6]
 8000e8a:	4b32      	ldr	r3, [pc, #200]	; (8000f54 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e8c:	440b      	add	r3, r1
 8000e8e:	71da      	strb	r2, [r3, #7]
			uart3.rxcnt++;
 8000e90:	4b30      	ldr	r3, [pc, #192]	; (8000f54 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e92:	791b      	ldrb	r3, [r3, #4]
 8000e94:	3301      	adds	r3, #1
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b2e      	ldr	r3, [pc, #184]	; (8000f54 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e9a:	711a      	strb	r2, [r3, #4]
			if(uart3.rxdata == '\n')
 8000e9c:	4b2d      	ldr	r3, [pc, #180]	; (8000f54 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e9e:	799b      	ldrb	r3, [r3, #6]
 8000ea0:	2b0a      	cmp	r3, #10
 8000ea2:	f040 82f4 	bne.w	800148e <HAL_UART_RxCpltCallback+0x826>
				uart3.rxdata = '\0';
 8000ea6:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <HAL_UART_RxCpltCallback+0x2ec>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	719a      	strb	r2, [r3, #6]
				uart3.rxcnt--;
 8000eac:	4b29      	ldr	r3, [pc, #164]	; (8000f54 <HAL_UART_RxCpltCallback+0x2ec>)
 8000eae:	791b      	ldrb	r3, [r3, #4]
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	4b27      	ldr	r3, [pc, #156]	; (8000f54 <HAL_UART_RxCpltCallback+0x2ec>)
 8000eb6:	711a      	strb	r2, [r3, #4]
				uart3.rxbuf[uart3.rxcnt] = '\0';
 8000eb8:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <HAL_UART_RxCpltCallback+0x2ec>)
 8000eba:	791b      	ldrb	r3, [r3, #4]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b25      	ldr	r3, [pc, #148]	; (8000f54 <HAL_UART_RxCpltCallback+0x2ec>)
 8000ec0:	4413      	add	r3, r2
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	71da      	strb	r2, [r3, #7]
				if(strcmp(uart3.rxbuf,"Key Mode = ON") == 0) // PC�� ���� Key Mode�� üũ�Ǿ�� �ڵ����� W,A,S,DŰ�� ������.
 8000ec6:	4924      	ldr	r1, [pc, #144]	; (8000f58 <HAL_UART_RxCpltCallback+0x2f0>)
 8000ec8:	4824      	ldr	r0, [pc, #144]	; (8000f5c <HAL_UART_RxCpltCallback+0x2f4>)
 8000eca:	f7ff f93f 	bl	800014c <strcmp>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d147      	bne.n	8000f64 <HAL_UART_RxCpltCallback+0x2fc>
					printf("Key Mode : ON\n");
 8000ed4:	4822      	ldr	r0, [pc, #136]	; (8000f60 <HAL_UART_RxCpltCallback+0x2f8>)
 8000ed6:	f005 f8f5 	bl	80060c4 <puts>
 8000eda:	e236      	b.n	800134a <HAL_UART_RxCpltCallback+0x6e2>
 8000edc:	40013800 	.word	0x40013800
 8000ee0:	20000166 	.word	0x20000166
 8000ee4:	20001210 	.word	0x20001210
 8000ee8:	20000160 	.word	0x20000160
 8000eec:	20000167 	.word	0x20000167
 8000ef0:	080071b0 	.word	0x080071b0
 8000ef4:	080071bc 	.word	0x080071bc
 8000ef8:	080071c0 	.word	0x080071c0
 8000efc:	40010c00 	.word	0x40010c00
 8000f00:	080071cc 	.word	0x080071cc
 8000f04:	080071d0 	.word	0x080071d0
 8000f08:	080071dc 	.word	0x080071dc
 8000f0c:	080071e0 	.word	0x080071e0
 8000f10:	080071ec 	.word	0x080071ec
 8000f14:	080071f0 	.word	0x080071f0
 8000f18:	40010800 	.word	0x40010800
 8000f1c:	080071fc 	.word	0x080071fc
 8000f20:	20000091 	.word	0x20000091
 8000f24:	08007204 	.word	0x08007204
 8000f28:	200011c8 	.word	0x200011c8
 8000f2c:	08007220 	.word	0x08007220
 8000f30:	0800723c 	.word	0x0800723c
 8000f34:	20001179 	.word	0x20001179
 8000f38:	08007244 	.word	0x08007244
 8000f3c:	08007260 	.word	0x08007260
 8000f40:	0800727c 	.word	0x0800727c
 8000f44:	08007280 	.word	0x08007280
 8000f48:	40004800 	.word	0x40004800
 8000f4c:	2000096e 	.word	0x2000096e
 8000f50:	20001254 	.word	0x20001254
 8000f54:	20000968 	.word	0x20000968
 8000f58:	08007284 	.word	0x08007284
 8000f5c:	2000096f 	.word	0x2000096f
 8000f60:	08007294 	.word	0x08007294
				else if(strcmp(uart3.rxbuf,"Key Mode = OFF") == 0)
 8000f64:	49b6      	ldr	r1, [pc, #728]	; (8001240 <HAL_UART_RxCpltCallback+0x5d8>)
 8000f66:	48b7      	ldr	r0, [pc, #732]	; (8001244 <HAL_UART_RxCpltCallback+0x5dc>)
 8000f68:	f7ff f8f0 	bl	800014c <strcmp>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d11f      	bne.n	8000fb2 <HAL_UART_RxCpltCallback+0x34a>
					printf("Key Mode : OFF\n");
 8000f72:	48b5      	ldr	r0, [pc, #724]	; (8001248 <HAL_UART_RxCpltCallback+0x5e0>)
 8000f74:	f005 f8a6 	bl	80060c4 <puts>
					Set_Motor(&Motor1,HOLD);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	48b4      	ldr	r0, [pc, #720]	; (800124c <HAL_UART_RxCpltCallback+0x5e4>)
 8000f7c:	f7ff fd48 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor2,HOLD);
 8000f80:	2100      	movs	r1, #0
 8000f82:	48b3      	ldr	r0, [pc, #716]	; (8001250 <HAL_UART_RxCpltCallback+0x5e8>)
 8000f84:	f7ff fd44 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor3,HOLD);
 8000f88:	2100      	movs	r1, #0
 8000f8a:	48b2      	ldr	r0, [pc, #712]	; (8001254 <HAL_UART_RxCpltCallback+0x5ec>)
 8000f8c:	f7ff fd40 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor4,HOLD);
 8000f90:	2100      	movs	r1, #0
 8000f92:	48b1      	ldr	r0, [pc, #708]	; (8001258 <HAL_UART_RxCpltCallback+0x5f0>)
 8000f94:	f7ff fd3c 	bl	8000a10 <Set_Motor>
					Check_Motor(&Motor1);
 8000f98:	48ac      	ldr	r0, [pc, #688]	; (800124c <HAL_UART_RxCpltCallback+0x5e4>)
 8000f9a:	f7ff fcfb 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor2);
 8000f9e:	48ac      	ldr	r0, [pc, #688]	; (8001250 <HAL_UART_RxCpltCallback+0x5e8>)
 8000fa0:	f7ff fcf8 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor3);
 8000fa4:	48ab      	ldr	r0, [pc, #684]	; (8001254 <HAL_UART_RxCpltCallback+0x5ec>)
 8000fa6:	f7ff fcf5 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor4);
 8000faa:	48ab      	ldr	r0, [pc, #684]	; (8001258 <HAL_UART_RxCpltCallback+0x5f0>)
 8000fac:	f7ff fcf2 	bl	8000994 <Check_Motor>
 8000fb0:	e1cb      	b.n	800134a <HAL_UART_RxCpltCallback+0x6e2>
				else if(strcmp(uart3.rxbuf,"W") == 0 ) // Ű���忡�� W������ ����.
 8000fb2:	49aa      	ldr	r1, [pc, #680]	; (800125c <HAL_UART_RxCpltCallback+0x5f4>)
 8000fb4:	48a3      	ldr	r0, [pc, #652]	; (8001244 <HAL_UART_RxCpltCallback+0x5dc>)
 8000fb6:	f7ff f8c9 	bl	800014c <strcmp>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d11f      	bne.n	8001000 <HAL_UART_RxCpltCallback+0x398>
					printf("W");
 8000fc0:	2057      	movs	r0, #87	; 0x57
 8000fc2:	f004 fffd 	bl	8005fc0 <putchar>
					Set_Motor(&Motor1,FORWARD);
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	48a0      	ldr	r0, [pc, #640]	; (800124c <HAL_UART_RxCpltCallback+0x5e4>)
 8000fca:	f7ff fd21 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor2,FORWARD);
 8000fce:	2101      	movs	r1, #1
 8000fd0:	489f      	ldr	r0, [pc, #636]	; (8001250 <HAL_UART_RxCpltCallback+0x5e8>)
 8000fd2:	f7ff fd1d 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor3,FORWARD);
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	489e      	ldr	r0, [pc, #632]	; (8001254 <HAL_UART_RxCpltCallback+0x5ec>)
 8000fda:	f7ff fd19 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor4,FORWARD);
 8000fde:	2101      	movs	r1, #1
 8000fe0:	489d      	ldr	r0, [pc, #628]	; (8001258 <HAL_UART_RxCpltCallback+0x5f0>)
 8000fe2:	f7ff fd15 	bl	8000a10 <Set_Motor>
					Check_Motor(&Motor1);
 8000fe6:	4899      	ldr	r0, [pc, #612]	; (800124c <HAL_UART_RxCpltCallback+0x5e4>)
 8000fe8:	f7ff fcd4 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor2);
 8000fec:	4898      	ldr	r0, [pc, #608]	; (8001250 <HAL_UART_RxCpltCallback+0x5e8>)
 8000fee:	f7ff fcd1 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor3);
 8000ff2:	4898      	ldr	r0, [pc, #608]	; (8001254 <HAL_UART_RxCpltCallback+0x5ec>)
 8000ff4:	f7ff fcce 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor4);
 8000ff8:	4897      	ldr	r0, [pc, #604]	; (8001258 <HAL_UART_RxCpltCallback+0x5f0>)
 8000ffa:	f7ff fccb 	bl	8000994 <Check_Motor>
 8000ffe:	e1a4      	b.n	800134a <HAL_UART_RxCpltCallback+0x6e2>
				else if(strcmp(uart3.rxbuf,"S") == 0 ) // Ű���忡�� S������ ����.
 8001000:	4997      	ldr	r1, [pc, #604]	; (8001260 <HAL_UART_RxCpltCallback+0x5f8>)
 8001002:	4890      	ldr	r0, [pc, #576]	; (8001244 <HAL_UART_RxCpltCallback+0x5dc>)
 8001004:	f7ff f8a2 	bl	800014c <strcmp>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d11f      	bne.n	800104e <HAL_UART_RxCpltCallback+0x3e6>
					printf("S");
 800100e:	2053      	movs	r0, #83	; 0x53
 8001010:	f004 ffd6 	bl	8005fc0 <putchar>
					Set_Motor(&Motor1,HOLD);
 8001014:	2100      	movs	r1, #0
 8001016:	488d      	ldr	r0, [pc, #564]	; (800124c <HAL_UART_RxCpltCallback+0x5e4>)
 8001018:	f7ff fcfa 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor2,HOLD);
 800101c:	2100      	movs	r1, #0
 800101e:	488c      	ldr	r0, [pc, #560]	; (8001250 <HAL_UART_RxCpltCallback+0x5e8>)
 8001020:	f7ff fcf6 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor3,HOLD);
 8001024:	2100      	movs	r1, #0
 8001026:	488b      	ldr	r0, [pc, #556]	; (8001254 <HAL_UART_RxCpltCallback+0x5ec>)
 8001028:	f7ff fcf2 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor4,HOLD);
 800102c:	2100      	movs	r1, #0
 800102e:	488a      	ldr	r0, [pc, #552]	; (8001258 <HAL_UART_RxCpltCallback+0x5f0>)
 8001030:	f7ff fcee 	bl	8000a10 <Set_Motor>
					Check_Motor(&Motor1);
 8001034:	4885      	ldr	r0, [pc, #532]	; (800124c <HAL_UART_RxCpltCallback+0x5e4>)
 8001036:	f7ff fcad 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor2);
 800103a:	4885      	ldr	r0, [pc, #532]	; (8001250 <HAL_UART_RxCpltCallback+0x5e8>)
 800103c:	f7ff fcaa 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor3);
 8001040:	4884      	ldr	r0, [pc, #528]	; (8001254 <HAL_UART_RxCpltCallback+0x5ec>)
 8001042:	f7ff fca7 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor4);
 8001046:	4884      	ldr	r0, [pc, #528]	; (8001258 <HAL_UART_RxCpltCallback+0x5f0>)
 8001048:	f7ff fca4 	bl	8000994 <Check_Motor>
 800104c:	e17d      	b.n	800134a <HAL_UART_RxCpltCallback+0x6e2>
				else if(strcmp(uart3.rxbuf,"X") == 0 )
 800104e:	4985      	ldr	r1, [pc, #532]	; (8001264 <HAL_UART_RxCpltCallback+0x5fc>)
 8001050:	487c      	ldr	r0, [pc, #496]	; (8001244 <HAL_UART_RxCpltCallback+0x5dc>)
 8001052:	f7ff f87b 	bl	800014c <strcmp>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d123      	bne.n	80010a4 <HAL_UART_RxCpltCallback+0x43c>
					printf("X");
 800105c:	2058      	movs	r0, #88	; 0x58
 800105e:	f004 ffaf 	bl	8005fc0 <putchar>
					Set_Motor(&Motor1,BACKWARD);
 8001062:	f04f 31ff 	mov.w	r1, #4294967295
 8001066:	4879      	ldr	r0, [pc, #484]	; (800124c <HAL_UART_RxCpltCallback+0x5e4>)
 8001068:	f7ff fcd2 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor2,BACKWARD);
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	4877      	ldr	r0, [pc, #476]	; (8001250 <HAL_UART_RxCpltCallback+0x5e8>)
 8001072:	f7ff fccd 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor3,BACKWARD);
 8001076:	f04f 31ff 	mov.w	r1, #4294967295
 800107a:	4876      	ldr	r0, [pc, #472]	; (8001254 <HAL_UART_RxCpltCallback+0x5ec>)
 800107c:	f7ff fcc8 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor4,BACKWARD);
 8001080:	f04f 31ff 	mov.w	r1, #4294967295
 8001084:	4874      	ldr	r0, [pc, #464]	; (8001258 <HAL_UART_RxCpltCallback+0x5f0>)
 8001086:	f7ff fcc3 	bl	8000a10 <Set_Motor>
					Check_Motor(&Motor1);
 800108a:	4870      	ldr	r0, [pc, #448]	; (800124c <HAL_UART_RxCpltCallback+0x5e4>)
 800108c:	f7ff fc82 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor2);
 8001090:	486f      	ldr	r0, [pc, #444]	; (8001250 <HAL_UART_RxCpltCallback+0x5e8>)
 8001092:	f7ff fc7f 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor3);
 8001096:	486f      	ldr	r0, [pc, #444]	; (8001254 <HAL_UART_RxCpltCallback+0x5ec>)
 8001098:	f7ff fc7c 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor4);
 800109c:	486e      	ldr	r0, [pc, #440]	; (8001258 <HAL_UART_RxCpltCallback+0x5f0>)
 800109e:	f7ff fc79 	bl	8000994 <Check_Motor>
 80010a2:	e152      	b.n	800134a <HAL_UART_RxCpltCallback+0x6e2>
				else if(strcmp(uart3.rxbuf,"Q") == 0 )
 80010a4:	4970      	ldr	r1, [pc, #448]	; (8001268 <HAL_UART_RxCpltCallback+0x600>)
 80010a6:	4867      	ldr	r0, [pc, #412]	; (8001244 <HAL_UART_RxCpltCallback+0x5dc>)
 80010a8:	f7ff f850 	bl	800014c <strcmp>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d11f      	bne.n	80010f2 <HAL_UART_RxCpltCallback+0x48a>
					printf("Q");
 80010b2:	2051      	movs	r0, #81	; 0x51
 80010b4:	f004 ff84 	bl	8005fc0 <putchar>
					Set_Motor(&Motor1,FORWARD);
 80010b8:	2101      	movs	r1, #1
 80010ba:	4864      	ldr	r0, [pc, #400]	; (800124c <HAL_UART_RxCpltCallback+0x5e4>)
 80010bc:	f7ff fca8 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor2,FORWARD);
 80010c0:	2101      	movs	r1, #1
 80010c2:	4863      	ldr	r0, [pc, #396]	; (8001250 <HAL_UART_RxCpltCallback+0x5e8>)
 80010c4:	f7ff fca4 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor3,HOLD);
 80010c8:	2100      	movs	r1, #0
 80010ca:	4862      	ldr	r0, [pc, #392]	; (8001254 <HAL_UART_RxCpltCallback+0x5ec>)
 80010cc:	f7ff fca0 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor4,HOLD);
 80010d0:	2100      	movs	r1, #0
 80010d2:	4861      	ldr	r0, [pc, #388]	; (8001258 <HAL_UART_RxCpltCallback+0x5f0>)
 80010d4:	f7ff fc9c 	bl	8000a10 <Set_Motor>
					Check_Motor(&Motor1);
 80010d8:	485c      	ldr	r0, [pc, #368]	; (800124c <HAL_UART_RxCpltCallback+0x5e4>)
 80010da:	f7ff fc5b 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor2);
 80010de:	485c      	ldr	r0, [pc, #368]	; (8001250 <HAL_UART_RxCpltCallback+0x5e8>)
 80010e0:	f7ff fc58 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor3);
 80010e4:	485b      	ldr	r0, [pc, #364]	; (8001254 <HAL_UART_RxCpltCallback+0x5ec>)
 80010e6:	f7ff fc55 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor4);
 80010ea:	485b      	ldr	r0, [pc, #364]	; (8001258 <HAL_UART_RxCpltCallback+0x5f0>)
 80010ec:	f7ff fc52 	bl	8000994 <Check_Motor>
 80010f0:	e12b      	b.n	800134a <HAL_UART_RxCpltCallback+0x6e2>
				else if(strcmp(uart3.rxbuf,"E") == 0 ) // E��ư ������ ���� ����
 80010f2:	495e      	ldr	r1, [pc, #376]	; (800126c <HAL_UART_RxCpltCallback+0x604>)
 80010f4:	4853      	ldr	r0, [pc, #332]	; (8001244 <HAL_UART_RxCpltCallback+0x5dc>)
 80010f6:	f7ff f829 	bl	800014c <strcmp>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d11f      	bne.n	8001140 <HAL_UART_RxCpltCallback+0x4d8>
					printf("E");
 8001100:	2045      	movs	r0, #69	; 0x45
 8001102:	f004 ff5d 	bl	8005fc0 <putchar>
					Set_Motor(&Motor1,HOLD);
 8001106:	2100      	movs	r1, #0
 8001108:	4850      	ldr	r0, [pc, #320]	; (800124c <HAL_UART_RxCpltCallback+0x5e4>)
 800110a:	f7ff fc81 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor2,HOLD);
 800110e:	2100      	movs	r1, #0
 8001110:	484f      	ldr	r0, [pc, #316]	; (8001250 <HAL_UART_RxCpltCallback+0x5e8>)
 8001112:	f7ff fc7d 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor3,FORWARD);
 8001116:	2101      	movs	r1, #1
 8001118:	484e      	ldr	r0, [pc, #312]	; (8001254 <HAL_UART_RxCpltCallback+0x5ec>)
 800111a:	f7ff fc79 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor4,FORWARD);
 800111e:	2101      	movs	r1, #1
 8001120:	484d      	ldr	r0, [pc, #308]	; (8001258 <HAL_UART_RxCpltCallback+0x5f0>)
 8001122:	f7ff fc75 	bl	8000a10 <Set_Motor>
					Check_Motor(&Motor1);
 8001126:	4849      	ldr	r0, [pc, #292]	; (800124c <HAL_UART_RxCpltCallback+0x5e4>)
 8001128:	f7ff fc34 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor2);
 800112c:	4848      	ldr	r0, [pc, #288]	; (8001250 <HAL_UART_RxCpltCallback+0x5e8>)
 800112e:	f7ff fc31 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor3);
 8001132:	4848      	ldr	r0, [pc, #288]	; (8001254 <HAL_UART_RxCpltCallback+0x5ec>)
 8001134:	f7ff fc2e 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor4);
 8001138:	4847      	ldr	r0, [pc, #284]	; (8001258 <HAL_UART_RxCpltCallback+0x5f0>)
 800113a:	f7ff fc2b 	bl	8000994 <Check_Motor>
 800113e:	e104      	b.n	800134a <HAL_UART_RxCpltCallback+0x6e2>
				else if(strcmp(uart3.rxbuf,"Z") == 0 )
 8001140:	494b      	ldr	r1, [pc, #300]	; (8001270 <HAL_UART_RxCpltCallback+0x608>)
 8001142:	4840      	ldr	r0, [pc, #256]	; (8001244 <HAL_UART_RxCpltCallback+0x5dc>)
 8001144:	f7ff f802 	bl	800014c <strcmp>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d121      	bne.n	8001192 <HAL_UART_RxCpltCallback+0x52a>
					printf("Z");
 800114e:	205a      	movs	r0, #90	; 0x5a
 8001150:	f004 ff36 	bl	8005fc0 <putchar>
					Set_Motor(&Motor1,BACKWARD);
 8001154:	f04f 31ff 	mov.w	r1, #4294967295
 8001158:	483c      	ldr	r0, [pc, #240]	; (800124c <HAL_UART_RxCpltCallback+0x5e4>)
 800115a:	f7ff fc59 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor2,BACKWARD);
 800115e:	f04f 31ff 	mov.w	r1, #4294967295
 8001162:	483b      	ldr	r0, [pc, #236]	; (8001250 <HAL_UART_RxCpltCallback+0x5e8>)
 8001164:	f7ff fc54 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor3,HOLD);
 8001168:	2100      	movs	r1, #0
 800116a:	483a      	ldr	r0, [pc, #232]	; (8001254 <HAL_UART_RxCpltCallback+0x5ec>)
 800116c:	f7ff fc50 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor4,HOLD);
 8001170:	2100      	movs	r1, #0
 8001172:	4839      	ldr	r0, [pc, #228]	; (8001258 <HAL_UART_RxCpltCallback+0x5f0>)
 8001174:	f7ff fc4c 	bl	8000a10 <Set_Motor>
					Check_Motor(&Motor1);
 8001178:	4834      	ldr	r0, [pc, #208]	; (800124c <HAL_UART_RxCpltCallback+0x5e4>)
 800117a:	f7ff fc0b 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor2);
 800117e:	4834      	ldr	r0, [pc, #208]	; (8001250 <HAL_UART_RxCpltCallback+0x5e8>)
 8001180:	f7ff fc08 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor3);
 8001184:	4833      	ldr	r0, [pc, #204]	; (8001254 <HAL_UART_RxCpltCallback+0x5ec>)
 8001186:	f7ff fc05 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor4);
 800118a:	4833      	ldr	r0, [pc, #204]	; (8001258 <HAL_UART_RxCpltCallback+0x5f0>)
 800118c:	f7ff fc02 	bl	8000994 <Check_Motor>
 8001190:	e0db      	b.n	800134a <HAL_UART_RxCpltCallback+0x6e2>
				else if(strcmp(uart3.rxbuf,"C") == 0 )
 8001192:	4938      	ldr	r1, [pc, #224]	; (8001274 <HAL_UART_RxCpltCallback+0x60c>)
 8001194:	482b      	ldr	r0, [pc, #172]	; (8001244 <HAL_UART_RxCpltCallback+0x5dc>)
 8001196:	f7fe ffd9 	bl	800014c <strcmp>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d121      	bne.n	80011e4 <HAL_UART_RxCpltCallback+0x57c>
					printf("C");
 80011a0:	2043      	movs	r0, #67	; 0x43
 80011a2:	f004 ff0d 	bl	8005fc0 <putchar>
					Set_Motor(&Motor1,HOLD);
 80011a6:	2100      	movs	r1, #0
 80011a8:	4828      	ldr	r0, [pc, #160]	; (800124c <HAL_UART_RxCpltCallback+0x5e4>)
 80011aa:	f7ff fc31 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor2,HOLD);
 80011ae:	2100      	movs	r1, #0
 80011b0:	4827      	ldr	r0, [pc, #156]	; (8001250 <HAL_UART_RxCpltCallback+0x5e8>)
 80011b2:	f7ff fc2d 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor3,BACKWARD);
 80011b6:	f04f 31ff 	mov.w	r1, #4294967295
 80011ba:	4826      	ldr	r0, [pc, #152]	; (8001254 <HAL_UART_RxCpltCallback+0x5ec>)
 80011bc:	f7ff fc28 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor4,BACKWARD);
 80011c0:	f04f 31ff 	mov.w	r1, #4294967295
 80011c4:	4824      	ldr	r0, [pc, #144]	; (8001258 <HAL_UART_RxCpltCallback+0x5f0>)
 80011c6:	f7ff fc23 	bl	8000a10 <Set_Motor>
					Check_Motor(&Motor1);
 80011ca:	4820      	ldr	r0, [pc, #128]	; (800124c <HAL_UART_RxCpltCallback+0x5e4>)
 80011cc:	f7ff fbe2 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor2);
 80011d0:	481f      	ldr	r0, [pc, #124]	; (8001250 <HAL_UART_RxCpltCallback+0x5e8>)
 80011d2:	f7ff fbdf 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor3);
 80011d6:	481f      	ldr	r0, [pc, #124]	; (8001254 <HAL_UART_RxCpltCallback+0x5ec>)
 80011d8:	f7ff fbdc 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor4);
 80011dc:	481e      	ldr	r0, [pc, #120]	; (8001258 <HAL_UART_RxCpltCallback+0x5f0>)
 80011de:	f7ff fbd9 	bl	8000994 <Check_Motor>
 80011e2:	e0b2      	b.n	800134a <HAL_UART_RxCpltCallback+0x6e2>
				else if(strcmp(uart3.rxbuf,"Dial Mode = OFF") == 0)
 80011e4:	4924      	ldr	r1, [pc, #144]	; (8001278 <HAL_UART_RxCpltCallback+0x610>)
 80011e6:	4817      	ldr	r0, [pc, #92]	; (8001244 <HAL_UART_RxCpltCallback+0x5dc>)
 80011e8:	f7fe ffb0 	bl	800014c <strcmp>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d14a      	bne.n	8001288 <HAL_UART_RxCpltCallback+0x620>
					printf("Switch & Dial : OFF");
 80011f2:	4822      	ldr	r0, [pc, #136]	; (800127c <HAL_UART_RxCpltCallback+0x614>)
 80011f4:	f004 fecc 	bl	8005f90 <iprintf>
					HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_1);
 80011f8:	2100      	movs	r1, #0
 80011fa:	4821      	ldr	r0, [pc, #132]	; (8001280 <HAL_UART_RxCpltCallback+0x618>)
 80011fc:	f003 f938 	bl	8004470 <HAL_TIM_OC_Stop_IT>
					Dial_Mode_Flag = OFF;
 8001200:	4b20      	ldr	r3, [pc, #128]	; (8001284 <HAL_UART_RxCpltCallback+0x61c>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
					Set_Motor(&Motor1,HOLD);
 8001206:	2100      	movs	r1, #0
 8001208:	4810      	ldr	r0, [pc, #64]	; (800124c <HAL_UART_RxCpltCallback+0x5e4>)
 800120a:	f7ff fc01 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor2,HOLD);
 800120e:	2100      	movs	r1, #0
 8001210:	480f      	ldr	r0, [pc, #60]	; (8001250 <HAL_UART_RxCpltCallback+0x5e8>)
 8001212:	f7ff fbfd 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor3,HOLD);
 8001216:	2100      	movs	r1, #0
 8001218:	480e      	ldr	r0, [pc, #56]	; (8001254 <HAL_UART_RxCpltCallback+0x5ec>)
 800121a:	f7ff fbf9 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor4,HOLD);
 800121e:	2100      	movs	r1, #0
 8001220:	480d      	ldr	r0, [pc, #52]	; (8001258 <HAL_UART_RxCpltCallback+0x5f0>)
 8001222:	f7ff fbf5 	bl	8000a10 <Set_Motor>
					Check_Motor(&Motor1);
 8001226:	4809      	ldr	r0, [pc, #36]	; (800124c <HAL_UART_RxCpltCallback+0x5e4>)
 8001228:	f7ff fbb4 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor2);
 800122c:	4808      	ldr	r0, [pc, #32]	; (8001250 <HAL_UART_RxCpltCallback+0x5e8>)
 800122e:	f7ff fbb1 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor3);
 8001232:	4808      	ldr	r0, [pc, #32]	; (8001254 <HAL_UART_RxCpltCallback+0x5ec>)
 8001234:	f7ff fbae 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor4);
 8001238:	4807      	ldr	r0, [pc, #28]	; (8001258 <HAL_UART_RxCpltCallback+0x5f0>)
 800123a:	f7ff fbab 	bl	8000994 <Check_Motor>
 800123e:	e084      	b.n	800134a <HAL_UART_RxCpltCallback+0x6e2>
 8001240:	080072a4 	.word	0x080072a4
 8001244:	2000096f 	.word	0x2000096f
 8001248:	080072b4 	.word	0x080072b4
 800124c:	20000040 	.word	0x20000040
 8001250:	20000054 	.word	0x20000054
 8001254:	20000068 	.word	0x20000068
 8001258:	2000007c 	.word	0x2000007c
 800125c:	080072c4 	.word	0x080072c4
 8001260:	080072c8 	.word	0x080072c8
 8001264:	080072cc 	.word	0x080072cc
 8001268:	080072d0 	.word	0x080072d0
 800126c:	080072d4 	.word	0x080072d4
 8001270:	080072d8 	.word	0x080072d8
 8001274:	080072dc 	.word	0x080072dc
 8001278:	080072e0 	.word	0x080072e0
 800127c:	080072f0 	.word	0x080072f0
 8001280:	200011c8 	.word	0x200011c8
 8001284:	20000090 	.word	0x20000090
				else if(strcmp(uart3.rxbuf,"Dial Mode = ON") == 0)
 8001288:	4999      	ldr	r1, [pc, #612]	; (80014f0 <HAL_UART_RxCpltCallback+0x888>)
 800128a:	489a      	ldr	r0, [pc, #616]	; (80014f4 <HAL_UART_RxCpltCallback+0x88c>)
 800128c:	f7fe ff5e 	bl	800014c <strcmp>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d126      	bne.n	80012e4 <HAL_UART_RxCpltCallback+0x67c>
					printf("Switch & Dial : ON");
 8001296:	4898      	ldr	r0, [pc, #608]	; (80014f8 <HAL_UART_RxCpltCallback+0x890>)
 8001298:	f004 fe7a 	bl	8005f90 <iprintf>
					HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 800129c:	2100      	movs	r1, #0
 800129e:	4897      	ldr	r0, [pc, #604]	; (80014fc <HAL_UART_RxCpltCallback+0x894>)
 80012a0:	f002 fffe 	bl	80042a0 <HAL_TIM_OC_Start_IT>
					Dial_Mode_Flag = ON;
 80012a4:	4b96      	ldr	r3, [pc, #600]	; (8001500 <HAL_UART_RxCpltCallback+0x898>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	701a      	strb	r2, [r3, #0]
					Set_Motor(&Motor1,HOLD);
 80012aa:	2100      	movs	r1, #0
 80012ac:	4895      	ldr	r0, [pc, #596]	; (8001504 <HAL_UART_RxCpltCallback+0x89c>)
 80012ae:	f7ff fbaf 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor2,HOLD);
 80012b2:	2100      	movs	r1, #0
 80012b4:	4894      	ldr	r0, [pc, #592]	; (8001508 <HAL_UART_RxCpltCallback+0x8a0>)
 80012b6:	f7ff fbab 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor3,HOLD);
 80012ba:	2100      	movs	r1, #0
 80012bc:	4893      	ldr	r0, [pc, #588]	; (800150c <HAL_UART_RxCpltCallback+0x8a4>)
 80012be:	f7ff fba7 	bl	8000a10 <Set_Motor>
					Set_Motor(&Motor4,HOLD);
 80012c2:	2100      	movs	r1, #0
 80012c4:	4892      	ldr	r0, [pc, #584]	; (8001510 <HAL_UART_RxCpltCallback+0x8a8>)
 80012c6:	f7ff fba3 	bl	8000a10 <Set_Motor>
					Check_Motor(&Motor1);
 80012ca:	488e      	ldr	r0, [pc, #568]	; (8001504 <HAL_UART_RxCpltCallback+0x89c>)
 80012cc:	f7ff fb62 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor2);
 80012d0:	488d      	ldr	r0, [pc, #564]	; (8001508 <HAL_UART_RxCpltCallback+0x8a0>)
 80012d2:	f7ff fb5f 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor3);
 80012d6:	488d      	ldr	r0, [pc, #564]	; (800150c <HAL_UART_RxCpltCallback+0x8a4>)
 80012d8:	f7ff fb5c 	bl	8000994 <Check_Motor>
					Check_Motor(&Motor4);
 80012dc:	488c      	ldr	r0, [pc, #560]	; (8001510 <HAL_UART_RxCpltCallback+0x8a8>)
 80012de:	f7ff fb59 	bl	8000994 <Check_Motor>
 80012e2:	e032      	b.n	800134a <HAL_UART_RxCpltCallback+0x6e2>
				else if ( strcmp(uart3.rxbuf,"LD1") == 0 )
 80012e4:	498b      	ldr	r1, [pc, #556]	; (8001514 <HAL_UART_RxCpltCallback+0x8ac>)
 80012e6:	4883      	ldr	r0, [pc, #524]	; (80014f4 <HAL_UART_RxCpltCallback+0x88c>)
 80012e8:	f7fe ff30 	bl	800014c <strcmp>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d105      	bne.n	80012fe <HAL_UART_RxCpltCallback+0x696>
					HAL_GPIO_TogglePin(LD1_GPIO_PORT,LD1_PIN);
 80012f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f6:	4888      	ldr	r0, [pc, #544]	; (8001518 <HAL_UART_RxCpltCallback+0x8b0>)
 80012f8:	f002 f8f9 	bl	80034ee <HAL_GPIO_TogglePin>
 80012fc:	e025      	b.n	800134a <HAL_UART_RxCpltCallback+0x6e2>
				else if ( strcmp(uart3.rxbuf,"LD2") == 0 )
 80012fe:	4987      	ldr	r1, [pc, #540]	; (800151c <HAL_UART_RxCpltCallback+0x8b4>)
 8001300:	487c      	ldr	r0, [pc, #496]	; (80014f4 <HAL_UART_RxCpltCallback+0x88c>)
 8001302:	f7fe ff23 	bl	800014c <strcmp>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d105      	bne.n	8001318 <HAL_UART_RxCpltCallback+0x6b0>
					HAL_GPIO_TogglePin(LD2_GPIO_PORT,LD2_PIN);
 800130c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001310:	4881      	ldr	r0, [pc, #516]	; (8001518 <HAL_UART_RxCpltCallback+0x8b0>)
 8001312:	f002 f8ec 	bl	80034ee <HAL_GPIO_TogglePin>
 8001316:	e018      	b.n	800134a <HAL_UART_RxCpltCallback+0x6e2>
				else if ( strcmp(uart3.rxbuf,"LD3") == 0 )
 8001318:	4981      	ldr	r1, [pc, #516]	; (8001520 <HAL_UART_RxCpltCallback+0x8b8>)
 800131a:	4876      	ldr	r0, [pc, #472]	; (80014f4 <HAL_UART_RxCpltCallback+0x88c>)
 800131c:	f7fe ff16 	bl	800014c <strcmp>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d105      	bne.n	8001332 <HAL_UART_RxCpltCallback+0x6ca>
					HAL_GPIO_TogglePin(LD3_GPIO_PORT,LD3_PIN);
 8001326:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800132a:	487b      	ldr	r0, [pc, #492]	; (8001518 <HAL_UART_RxCpltCallback+0x8b0>)
 800132c:	f002 f8df 	bl	80034ee <HAL_GPIO_TogglePin>
 8001330:	e00b      	b.n	800134a <HAL_UART_RxCpltCallback+0x6e2>
				else if ( strcmp(uart3.rxbuf,"LD4") == 0 )
 8001332:	497c      	ldr	r1, [pc, #496]	; (8001524 <HAL_UART_RxCpltCallback+0x8bc>)
 8001334:	486f      	ldr	r0, [pc, #444]	; (80014f4 <HAL_UART_RxCpltCallback+0x88c>)
 8001336:	f7fe ff09 	bl	800014c <strcmp>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d104      	bne.n	800134a <HAL_UART_RxCpltCallback+0x6e2>
					HAL_GPIO_TogglePin(LD4_GPIO_PORT,LD4_PIN);
 8001340:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001344:	4878      	ldr	r0, [pc, #480]	; (8001528 <HAL_UART_RxCpltCallback+0x8c0>)
 8001346:	f002 f8d2 	bl	80034ee <HAL_GPIO_TogglePin>
				if(scroll_flag == ON)
 800134a:	4b78      	ldr	r3, [pc, #480]	; (800152c <HAL_UART_RxCpltCallback+0x8c4>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b01      	cmp	r3, #1
 8001350:	f040 8091 	bne.w	8001476 <HAL_UART_RxCpltCallback+0x80e>
					printf("CODE\n");
 8001354:	4876      	ldr	r0, [pc, #472]	; (8001530 <HAL_UART_RxCpltCallback+0x8c8>)
 8001356:	f004 feb5 	bl	80060c4 <puts>
					if(sel == '1')
 800135a:	4b76      	ldr	r3, [pc, #472]	; (8001534 <HAL_UART_RxCpltCallback+0x8cc>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b31      	cmp	r3, #49	; 0x31
 8001360:	d119      	bne.n	8001396 <HAL_UART_RxCpltCallback+0x72e>
						sel = '\0';
 8001362:	4b74      	ldr	r3, [pc, #464]	; (8001534 <HAL_UART_RxCpltCallback+0x8cc>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
						Motor1.Pwm->Step = atoi(uart3.rxbuf);
 8001368:	4862      	ldr	r0, [pc, #392]	; (80014f4 <HAL_UART_RxCpltCallback+0x88c>)
 800136a:	f004 fddb 	bl	8005f24 <atoi>
 800136e:	4602      	mov	r2, r0
 8001370:	4b64      	ldr	r3, [pc, #400]	; (8001504 <HAL_UART_RxCpltCallback+0x89c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	60da      	str	r2, [r3, #12]
						analogWrite_ch1(Motor1.Pwm->Step);
 8001376:	4b63      	ldr	r3, [pc, #396]	; (8001504 <HAL_UART_RxCpltCallback+0x89c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	4618      	mov	r0, r3
 800137e:	f000 fe09 	bl	8001f94 <analogWrite_ch1>
						printf("%s PWM STEP : %d\n",Motor1.Name, Motor1.Pwm->Step);
 8001382:	4b60      	ldr	r3, [pc, #384]	; (8001504 <HAL_UART_RxCpltCallback+0x89c>)
 8001384:	6899      	ldr	r1, [r3, #8]
 8001386:	4b5f      	ldr	r3, [pc, #380]	; (8001504 <HAL_UART_RxCpltCallback+0x89c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	461a      	mov	r2, r3
 800138e:	486a      	ldr	r0, [pc, #424]	; (8001538 <HAL_UART_RxCpltCallback+0x8d0>)
 8001390:	f004 fdfe 	bl	8005f90 <iprintf>
 8001394:	e06c      	b.n	8001470 <HAL_UART_RxCpltCallback+0x808>
					else if ( sel == '2')
 8001396:	4b67      	ldr	r3, [pc, #412]	; (8001534 <HAL_UART_RxCpltCallback+0x8cc>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b32      	cmp	r3, #50	; 0x32
 800139c:	d119      	bne.n	80013d2 <HAL_UART_RxCpltCallback+0x76a>
						sel = '\0';
 800139e:	4b65      	ldr	r3, [pc, #404]	; (8001534 <HAL_UART_RxCpltCallback+0x8cc>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
						Motor2.Pwm->Step = atoi(uart3.rxbuf);
 80013a4:	4853      	ldr	r0, [pc, #332]	; (80014f4 <HAL_UART_RxCpltCallback+0x88c>)
 80013a6:	f004 fdbd 	bl	8005f24 <atoi>
 80013aa:	4602      	mov	r2, r0
 80013ac:	4b56      	ldr	r3, [pc, #344]	; (8001508 <HAL_UART_RxCpltCallback+0x8a0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	60da      	str	r2, [r3, #12]
						analogWrite_ch2(Motor2.Pwm->Step);
 80013b2:	4b55      	ldr	r3, [pc, #340]	; (8001508 <HAL_UART_RxCpltCallback+0x8a0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 fe21 	bl	8002000 <analogWrite_ch2>
						printf("%s PWM STEP : %d\n",Motor2.Name, Motor2.Pwm->Step);
 80013be:	4b52      	ldr	r3, [pc, #328]	; (8001508 <HAL_UART_RxCpltCallback+0x8a0>)
 80013c0:	6899      	ldr	r1, [r3, #8]
 80013c2:	4b51      	ldr	r3, [pc, #324]	; (8001508 <HAL_UART_RxCpltCallback+0x8a0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	461a      	mov	r2, r3
 80013ca:	485b      	ldr	r0, [pc, #364]	; (8001538 <HAL_UART_RxCpltCallback+0x8d0>)
 80013cc:	f004 fde0 	bl	8005f90 <iprintf>
 80013d0:	e04e      	b.n	8001470 <HAL_UART_RxCpltCallback+0x808>
					else if ( sel == '3')
 80013d2:	4b58      	ldr	r3, [pc, #352]	; (8001534 <HAL_UART_RxCpltCallback+0x8cc>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b33      	cmp	r3, #51	; 0x33
 80013d8:	d119      	bne.n	800140e <HAL_UART_RxCpltCallback+0x7a6>
						sel = '\0';
 80013da:	4b56      	ldr	r3, [pc, #344]	; (8001534 <HAL_UART_RxCpltCallback+0x8cc>)
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
						Motor3.Pwm->Step = atoi(uart3.rxbuf);
 80013e0:	4844      	ldr	r0, [pc, #272]	; (80014f4 <HAL_UART_RxCpltCallback+0x88c>)
 80013e2:	f004 fd9f 	bl	8005f24 <atoi>
 80013e6:	4602      	mov	r2, r0
 80013e8:	4b48      	ldr	r3, [pc, #288]	; (800150c <HAL_UART_RxCpltCallback+0x8a4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	60da      	str	r2, [r3, #12]
						analogWrite_ch3(Motor3.Pwm->Step);
 80013ee:	4b47      	ldr	r3, [pc, #284]	; (800150c <HAL_UART_RxCpltCallback+0x8a4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 fe39 	bl	800206c <analogWrite_ch3>
						printf("%s PWM STEP : %d\n",Motor3.Name, Motor3.Pwm->Step);
 80013fa:	4b44      	ldr	r3, [pc, #272]	; (800150c <HAL_UART_RxCpltCallback+0x8a4>)
 80013fc:	6899      	ldr	r1, [r3, #8]
 80013fe:	4b43      	ldr	r3, [pc, #268]	; (800150c <HAL_UART_RxCpltCallback+0x8a4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	461a      	mov	r2, r3
 8001406:	484c      	ldr	r0, [pc, #304]	; (8001538 <HAL_UART_RxCpltCallback+0x8d0>)
 8001408:	f004 fdc2 	bl	8005f90 <iprintf>
 800140c:	e030      	b.n	8001470 <HAL_UART_RxCpltCallback+0x808>
					else if ( sel == '4')
 800140e:	4b49      	ldr	r3, [pc, #292]	; (8001534 <HAL_UART_RxCpltCallback+0x8cc>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b34      	cmp	r3, #52	; 0x34
 8001414:	d119      	bne.n	800144a <HAL_UART_RxCpltCallback+0x7e2>
						sel = '\0';
 8001416:	4b47      	ldr	r3, [pc, #284]	; (8001534 <HAL_UART_RxCpltCallback+0x8cc>)
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
						Motor4.Pwm->Step = atoi(uart3.rxbuf);
 800141c:	4835      	ldr	r0, [pc, #212]	; (80014f4 <HAL_UART_RxCpltCallback+0x88c>)
 800141e:	f004 fd81 	bl	8005f24 <atoi>
 8001422:	4602      	mov	r2, r0
 8001424:	4b3a      	ldr	r3, [pc, #232]	; (8001510 <HAL_UART_RxCpltCallback+0x8a8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	60da      	str	r2, [r3, #12]
						analogWrite_ch4(Motor4.Pwm->Step);
 800142a:	4b39      	ldr	r3, [pc, #228]	; (8001510 <HAL_UART_RxCpltCallback+0x8a8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	4618      	mov	r0, r3
 8001432:	f000 fe51 	bl	80020d8 <analogWrite_ch4>
						printf("%s PWM STEP : %d\n",Motor4.Name, Motor4.Pwm->Step);
 8001436:	4b36      	ldr	r3, [pc, #216]	; (8001510 <HAL_UART_RxCpltCallback+0x8a8>)
 8001438:	6899      	ldr	r1, [r3, #8]
 800143a:	4b35      	ldr	r3, [pc, #212]	; (8001510 <HAL_UART_RxCpltCallback+0x8a8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	461a      	mov	r2, r3
 8001442:	483d      	ldr	r0, [pc, #244]	; (8001538 <HAL_UART_RxCpltCallback+0x8d0>)
 8001444:	f004 fda4 	bl	8005f90 <iprintf>
 8001448:	e012      	b.n	8001470 <HAL_UART_RxCpltCallback+0x808>
					else if ( sel == '5')
 800144a:	4b3a      	ldr	r3, [pc, #232]	; (8001534 <HAL_UART_RxCpltCallback+0x8cc>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b35      	cmp	r3, #53	; 0x35
 8001450:	d10e      	bne.n	8001470 <HAL_UART_RxCpltCallback+0x808>
						sel = '\0';
 8001452:	4b38      	ldr	r3, [pc, #224]	; (8001534 <HAL_UART_RxCpltCallback+0x8cc>)
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
						uint32_t Pwm_Step = atoi(uart3.rxbuf);
 8001458:	4826      	ldr	r0, [pc, #152]	; (80014f4 <HAL_UART_RxCpltCallback+0x88c>)
 800145a:	f004 fd63 	bl	8005f24 <atoi>
 800145e:	4603      	mov	r3, r0
 8001460:	60fb      	str	r3, [r7, #12]
						analogWrite(Pwm_Step);
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f000 fd44 	bl	8001ef0 <analogWrite>
						printf("All Motor PWM STEP : %d\n",Pwm_Step) ;
 8001468:	68f9      	ldr	r1, [r7, #12]
 800146a:	4834      	ldr	r0, [pc, #208]	; (800153c <HAL_UART_RxCpltCallback+0x8d4>)
 800146c:	f004 fd90 	bl	8005f90 <iprintf>
					scroll_flag = OFF;
 8001470:	4b2e      	ldr	r3, [pc, #184]	; (800152c <HAL_UART_RxCpltCallback+0x8c4>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
				bzero(uart3.rxbuf,sizeof(uart1.rxbuf));
 8001476:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <HAL_UART_RxCpltCallback+0x88c>)
 8001478:	4618      	mov	r0, r3
 800147a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800147e:	461a      	mov	r2, r3
 8001480:	2100      	movs	r1, #0
 8001482:	f004 fd7d 	bl	8005f80 <memset>
				uart3.rxcnt = 0;
 8001486:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <HAL_UART_RxCpltCallback+0x8d8>)
 8001488:	2200      	movs	r2, #0
 800148a:	711a      	strb	r2, [r3, #4]
}
 800148c:	e085      	b.n	800159a <HAL_UART_RxCpltCallback+0x932>
			else if ( uart3.rxdata == '\b')
 800148e:	4b2c      	ldr	r3, [pc, #176]	; (8001540 <HAL_UART_RxCpltCallback+0x8d8>)
 8001490:	799b      	ldrb	r3, [r3, #6]
 8001492:	2b08      	cmp	r3, #8
 8001494:	d15c      	bne.n	8001550 <HAL_UART_RxCpltCallback+0x8e8>
				uart3.rxdata = '\0';
 8001496:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <HAL_UART_RxCpltCallback+0x8d8>)
 8001498:	2200      	movs	r2, #0
 800149a:	719a      	strb	r2, [r3, #6]
				HAL_UART_Transmit(&huart1, (uint8_t *)" ", 1, 0xFFFF);
 800149c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014a0:	2201      	movs	r2, #1
 80014a2:	4928      	ldr	r1, [pc, #160]	; (8001544 <HAL_UART_RxCpltCallback+0x8dc>)
 80014a4:	4828      	ldr	r0, [pc, #160]	; (8001548 <HAL_UART_RxCpltCallback+0x8e0>)
 80014a6:	f004 f852 	bl	800554e <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t *)"\b", 1, 0xFFFF);
 80014aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014ae:	2201      	movs	r2, #1
 80014b0:	4926      	ldr	r1, [pc, #152]	; (800154c <HAL_UART_RxCpltCallback+0x8e4>)
 80014b2:	4825      	ldr	r0, [pc, #148]	; (8001548 <HAL_UART_RxCpltCallback+0x8e0>)
 80014b4:	f004 f84b 	bl	800554e <HAL_UART_Transmit>
				uart3.rxcnt--;
 80014b8:	4b21      	ldr	r3, [pc, #132]	; (8001540 <HAL_UART_RxCpltCallback+0x8d8>)
 80014ba:	791b      	ldrb	r3, [r3, #4]
 80014bc:	3b01      	subs	r3, #1
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <HAL_UART_RxCpltCallback+0x8d8>)
 80014c2:	711a      	strb	r2, [r3, #4]
				uart3.rxbuf[uart3.rxcnt] = '\0';
 80014c4:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <HAL_UART_RxCpltCallback+0x8d8>)
 80014c6:	791b      	ldrb	r3, [r3, #4]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <HAL_UART_RxCpltCallback+0x8d8>)
 80014cc:	4413      	add	r3, r2
 80014ce:	2200      	movs	r2, #0
 80014d0:	71da      	strb	r2, [r3, #7]
				uart3.rxcnt--;
 80014d2:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <HAL_UART_RxCpltCallback+0x8d8>)
 80014d4:	791b      	ldrb	r3, [r3, #4]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <HAL_UART_RxCpltCallback+0x8d8>)
 80014dc:	711a      	strb	r2, [r3, #4]
				uart3.rxbuf[uart3.rxcnt] = '\0';
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <HAL_UART_RxCpltCallback+0x8d8>)
 80014e0:	791b      	ldrb	r3, [r3, #4]
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b16      	ldr	r3, [pc, #88]	; (8001540 <HAL_UART_RxCpltCallback+0x8d8>)
 80014e6:	4413      	add	r3, r2
 80014e8:	2200      	movs	r2, #0
 80014ea:	71da      	strb	r2, [r3, #7]
}
 80014ec:	e055      	b.n	800159a <HAL_UART_RxCpltCallback+0x932>
 80014ee:	bf00      	nop
 80014f0:	08007304 	.word	0x08007304
 80014f4:	2000096f 	.word	0x2000096f
 80014f8:	08007314 	.word	0x08007314
 80014fc:	200011c8 	.word	0x200011c8
 8001500:	20000090 	.word	0x20000090
 8001504:	20000040 	.word	0x20000040
 8001508:	20000054 	.word	0x20000054
 800150c:	20000068 	.word	0x20000068
 8001510:	2000007c 	.word	0x2000007c
 8001514:	08007328 	.word	0x08007328
 8001518:	40010c00 	.word	0x40010c00
 800151c:	0800732c 	.word	0x0800732c
 8001520:	08007330 	.word	0x08007330
 8001524:	08007334 	.word	0x08007334
 8001528:	40010800 	.word	0x40010800
 800152c:	20000092 	.word	0x20000092
 8001530:	08007338 	.word	0x08007338
 8001534:	20001178 	.word	0x20001178
 8001538:	08007340 	.word	0x08007340
 800153c:	08007354 	.word	0x08007354
 8001540:	20000968 	.word	0x20000968
 8001544:	0800727c 	.word	0x0800727c
 8001548:	20001210 	.word	0x20001210
 800154c:	08007280 	.word	0x08007280
			else if( uart3.rxdata == ':') //
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <HAL_UART_RxCpltCallback+0x93c>)
 8001552:	799b      	ldrb	r3, [r3, #6]
 8001554:	2b3a      	cmp	r3, #58	; 0x3a
 8001556:	d120      	bne.n	800159a <HAL_UART_RxCpltCallback+0x932>
				uart3.rxcnt--;
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_UART_RxCpltCallback+0x93c>)
 800155a:	791b      	ldrb	r3, [r3, #4]
 800155c:	3b01      	subs	r3, #1
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <HAL_UART_RxCpltCallback+0x93c>)
 8001562:	711a      	strb	r2, [r3, #4]
				uart3.rxbuf[uart3.rxcnt] = '\0';
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_UART_RxCpltCallback+0x93c>)
 8001566:	791b      	ldrb	r3, [r3, #4]
 8001568:	461a      	mov	r2, r3
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <HAL_UART_RxCpltCallback+0x93c>)
 800156c:	4413      	add	r3, r2
 800156e:	2200      	movs	r2, #0
 8001570:	71da      	strb	r2, [r3, #7]
				uart3.rxcnt--;
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <HAL_UART_RxCpltCallback+0x93c>)
 8001574:	791b      	ldrb	r3, [r3, #4]
 8001576:	3b01      	subs	r3, #1
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_UART_RxCpltCallback+0x93c>)
 800157c:	711a      	strb	r2, [r3, #4]
				sel = uart3.rxbuf[uart3.rxcnt];
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <HAL_UART_RxCpltCallback+0x93c>)
 8001580:	791b      	ldrb	r3, [r3, #4]
 8001582:	461a      	mov	r2, r3
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <HAL_UART_RxCpltCallback+0x93c>)
 8001586:	4413      	add	r3, r2
 8001588:	79da      	ldrb	r2, [r3, #7]
 800158a:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <HAL_UART_RxCpltCallback+0x940>)
 800158c:	701a      	strb	r2, [r3, #0]
				uart3.rxcnt = 0;
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_UART_RxCpltCallback+0x93c>)
 8001590:	2200      	movs	r2, #0
 8001592:	711a      	strb	r2, [r3, #4]
				scroll_flag = ON;
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_UART_RxCpltCallback+0x944>)
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
}
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000968 	.word	0x20000968
 80015a8:	20001178 	.word	0x20001178
 80015ac:	20000092 	.word	0x20000092

080015b0 <HAL_TIM_OC_DelayElapsedCallback>:



void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]




	if( htim->Instance == TIM4  && htim ->Channel  ==  HAL_TIM_ACTIVE_CHANNEL_1  )
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a67      	ldr	r2, [pc, #412]	; (800175c <HAL_TIM_OC_DelayElapsedCallback+0x1ac>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	f040 80c7 	bne.w	8001752 <HAL_TIM_OC_DelayElapsedCallback+0x1a2>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	7f1b      	ldrb	r3, [r3, #28]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	f040 80c2 	bne.w	8001752 <HAL_TIM_OC_DelayElapsedCallback+0x1a2>
	{


		// adc���� �������� pwm ��Ƽ�� �����Ѵ�.

		HAL_ADC_Start(&hadc1);
 80015ce:	4864      	ldr	r0, [pc, #400]	; (8001760 <HAL_TIM_OC_DelayElapsedCallback+0x1b0>)
 80015d0:	f000 fff0 	bl	80025b4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 0xffff);
 80015d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015d8:	4861      	ldr	r0, [pc, #388]	; (8001760 <HAL_TIM_OC_DelayElapsedCallback+0x1b0>)
 80015da:	f001 f8c5 	bl	8002768 <HAL_ADC_PollForConversion>

		adc_resolution  = HAL_ADC_GetValue(&hadc1);
 80015de:	4860      	ldr	r0, [pc, #384]	; (8001760 <HAL_TIM_OC_DelayElapsedCallback+0x1b0>)
 80015e0:	f001 f9c8 	bl	8002974 <HAL_ADC_GetValue>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4a5f      	ldr	r2, [pc, #380]	; (8001764 <HAL_TIM_OC_DelayElapsedCallback+0x1b4>)
 80015e8:	6013      	str	r3, [r2, #0]

		pwm_resolution =   floor( adc_resolution *  MAX_PWM_RESOLUTION/MAX_ADC_RESOLUTION ); // 0 ~ MAX_PWM_RESOLUTION�� ��Ƽ�� ����.
 80015ea:	4b5e      	ldr	r3, [pc, #376]	; (8001764 <HAL_TIM_OC_DelayElapsedCallback+0x1b4>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b5b      	ldr	r3, [pc, #364]	; (8001768 <HAL_TIM_OC_DelayElapsedCallback+0x1b8>)
 80015fa:	fba3 1302 	umull	r1, r3, r3, r2
 80015fe:	1ad2      	subs	r2, r2, r3
 8001600:	0852      	lsrs	r2, r2, #1
 8001602:	4413      	add	r3, r2
 8001604:	0adb      	lsrs	r3, r3, #11
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe feec 	bl	80003e4 <__aeabi_ui2d>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	f7fe ff60 	bl	80004d8 <__aeabi_d2uiz>
 8001618:	4603      	mov	r3, r0
 800161a:	4a54      	ldr	r2, [pc, #336]	; (800176c <HAL_TIM_OC_DelayElapsedCallback+0x1bc>)
 800161c:	6013      	str	r3, [r2, #0]

		analogWrite(pwm_resolution);
 800161e:	4b53      	ldr	r3, [pc, #332]	; (800176c <HAL_TIM_OC_DelayElapsedCallback+0x1bc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f000 fc64 	bl	8001ef0 <analogWrite>

		printf("ADC Resolution : %d\n",adc_resolution);
 8001628:	4b4e      	ldr	r3, [pc, #312]	; (8001764 <HAL_TIM_OC_DelayElapsedCallback+0x1b4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4619      	mov	r1, r3
 800162e:	4850      	ldr	r0, [pc, #320]	; (8001770 <HAL_TIM_OC_DelayElapsedCallback+0x1c0>)
 8001630:	f004 fcae 	bl	8005f90 <iprintf>
		printf("PWM Resolution : %d\n",pwm_resolution);
 8001634:	4b4d      	ldr	r3, [pc, #308]	; (800176c <HAL_TIM_OC_DelayElapsedCallback+0x1bc>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	484e      	ldr	r0, [pc, #312]	; (8001774 <HAL_TIM_OC_DelayElapsedCallback+0x1c4>)
 800163c:	f004 fca8 	bl	8005f90 <iprintf>

		HAL_ADC_Stop(&hadc1);
 8001640:	4847      	ldr	r0, [pc, #284]	; (8001760 <HAL_TIM_OC_DelayElapsedCallback+0x1b0>)
 8001642:	f001 f865 	bl	8002710 <HAL_ADC_Stop>




		Check_Motor(&Motor1);
 8001646:	484c      	ldr	r0, [pc, #304]	; (8001778 <HAL_TIM_OC_DelayElapsedCallback+0x1c8>)
 8001648:	f7ff f9a4 	bl	8000994 <Check_Motor>
		Check_Motor(&Motor2);
 800164c:	484b      	ldr	r0, [pc, #300]	; (800177c <HAL_TIM_OC_DelayElapsedCallback+0x1cc>)
 800164e:	f7ff f9a1 	bl	8000994 <Check_Motor>
		Check_Motor(&Motor3);
 8001652:	484b      	ldr	r0, [pc, #300]	; (8001780 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 8001654:	f7ff f99e 	bl	8000994 <Check_Motor>
		Check_Motor(&Motor4);
 8001658:	484a      	ldr	r0, [pc, #296]	; (8001784 <HAL_TIM_OC_DelayElapsedCallback+0x1d4>)
 800165a:	f7ff f99b 	bl	8000994 <Check_Motor>




		if( Check_Switch(SW1_PIN))
 800165e:	2080      	movs	r0, #128	; 0x80
 8001660:	f7ff f8de 	bl	8000820 <Check_Switch>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d014      	beq.n	8001694 <HAL_TIM_OC_DelayElapsedCallback+0xe4>
		{


			// printf("SW1 : puhsed\n");
			HAL_GPIO_TogglePin(LD1_GPIO_PORT,LD1_PIN);
 800166a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800166e:	4846      	ldr	r0, [pc, #280]	; (8001788 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 8001670:	f001 ff3d 	bl	80034ee <HAL_GPIO_TogglePin>
			if(Check_Motor(&Motor1) == HOLD )
 8001674:	4840      	ldr	r0, [pc, #256]	; (8001778 <HAL_TIM_OC_DelayElapsedCallback+0x1c8>)
 8001676:	f7ff f98d 	bl	8000994 <Check_Motor>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d104      	bne.n	800168a <HAL_TIM_OC_DelayElapsedCallback+0xda>
				Set_Motor(&Motor1,FORWARD);
 8001680:	2101      	movs	r1, #1
 8001682:	483d      	ldr	r0, [pc, #244]	; (8001778 <HAL_TIM_OC_DelayElapsedCallback+0x1c8>)
 8001684:	f7ff f9c4 	bl	8000a10 <Set_Motor>
 8001688:	e007      	b.n	800169a <HAL_TIM_OC_DelayElapsedCallback+0xea>



			else Set_Motor(&Motor1,HOLD);
 800168a:	2100      	movs	r1, #0
 800168c:	483a      	ldr	r0, [pc, #232]	; (8001778 <HAL_TIM_OC_DelayElapsedCallback+0x1c8>)
 800168e:	f7ff f9bf 	bl	8000a10 <Set_Motor>
 8001692:	e002      	b.n	800169a <HAL_TIM_OC_DelayElapsedCallback+0xea>


		}
		else if ( !Check_Switch(SW1_PIN)) {} // printf("SW1 : Pulled\n");
 8001694:	2080      	movs	r0, #128	; 0x80
 8001696:	f7ff f8c3 	bl	8000820 <Check_Switch>





		if( Check_Switch(SW2_PIN))
 800169a:	2001      	movs	r0, #1
 800169c:	f7ff f8c0 	bl	8000820 <Check_Switch>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d014      	beq.n	80016d0 <HAL_TIM_OC_DelayElapsedCallback+0x120>
		{


			//printf("SW2 : puhsed\n");
			HAL_GPIO_TogglePin(LD2_GPIO_PORT,LD2_PIN);
 80016a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016aa:	4837      	ldr	r0, [pc, #220]	; (8001788 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80016ac:	f001 ff1f 	bl	80034ee <HAL_GPIO_TogglePin>


			if(Check_Motor(&Motor2) == HOLD )
 80016b0:	4832      	ldr	r0, [pc, #200]	; (800177c <HAL_TIM_OC_DelayElapsedCallback+0x1cc>)
 80016b2:	f7ff f96f 	bl	8000994 <Check_Motor>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d104      	bne.n	80016c6 <HAL_TIM_OC_DelayElapsedCallback+0x116>
				Set_Motor(&Motor2,FORWARD);
 80016bc:	2101      	movs	r1, #1
 80016be:	482f      	ldr	r0, [pc, #188]	; (800177c <HAL_TIM_OC_DelayElapsedCallback+0x1cc>)
 80016c0:	f7ff f9a6 	bl	8000a10 <Set_Motor>
 80016c4:	e007      	b.n	80016d6 <HAL_TIM_OC_DelayElapsedCallback+0x126>



			else Set_Motor(&Motor2,HOLD);
 80016c6:	2100      	movs	r1, #0
 80016c8:	482c      	ldr	r0, [pc, #176]	; (800177c <HAL_TIM_OC_DelayElapsedCallback+0x1cc>)
 80016ca:	f7ff f9a1 	bl	8000a10 <Set_Motor>
 80016ce:	e002      	b.n	80016d6 <HAL_TIM_OC_DelayElapsedCallback+0x126>


		}
		else if ( !Check_Switch(SW2_PIN)  ) {} //printf("SW2 : Pulled\n");
 80016d0:	2001      	movs	r0, #1
 80016d2:	f7ff f8a5 	bl	8000820 <Check_Switch>

		if( Check_Switch(SW3_PIN))
 80016d6:	2002      	movs	r0, #2
 80016d8:	f7ff f8a2 	bl	8000820 <Check_Switch>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d014      	beq.n	800170c <HAL_TIM_OC_DelayElapsedCallback+0x15c>
		{


			//	printf("SW3 : puhsed\n");
			HAL_GPIO_TogglePin(LD3_GPIO_PORT,LD3_PIN);
 80016e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e6:	4828      	ldr	r0, [pc, #160]	; (8001788 <HAL_TIM_OC_DelayElapsedCallback+0x1d8>)
 80016e8:	f001 ff01 	bl	80034ee <HAL_GPIO_TogglePin>


			if(Check_Motor(&Motor3) == HOLD )
 80016ec:	4824      	ldr	r0, [pc, #144]	; (8001780 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 80016ee:	f7ff f951 	bl	8000994 <Check_Motor>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d104      	bne.n	8001702 <HAL_TIM_OC_DelayElapsedCallback+0x152>
				Set_Motor(&Motor3,FORWARD);
 80016f8:	2101      	movs	r1, #1
 80016fa:	4821      	ldr	r0, [pc, #132]	; (8001780 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 80016fc:	f7ff f988 	bl	8000a10 <Set_Motor>
 8001700:	e007      	b.n	8001712 <HAL_TIM_OC_DelayElapsedCallback+0x162>



			else Set_Motor(&Motor3,HOLD);
 8001702:	2100      	movs	r1, #0
 8001704:	481e      	ldr	r0, [pc, #120]	; (8001780 <HAL_TIM_OC_DelayElapsedCallback+0x1d0>)
 8001706:	f7ff f983 	bl	8000a10 <Set_Motor>
 800170a:	e002      	b.n	8001712 <HAL_TIM_OC_DelayElapsedCallback+0x162>


		}
		else if ( !Check_Switch(SW3_PIN)) {}//printf("SW3 : Pulled\n");
 800170c:	2002      	movs	r0, #2
 800170e:	f7ff f887 	bl	8000820 <Check_Switch>

		if( Check_Switch(SW4_PIN))
 8001712:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001716:	f7ff f883 	bl	8000820 <Check_Switch>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d014      	beq.n	800174a <HAL_TIM_OC_DelayElapsedCallback+0x19a>
		{


			//	printf("SW4 : puhsed\n");
			HAL_GPIO_TogglePin(LD4_GPIO_PORT,LD4_PIN);
 8001720:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001724:	4819      	ldr	r0, [pc, #100]	; (800178c <HAL_TIM_OC_DelayElapsedCallback+0x1dc>)
 8001726:	f001 fee2 	bl	80034ee <HAL_GPIO_TogglePin>


			if(Check_Motor(&Motor4) == HOLD )
 800172a:	4816      	ldr	r0, [pc, #88]	; (8001784 <HAL_TIM_OC_DelayElapsedCallback+0x1d4>)
 800172c:	f7ff f932 	bl	8000994 <Check_Motor>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d104      	bne.n	8001740 <HAL_TIM_OC_DelayElapsedCallback+0x190>
				Set_Motor(&Motor4,FORWARD);
 8001736:	2101      	movs	r1, #1
 8001738:	4812      	ldr	r0, [pc, #72]	; (8001784 <HAL_TIM_OC_DelayElapsedCallback+0x1d4>)
 800173a:	f7ff f969 	bl	8000a10 <Set_Motor>

	}



}
 800173e:	e008      	b.n	8001752 <HAL_TIM_OC_DelayElapsedCallback+0x1a2>
			else Set_Motor(&Motor4,HOLD);
 8001740:	2100      	movs	r1, #0
 8001742:	4810      	ldr	r0, [pc, #64]	; (8001784 <HAL_TIM_OC_DelayElapsedCallback+0x1d4>)
 8001744:	f7ff f964 	bl	8000a10 <Set_Motor>
}
 8001748:	e003      	b.n	8001752 <HAL_TIM_OC_DelayElapsedCallback+0x1a2>
		else if ( !Check_Switch(SW4_PIN) ){} // printf("SW4 : Pulled\n");
 800174a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800174e:	f7ff f867 	bl	8000820 <Check_Switch>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40000800 	.word	0x40000800
 8001760:	20000120 	.word	0x20000120
 8001764:	20001170 	.word	0x20001170
 8001768:	00100101 	.word	0x00100101
 800176c:	20001174 	.word	0x20001174
 8001770:	08007370 	.word	0x08007370
 8001774:	08007388 	.word	0x08007388
 8001778:	20000040 	.word	0x20000040
 800177c:	20000054 	.word	0x20000054
 8001780:	20000068 	.word	0x20000068
 8001784:	2000007c 	.word	0x2000007c
 8001788:	40010c00 	.word	0x40010c00
 800178c:	40010800 	.word	0x40010800

08001790 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	80fb      	strh	r3, [r7, #6]
		}

	}
	 */

}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017aa:	4b19      	ldr	r3, [pc, #100]	; (8001810 <HAL_MspInit+0x6c>)
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	4a18      	ldr	r2, [pc, #96]	; (8001810 <HAL_MspInit+0x6c>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6193      	str	r3, [r2, #24]
 80017b6:	4b16      	ldr	r3, [pc, #88]	; (8001810 <HAL_MspInit+0x6c>)
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <HAL_MspInit+0x6c>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	4a12      	ldr	r2, [pc, #72]	; (8001810 <HAL_MspInit+0x6c>)
 80017c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017cc:	61d3      	str	r3, [r2, #28]
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <HAL_MspInit+0x6c>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	2005      	movs	r0, #5
 80017e0:	f001 fbeb 	bl	8002fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80017e4:	2005      	movs	r0, #5
 80017e6:	f001 fc04 	bl	8002ff2 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017ea:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_MspInit+0x70>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	4a04      	ldr	r2, [pc, #16]	; (8001814 <HAL_MspInit+0x70>)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000
 8001814:	40010000 	.word	0x40010000

08001818 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 0310 	add.w	r3, r7, #16
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a14      	ldr	r2, [pc, #80]	; (8001884 <HAL_ADC_MspInit+0x6c>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d121      	bne.n	800187c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <HAL_ADC_MspInit+0x70>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a12      	ldr	r2, [pc, #72]	; (8001888 <HAL_ADC_MspInit+0x70>)
 800183e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b10      	ldr	r3, [pc, #64]	; (8001888 <HAL_ADC_MspInit+0x70>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001850:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <HAL_ADC_MspInit+0x70>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	4a0c      	ldr	r2, [pc, #48]	; (8001888 <HAL_ADC_MspInit+0x70>)
 8001856:	f043 0304 	orr.w	r3, r3, #4
 800185a:	6193      	str	r3, [r2, #24]
 800185c:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <HAL_ADC_MspInit+0x70>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001868:	2301      	movs	r3, #1
 800186a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800186c:	2303      	movs	r3, #3
 800186e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	4619      	mov	r1, r3
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <HAL_ADC_MspInit+0x74>)
 8001878:	f001 fc86 	bl	8003188 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800187c:	bf00      	nop
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40012400 	.word	0x40012400
 8001888:	40021000 	.word	0x40021000
 800188c:	40010800 	.word	0x40010800

08001890 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018a0:	d10b      	bne.n	80018ba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <HAL_TIM_Base_MspInit+0x34>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <HAL_TIM_Base_MspInit+0x34>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	61d3      	str	r3, [r2, #28]
 80018ae:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <HAL_TIM_Base_MspInit+0x34>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018ba:	bf00      	nop
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr
 80018c4:	40021000 	.word	0x40021000

080018c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 0310 	add.w	r3, r7, #16
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a20      	ldr	r2, [pc, #128]	; (8001964 <HAL_UART_MspInit+0x9c>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d139      	bne.n	800195c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018e8:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <HAL_UART_MspInit+0xa0>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	4a1e      	ldr	r2, [pc, #120]	; (8001968 <HAL_UART_MspInit+0xa0>)
 80018ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f2:	6193      	str	r3, [r2, #24]
 80018f4:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <HAL_UART_MspInit+0xa0>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <HAL_UART_MspInit+0xa0>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	4a18      	ldr	r2, [pc, #96]	; (8001968 <HAL_UART_MspInit+0xa0>)
 8001906:	f043 0304 	orr.w	r3, r3, #4
 800190a:	6193      	str	r3, [r2, #24]
 800190c:	4b16      	ldr	r3, [pc, #88]	; (8001968 <HAL_UART_MspInit+0xa0>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001918:	f44f 7300 	mov.w	r3, #512	; 0x200
 800191c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001922:	2303      	movs	r3, #3
 8001924:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001926:	f107 0310 	add.w	r3, r7, #16
 800192a:	4619      	mov	r1, r3
 800192c:	480f      	ldr	r0, [pc, #60]	; (800196c <HAL_UART_MspInit+0xa4>)
 800192e:	f001 fc2b 	bl	8003188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001936:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	4619      	mov	r1, r3
 8001946:	4809      	ldr	r0, [pc, #36]	; (800196c <HAL_UART_MspInit+0xa4>)
 8001948:	f001 fc1e 	bl	8003188 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800194c:	2200      	movs	r2, #0
 800194e:	2100      	movs	r1, #0
 8001950:	2025      	movs	r0, #37	; 0x25
 8001952:	f001 fb32 	bl	8002fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001956:	2025      	movs	r0, #37	; 0x25
 8001958:	f001 fb4b 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800195c:	bf00      	nop
 800195e:	3720      	adds	r7, #32
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40013800 	.word	0x40013800
 8001968:	40021000 	.word	0x40021000
 800196c:	40010800 	.word	0x40010800

08001970 <NMI_Handler>:
/* USER CODE BEGIN 1 */



void NMI_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <HardFault_Handler>:


void HardFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0

	while (1)
 8001980:	e7fe      	b.n	8001980 <HardFault_Handler+0x4>

08001982 <MemManage_Handler>:
	{
	}
}

void MemManage_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

	while (1)
 8001986:	e7fe      	b.n	8001986 <MemManage_Handler+0x4>

08001988 <BusFault_Handler>:
	}
}


void BusFault_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

	while (1)
 800198c:	e7fe      	b.n	800198c <BusFault_Handler+0x4>

0800198e <UsageFault_Handler>:
	}
}


void UsageFault_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0

	while (1)
 8001992:	e7fe      	b.n	8001992 <UsageFault_Handler+0x4>

08001994 <SVC_Handler>:
	}
}


void SVC_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <DebugMon_Handler>:


void DebugMon_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0

}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <PendSV_Handler>:


void PendSV_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0

}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <SysTick_Handler>:


void SysTick_Handler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0

	HAL_IncTick();
 80019bc:	f000 fd06 	bl	80023cc <HAL_IncTick>

}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <RCC_IRQHandler>:

void RCC_IRQHandler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0


}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <TIM2_IRQHandler>:




void TIM2_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <TIM2_IRQHandler+0x10>)
 80019d6:	f002 ff53 	bl	8004880 <HAL_TIM_IRQHandler>

}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20001180 	.word	0x20001180

080019e4 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0

	HAL_TIM_IRQHandler(&htim4);
 80019e8:	4802      	ldr	r0, [pc, #8]	; (80019f4 <TIM4_IRQHandler+0x10>)
 80019ea:	f002 ff49 	bl	8004880 <HAL_TIM_IRQHandler>

}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200011c8 	.word	0x200011c8

080019f8 <EXTI15_10_IRQHandler>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */

void EXTI15_10_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0


	HAL_GPIO_EXTI_IRQHandler(SW4_PIN);
 80019fc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a00:	f001 fd8e 	bl	8003520 <HAL_GPIO_EXTI_IRQHandler>

}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0


	HAL_GPIO_EXTI_IRQHandler(SW1_PIN);
 8001a0c:	2080      	movs	r0, #128	; 0x80
 8001a0e:	f001 fd87 	bl	8003520 <HAL_GPIO_EXTI_IRQHandler>

}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	af00      	add	r7, sp, #0


	HAL_GPIO_EXTI_IRQHandler(SW2_PIN);
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	f001 fd80 	bl	8003520 <HAL_GPIO_EXTI_IRQHandler>

}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0


	HAL_GPIO_EXTI_IRQHandler(SW3_PIN);
 8001a28:	2002      	movs	r0, #2
 8001a2a:	f001 fd79 	bl	8003520 <HAL_GPIO_EXTI_IRQHandler>

}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <USART1_IRQHandler>:




void USART1_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart1);
 8001a38:	4802      	ldr	r0, [pc, #8]	; (8001a44 <USART1_IRQHandler+0x10>)
 8001a3a:	f003 fe4b 	bl	80056d4 <HAL_UART_IRQHandler>

}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20001210 	.word	0x20001210

08001a48 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart3);
 8001a4c:	4802      	ldr	r0, [pc, #8]	; (8001a58 <USART3_IRQHandler+0x10>)
 8001a4e:	f003 fe41 	bl	80056d4 <HAL_UART_IRQHandler>

}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20001254 	.word	0x20001254

08001a5c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	e00a      	b.n	8001a84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a6e:	f3af 8000 	nop.w
 8001a72:	4601      	mov	r1, r0
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	60ba      	str	r2, [r7, #8]
 8001a7a:	b2ca      	uxtb	r2, r1
 8001a7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	3301      	adds	r3, #1
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	dbf0      	blt.n	8001a6e <_read+0x12>
	}

return len;
 8001a8c:	687b      	ldr	r3, [r7, #4]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b086      	sub	sp, #24
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	e009      	b.n	8001abc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	60ba      	str	r2, [r7, #8]
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fe9b 	bl	80007ec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dbf1      	blt.n	8001aa8 <_write+0x12>
	}
	return len;
 8001ac4:	687b      	ldr	r3, [r7, #4]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <_close>:

int _close(int file)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001af4:	605a      	str	r2, [r3, #4]
	return 0;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr

08001b02 <_isatty>:

int _isatty(int file)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
	return 1;
 8001b0a:	2301      	movs	r3, #1
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
	return 0;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <SystemClock_Config>:




void SystemClock_Config(void)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b094      	sub	sp, #80	; 0x50
 8001b32:	af00      	add	r7, sp, #0





  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b38:	2228      	movs	r2, #40	; 0x28
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f004 fa1f 	bl	8005f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
 8001b50:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b62:	2301      	movs	r3, #1
 8001b64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b66:	2310      	movs	r3, #16
 8001b68:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001b72:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001b76:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001b78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f001 fce7 	bl	8003550 <HAL_RCC_OscConfig>



  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b82:	230f      	movs	r3, #15
 8001b84:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b86:	2302      	movs	r3, #2
 8001b88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b92:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b94:	2300      	movs	r3, #0
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24




  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2102      	movs	r1, #2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f001 ff58 	bl	8003a54 <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001ba8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bac:	60fb      	str	r3, [r7, #12]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f002 f8e7 	bl	8003d84 <HAL_RCCEx_PeriphCLKConfig>





}
 8001bb6:	bf00      	nop
 8001bb8:	3750      	adds	r7, #80	; 0x50
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc8:	4a14      	ldr	r2, [pc, #80]	; (8001c1c <_sbrk+0x5c>)
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <_sbrk+0x60>)
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <_sbrk+0x64>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d102      	bne.n	8001be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <_sbrk+0x64>)
 8001bde:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <_sbrk+0x68>)
 8001be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <_sbrk+0x64>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d207      	bcs.n	8001c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf0:	f004 f99c 	bl	8005f2c <__errno>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfe:	e009      	b.n	8001c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <_sbrk+0x64>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c06:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <_sbrk+0x64>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <_sbrk+0x64>)
 8001c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c12:	68fb      	ldr	r3, [r7, #12]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20005000 	.word	0x20005000
 8001c20:	00000400 	.word	0x00000400
 8001c24:	2000117c 	.word	0x2000117c
 8001c28:	200012b0 	.word	0x200012b0

08001c2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;


void MX_TIM2_Init(uint16_t PSC, uint16_t ARR, uint16_t CCR)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b098      	sub	sp, #96	; 0x60
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80fb      	strh	r3, [r7, #6]
 8001c42:	460b      	mov	r3, r1
 8001c44:	80bb      	strh	r3, [r7, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	807b      	strh	r3, [r7, #2]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]

	TIM_OC_InitTypeDef sConfigOC = {0};
 8001c58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
 8001c68:	615a      	str	r2, [r3, #20]
 8001c6a:	619a      	str	r2, [r3, #24]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c6c:	f107 0320 	add.w	r3, r7, #32
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7a:	f107 0318 	add.w	r3, r7, #24
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c84:	4b57      	ldr	r3, [pc, #348]	; (8001de4 <MX_TIM2_Init+0x1ac>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	4a56      	ldr	r2, [pc, #344]	; (8001de4 <MX_TIM2_Init+0x1ac>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	6193      	str	r3, [r2, #24]
 8001c90:	4b54      	ldr	r3, [pc, #336]	; (8001de4 <MX_TIM2_Init+0x1ac>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9c:	4b51      	ldr	r3, [pc, #324]	; (8001de4 <MX_TIM2_Init+0x1ac>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	4a50      	ldr	r2, [pc, #320]	; (8001de4 <MX_TIM2_Init+0x1ac>)
 8001ca2:	f043 0308 	orr.w	r3, r3, #8
 8001ca6:	6193      	str	r3, [r2, #24]
 8001ca8:	4b4e      	ldr	r3, [pc, #312]	; (8001de4 <MX_TIM2_Init+0x1ac>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	693b      	ldr	r3, [r7, #16]
	    PA2     ------>  TIM2_CH3  < EN1 >
	    PA3     ------>  TIM2_CH4  < EN0 >
	    PA15     ------> TIM2_CH1  < EN2 >
	    PB3     ------>  TIM2_CH2  < EN3 >
	 */
	GPIO_InitStruct.Pin = EN0_PIN|EN1_PIN|EN2_PIN;
 8001cb4:	f248 030c 	movw	r3, #32780	; 0x800c
 8001cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	65bb      	str	r3, [r7, #88]	; 0x58
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4847      	ldr	r0, [pc, #284]	; (8001de8 <MX_TIM2_Init+0x1b0>)
 8001cca:	f001 fa5d 	bl	8003188 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = EN3_PIN;
 8001cce:	2308      	movs	r3, #8
 8001cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	65bb      	str	r3, [r7, #88]	; 0x58
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cda:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4842      	ldr	r0, [pc, #264]	; (8001dec <MX_TIM2_Init+0x1b4>)
 8001ce2:	f001 fa51 	bl	8003188 <HAL_GPIO_Init>

	__HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001ce6:	4b42      	ldr	r3, [pc, #264]	; (8001df0 <MX_TIM2_Init+0x1b8>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cf6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d04:	4a3a      	ldr	r2, [pc, #232]	; (8001df0 <MX_TIM2_Init+0x1b8>)
 8001d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d08:	6053      	str	r3, [r2, #4]



	__HAL_RCC_TIM2_CLK_ENABLE();
 8001d0a:	4b36      	ldr	r3, [pc, #216]	; (8001de4 <MX_TIM2_Init+0x1ac>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	4a35      	ldr	r2, [pc, #212]	; (8001de4 <MX_TIM2_Init+0x1ac>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	61d3      	str	r3, [r2, #28]
 8001d16:	4b33      	ldr	r3, [pc, #204]	; (8001de4 <MX_TIM2_Init+0x1ac>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
	/* TIM2 interrupt Init */
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2100      	movs	r1, #0
 8001d26:	201c      	movs	r0, #28
 8001d28:	f001 f947 	bl	8002fba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d2c:	201c      	movs	r0, #28
 8001d2e:	f001 f960 	bl	8002ff2 <HAL_NVIC_EnableIRQ>





	htim2.Instance = TIM2;
 8001d32:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <MX_TIM2_Init+0x1bc>)
 8001d34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d38:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = PSC - 1;
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4b2c      	ldr	r3, [pc, #176]	; (8001df4 <MX_TIM2_Init+0x1bc>)
 8001d42:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d44:	4b2b      	ldr	r3, [pc, #172]	; (8001df4 <MX_TIM2_Init+0x1bc>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = ARR - 1;
 8001d4a:	88bb      	ldrh	r3, [r7, #4]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <MX_TIM2_Init+0x1bc>)
 8001d52:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d54:	4b27      	ldr	r3, [pc, #156]	; (8001df4 <MX_TIM2_Init+0x1bc>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d5a:	4b26      	ldr	r3, [pc, #152]	; (8001df4 <MX_TIM2_Init+0x1bc>)
 8001d5c:	2280      	movs	r2, #128	; 0x80
 8001d5e:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim2);
 8001d60:	4824      	ldr	r0, [pc, #144]	; (8001df4 <MX_TIM2_Init+0x1bc>)
 8001d62:	f002 f985 	bl	8004070 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6a:	623b      	str	r3, [r7, #32]
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 8001d6c:	f107 0320 	add.w	r3, r7, #32
 8001d70:	4619      	mov	r1, r3
 8001d72:	4820      	ldr	r0, [pc, #128]	; (8001df4 <MX_TIM2_Init+0x1bc>)
 8001d74:	f002 ffa2 	bl	8004cbc <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim2);
 8001d78:	481e      	ldr	r0, [pc, #120]	; (8001df4 <MX_TIM2_Init+0x1bc>)
 8001d7a:	f002 fc23 	bl	80045c4 <HAL_TIM_PWM_Init>




	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61bb      	str	r3, [r7, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 8001d86:	f107 0318 	add.w	r3, r7, #24
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4819      	ldr	r0, [pc, #100]	; (8001df4 <MX_TIM2_Init+0x1bc>)
 8001d8e:	f003 fb21 	bl	80053d4 <HAL_TIMEx_MasterConfigSynchronization>



	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001d92:	2370      	movs	r3, #112	; 0x70
 8001d94:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = CCR - 1;
 8001d96:	887b      	ldrh	r3, [r7, #2]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	643b      	str	r3, [r7, #64]	; 0x40

	HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8001da4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001da8:	2200      	movs	r2, #0
 8001daa:	4619      	mov	r1, r3
 8001dac:	4811      	ldr	r0, [pc, #68]	; (8001df4 <MX_TIM2_Init+0x1bc>)
 8001dae:	f002 fec7 	bl	8004b40 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 8001db2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001db6:	2204      	movs	r2, #4
 8001db8:	4619      	mov	r1, r3
 8001dba:	480e      	ldr	r0, [pc, #56]	; (8001df4 <MX_TIM2_Init+0x1bc>)
 8001dbc:	f002 fec0 	bl	8004b40 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 8001dc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dc4:	2208      	movs	r2, #8
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	480a      	ldr	r0, [pc, #40]	; (8001df4 <MX_TIM2_Init+0x1bc>)
 8001dca:	f002 feb9 	bl	8004b40 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4);
 8001dce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4807      	ldr	r0, [pc, #28]	; (8001df4 <MX_TIM2_Init+0x1bc>)
 8001dd8:	f002 feb2 	bl	8004b40 <HAL_TIM_PWM_ConfigChannel>



}
 8001ddc:	bf00      	nop
 8001dde:	3760      	adds	r7, #96	; 0x60
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40010800 	.word	0x40010800
 8001dec:	40010c00 	.word	0x40010c00
 8001df0:	40010000 	.word	0x40010000
 8001df4:	20001180 	.word	0x20001180

08001df8 <MX_TIM4_Init>:




void MX_TIM4_Init(uint16_t PSC, uint16_t CCR, uint16_t ARR)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b090      	sub	sp, #64	; 0x40
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	80fb      	strh	r3, [r7, #6]
 8001e02:	460b      	mov	r3, r1
 8001e04:	80bb      	strh	r3, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	807b      	strh	r3, [r7, #2]



	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001e22:	f107 030c 	add.w	r3, r7, #12
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
 8001e30:	611a      	str	r2, [r3, #16]
 8001e32:	615a      	str	r2, [r3, #20]
 8001e34:	619a      	str	r2, [r3, #24]


	__HAL_RCC_TIM4_CLK_ENABLE();
 8001e36:	4b2b      	ldr	r3, [pc, #172]	; (8001ee4 <MX_TIM4_Init+0xec>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4a2a      	ldr	r2, [pc, #168]	; (8001ee4 <MX_TIM4_Init+0xec>)
 8001e3c:	f043 0304 	orr.w	r3, r3, #4
 8001e40:	61d3      	str	r3, [r2, #28]
 8001e42:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <MX_TIM4_Init+0xec>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f003 0304 	and.w	r3, r3, #4
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
	HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	201e      	movs	r0, #30
 8001e54:	f001 f8b1 	bl	8002fba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e58:	201e      	movs	r0, #30
 8001e5a:	f001 f8ca 	bl	8002ff2 <HAL_NVIC_EnableIRQ>

	htim4.Instance = TIM4;
 8001e5e:	4b22      	ldr	r3, [pc, #136]	; (8001ee8 <MX_TIM4_Init+0xf0>)
 8001e60:	4a22      	ldr	r2, [pc, #136]	; (8001eec <MX_TIM4_Init+0xf4>)
 8001e62:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = PSC - 1;
 8001e64:	88fb      	ldrh	r3, [r7, #6]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <MX_TIM4_Init+0xf0>)
 8001e6c:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <MX_TIM4_Init+0xf0>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = ARR - 1;
 8001e74:	887b      	ldrh	r3, [r7, #2]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <MX_TIM4_Init+0xf0>)
 8001e7c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <MX_TIM4_Init+0xf0>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e84:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <MX_TIM4_Init+0xf0>)
 8001e86:	2280      	movs	r2, #128	; 0x80
 8001e88:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim4);
 8001e8a:	4817      	ldr	r0, [pc, #92]	; (8001ee8 <MX_TIM4_Init+0xf0>)
 8001e8c:	f002 f8f0 	bl	8004070 <HAL_TIM_Base_Init>


	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e94:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8001e96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4812      	ldr	r0, [pc, #72]	; (8001ee8 <MX_TIM4_Init+0xf0>)
 8001e9e:	f002 ff0d 	bl	8004cbc <HAL_TIM_ConfigClockSource>
	HAL_TIM_OC_Init(&htim4);
 8001ea2:	4811      	ldr	r0, [pc, #68]	; (8001ee8 <MX_TIM4_Init+0xf0>)
 8001ea4:	f002 f9a4 	bl	80041f0 <HAL_TIM_OC_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8001eb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	480c      	ldr	r0, [pc, #48]	; (8001ee8 <MX_TIM4_Init+0xf0>)
 8001eb8:	f003 fa8c 	bl	80053d4 <HAL_TIMEx_MasterConfigSynchronization>



	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = CCR - 1;
 8001ec0:	88bb      	ldrh	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]


	HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
 8001ece:	f107 030c 	add.w	r3, r7, #12
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4804      	ldr	r0, [pc, #16]	; (8001ee8 <MX_TIM4_Init+0xf0>)
 8001ed8:	f002 fdda 	bl	8004a90 <HAL_TIM_OC_ConfigChannel>





}
 8001edc:	bf00      	nop
 8001ede:	3740      	adds	r7, #64	; 0x40
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	200011c8 	.word	0x200011c8
 8001eec:	40000800 	.word	0x40000800

08001ef0 <analogWrite>:




void analogWrite(uint16_t pwm_resolution )
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	80fb      	strh	r3, [r7, #6]





	uint16_t tim2_arr = TIM2 -> ARR;
 8001efa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f00:	81fb      	strh	r3, [r7, #14]
	uint16_t  TIM2_CCR =  floor ( ( ( ( tim2_arr ) + 1 )  * pwm_resolution / MAX_PWM_RESOLUTION ) - 1 );
 8001f02:	89fb      	ldrh	r3, [r7, #14]
 8001f04:	3301      	adds	r3, #1
 8001f06:	88fa      	ldrh	r2, [r7, #6]
 8001f08:	fb02 f303 	mul.w	r3, r2, r3
 8001f0c:	4a20      	ldr	r2, [pc, #128]	; (8001f90 <analogWrite+0xa0>)
 8001f0e:	fb82 1203 	smull	r1, r2, r2, r3
 8001f12:	1092      	asrs	r2, r2, #2
 8001f14:	17db      	asrs	r3, r3, #31
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe fa72 	bl	8000404 <__aeabi_i2d>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	f7fe fad6 	bl	80004d8 <__aeabi_d2uiz>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	81bb      	strh	r3, [r7, #12]



	if( pwm_resolution > MAX_PWM_RESOLUTION ) pwm_resolution = MAX_PWM_RESOLUTION;
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	2b0a      	cmp	r3, #10
 8001f34:	d901      	bls.n	8001f3a <analogWrite+0x4a>
 8001f36:	230a      	movs	r3, #10
 8001f38:	80fb      	strh	r3, [r7, #6]


	if( pwm_resolution != 0 )
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d010      	beq.n	8001f62 <analogWrite+0x72>
	{


		TIM2 -> CCR1  =  TIM2_CCR;
 8001f40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f44:	89bb      	ldrh	r3, [r7, #12]
 8001f46:	6353      	str	r3, [r2, #52]	; 0x34
		TIM2 -> CCR2  =  TIM2_CCR;
 8001f48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f4c:	89bb      	ldrh	r3, [r7, #12]
 8001f4e:	6393      	str	r3, [r2, #56]	; 0x38
		TIM2 -> CCR3  =  TIM2_CCR;
 8001f50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f54:	89bb      	ldrh	r3, [r7, #12]
 8001f56:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM2 -> CCR4  =  TIM2_CCR;
 8001f58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f5c:	89bb      	ldrh	r3, [r7, #12]
 8001f5e:	6413      	str	r3, [r2, #64]	; 0x40





}
 8001f60:	e012      	b.n	8001f88 <analogWrite+0x98>
	else if ( pwm_resolution == 0 )
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10f      	bne.n	8001f88 <analogWrite+0x98>
		TIM2 -> CCR1 = 0;
 8001f68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2 -> CCR2 = 0;
 8001f70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f74:	2200      	movs	r2, #0
 8001f76:	639a      	str	r2, [r3, #56]	; 0x38
		TIM2 -> CCR3 = 0;
 8001f78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2 -> CCR4  = 0;
 8001f80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f84:	2200      	movs	r2, #0
 8001f86:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001f88:	bf00      	nop
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	66666667 	.word	0x66666667

08001f94 <analogWrite_ch1>:

void analogWrite_ch1( uint32_t pwm_resolution )
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]


	uint32_t tim2_arr = TIM2 -> ARR;
 8001f9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa2:	60fb      	str	r3, [r7, #12]
	if( pwm_resolution > MAX_PWM_RESOLUTION ) pwm_resolution = MAX_PWM_RESOLUTION;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b0a      	cmp	r3, #10
 8001fa8:	d901      	bls.n	8001fae <analogWrite_ch1+0x1a>
 8001faa:	230a      	movs	r3, #10
 8001fac:	607b      	str	r3, [r7, #4]

	if(pwm_resolution != 0 )
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d017      	beq.n	8001fe4 <analogWrite_ch1+0x50>
	{


		TIM2 -> CCR1 =   floor ( ( ( ( tim2_arr ) + 1 )  * pwm_resolution / MAX_PWM_RESOLUTION ) - 1 );
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	fb02 f303 	mul.w	r3, r2, r3
 8001fbe:	4a0f      	ldr	r2, [pc, #60]	; (8001ffc <analogWrite_ch1+0x68>)
 8001fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc4:	08db      	lsrs	r3, r3, #3
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fa0b 	bl	80003e4 <__aeabi_ui2d>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f7fe fa7d 	bl	80004d8 <__aeabi_d2uiz>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	6363      	str	r3, [r4, #52]	; 0x34
	}




}
 8001fe2:	e006      	b.n	8001ff2 <analogWrite_ch1+0x5e>
	else if ( pwm_resolution == 0 )
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d103      	bne.n	8001ff2 <analogWrite_ch1+0x5e>
		TIM2 -> CCR1 = 0;
 8001fea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fee:	2200      	movs	r2, #0
 8001ff0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001ff2:	bf00      	nop
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd90      	pop	{r4, r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	cccccccd 	.word	0xcccccccd

08002000 <analogWrite_ch2>:



void analogWrite_ch2( uint32_t pwm_resolution )
{
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]


	uint32_t tim2_arr = TIM2 -> ARR;
 8002008:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200e:	60fb      	str	r3, [r7, #12]
	if( pwm_resolution > MAX_PWM_RESOLUTION ) pwm_resolution = MAX_PWM_RESOLUTION;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b0a      	cmp	r3, #10
 8002014:	d901      	bls.n	800201a <analogWrite_ch2+0x1a>
 8002016:	230a      	movs	r3, #10
 8002018:	607b      	str	r3, [r7, #4]

	if(pwm_resolution != 0 )
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d017      	beq.n	8002050 <analogWrite_ch2+0x50>
	{


		TIM2 -> CCR2 =   floor ( ( ( ( tim2_arr ) + 1 )  * pwm_resolution / MAX_PWM_RESOLUTION ) - 1 );
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	3301      	adds	r3, #1
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	fb02 f303 	mul.w	r3, r2, r3
 800202a:	4a0f      	ldr	r2, [pc, #60]	; (8002068 <analogWrite_ch2+0x68>)
 800202c:	fba2 2303 	umull	r2, r3, r2, r3
 8002030:	08db      	lsrs	r3, r3, #3
 8002032:	3b01      	subs	r3, #1
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe f9d5 	bl	80003e4 <__aeabi_ui2d>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002042:	4610      	mov	r0, r2
 8002044:	4619      	mov	r1, r3
 8002046:	f7fe fa47 	bl	80004d8 <__aeabi_d2uiz>
 800204a:	4603      	mov	r3, r0
 800204c:	63a3      	str	r3, [r4, #56]	; 0x38
	}




}
 800204e:	e006      	b.n	800205e <analogWrite_ch2+0x5e>
	else if ( pwm_resolution == 0 )
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d103      	bne.n	800205e <analogWrite_ch2+0x5e>
		TIM2 -> CCR2 = 0;
 8002056:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800205a:	2200      	movs	r2, #0
 800205c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	bd90      	pop	{r4, r7, pc}
 8002066:	bf00      	nop
 8002068:	cccccccd 	.word	0xcccccccd

0800206c <analogWrite_ch3>:

void analogWrite_ch3( uint32_t pwm_resolution )
{
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]


	uint32_t tim2_arr = TIM2 -> ARR;
 8002074:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207a:	60fb      	str	r3, [r7, #12]
	if( pwm_resolution > MAX_PWM_RESOLUTION ) pwm_resolution = MAX_PWM_RESOLUTION;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b0a      	cmp	r3, #10
 8002080:	d901      	bls.n	8002086 <analogWrite_ch3+0x1a>
 8002082:	230a      	movs	r3, #10
 8002084:	607b      	str	r3, [r7, #4]

	if(pwm_resolution != 0 )
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d017      	beq.n	80020bc <analogWrite_ch3+0x50>
	{


		TIM2 -> CCR3 =   floor ( ( ( ( tim2_arr ) + 1 )  * pwm_resolution / MAX_PWM_RESOLUTION ) - 1 );
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	3301      	adds	r3, #1
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	fb02 f303 	mul.w	r3, r2, r3
 8002096:	4a0f      	ldr	r2, [pc, #60]	; (80020d4 <analogWrite_ch3+0x68>)
 8002098:	fba2 2303 	umull	r2, r3, r2, r3
 800209c:	08db      	lsrs	r3, r3, #3
 800209e:	3b01      	subs	r3, #1
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe f99f 	bl	80003e4 <__aeabi_ui2d>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80020ae:	4610      	mov	r0, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	f7fe fa11 	bl	80004d8 <__aeabi_d2uiz>
 80020b6:	4603      	mov	r3, r0
 80020b8:	63e3      	str	r3, [r4, #60]	; 0x3c
	}




}
 80020ba:	e006      	b.n	80020ca <analogWrite_ch3+0x5e>
	else if ( pwm_resolution == 0 )
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d103      	bne.n	80020ca <analogWrite_ch3+0x5e>
		TIM2 -> CCR3 = 0;
 80020c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020c6:	2200      	movs	r2, #0
 80020c8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd90      	pop	{r4, r7, pc}
 80020d2:	bf00      	nop
 80020d4:	cccccccd 	.word	0xcccccccd

080020d8 <analogWrite_ch4>:

void analogWrite_ch4( uint32_t pwm_resolution )
{
 80020d8:	b590      	push	{r4, r7, lr}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]


	uint32_t tim2_arr = TIM2 -> ARR;
 80020e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e6:	60fb      	str	r3, [r7, #12]
	if( pwm_resolution > MAX_PWM_RESOLUTION ) pwm_resolution = MAX_PWM_RESOLUTION;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b0a      	cmp	r3, #10
 80020ec:	d901      	bls.n	80020f2 <analogWrite_ch4+0x1a>
 80020ee:	230a      	movs	r3, #10
 80020f0:	607b      	str	r3, [r7, #4]

	if(pwm_resolution != 0 )
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d017      	beq.n	8002128 <analogWrite_ch4+0x50>
	{


		TIM2 -> CCR4 =   floor ( ( ( ( tim2_arr ) + 1 )  * pwm_resolution / MAX_PWM_RESOLUTION ) - 1 );
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	3301      	adds	r3, #1
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	fb02 f303 	mul.w	r3, r2, r3
 8002102:	4a0f      	ldr	r2, [pc, #60]	; (8002140 <analogWrite_ch4+0x68>)
 8002104:	fba2 2303 	umull	r2, r3, r2, r3
 8002108:	08db      	lsrs	r3, r3, #3
 800210a:	3b01      	subs	r3, #1
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe f969 	bl	80003e4 <__aeabi_ui2d>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800211a:	4610      	mov	r0, r2
 800211c:	4619      	mov	r1, r3
 800211e:	f7fe f9db 	bl	80004d8 <__aeabi_d2uiz>
 8002122:	4603      	mov	r3, r0
 8002124:	6423      	str	r3, [r4, #64]	; 0x40
	}




}
 8002126:	e006      	b.n	8002136 <analogWrite_ch4+0x5e>
	else if ( pwm_resolution == 0 )
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d103      	bne.n	8002136 <analogWrite_ch4+0x5e>
		TIM2 -> CCR4 = 0;
 800212e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002132:	2200      	movs	r2, #0
 8002134:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	bd90      	pop	{r4, r7, pc}
 800213e:	bf00      	nop
 8002140:	cccccccd 	.word	0xcccccccd

08002144 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;


void MX_USART1_UART_Init(int BaudRate)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]


   /* UART1 ---> USB TO TTL */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214c:	f107 0310 	add.w	r3, r7, #16
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]


	__HAL_RCC_USART1_CLK_ENABLE();
 800215a:	4b2c      	ldr	r3, [pc, #176]	; (800220c <MX_USART1_UART_Init+0xc8>)
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	4a2b      	ldr	r2, [pc, #172]	; (800220c <MX_USART1_UART_Init+0xc8>)
 8002160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002164:	6193      	str	r3, [r2, #24]
 8002166:	4b29      	ldr	r3, [pc, #164]	; (800220c <MX_USART1_UART_Init+0xc8>)
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002172:	4b26      	ldr	r3, [pc, #152]	; (800220c <MX_USART1_UART_Init+0xc8>)
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	4a25      	ldr	r2, [pc, #148]	; (800220c <MX_USART1_UART_Init+0xc8>)
 8002178:	f043 0304 	orr.w	r3, r3, #4
 800217c:	6193      	str	r3, [r2, #24]
 800217e:	4b23      	ldr	r3, [pc, #140]	; (800220c <MX_USART1_UART_Init+0xc8>)
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]

	/**USART1 GPIO Configuration
		PA9     ------> USART1_TX
		PA10     ------> USART1_RX
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 800218a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800218e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002194:	2303      	movs	r3, #3
 8002196:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002198:	f107 0310 	add.w	r3, r7, #16
 800219c:	4619      	mov	r1, r3
 800219e:	481c      	ldr	r0, [pc, #112]	; (8002210 <MX_USART1_UART_Init+0xcc>)
 80021a0:	f000 fff2 	bl	8003188 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021a8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021ae:	2301      	movs	r3, #1
 80021b0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b2:	f107 0310 	add.w	r3, r7, #16
 80021b6:	4619      	mov	r1, r3
 80021b8:	4815      	ldr	r0, [pc, #84]	; (8002210 <MX_USART1_UART_Init+0xcc>)
 80021ba:	f000 ffe5 	bl	8003188 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2100      	movs	r1, #0
 80021c2:	2025      	movs	r0, #37	; 0x25
 80021c4:	f000 fef9 	bl	8002fba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021c8:	2025      	movs	r0, #37	; 0x25
 80021ca:	f000 ff12 	bl	8002ff2 <HAL_NVIC_EnableIRQ>


  huart1.Instance = USART1;
 80021ce:	4b11      	ldr	r3, [pc, #68]	; (8002214 <MX_USART1_UART_Init+0xd0>)
 80021d0:	4a11      	ldr	r2, [pc, #68]	; (8002218 <MX_USART1_UART_Init+0xd4>)
 80021d2:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = BaudRate;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a0f      	ldr	r2, [pc, #60]	; (8002214 <MX_USART1_UART_Init+0xd0>)
 80021d8:	6053      	str	r3, [r2, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <MX_USART1_UART_Init+0xd0>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <MX_USART1_UART_Init+0xd0>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <MX_USART1_UART_Init+0xd0>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <MX_USART1_UART_Init+0xd0>)
 80021ee:	220c      	movs	r2, #12
 80021f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <MX_USART1_UART_Init+0xd0>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <MX_USART1_UART_Init+0xd0>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart1);
 80021fe:	4805      	ldr	r0, [pc, #20]	; (8002214 <MX_USART1_UART_Init+0xd0>)
 8002200:	f003 f958 	bl	80054b4 <HAL_UART_Init>



}
 8002204:	bf00      	nop
 8002206:	3720      	adds	r7, #32
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40021000 	.word	0x40021000
 8002210:	40010800 	.word	0x40010800
 8002214:	20001210 	.word	0x20001210
 8002218:	40013800 	.word	0x40013800

0800221c <MX_USART3_UART_Init>:




void MX_USART3_UART_Init(int BaudRate)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 0310 	add.w	r3, r7, #16
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]


   /* UART3 ---> BLUETOOTH */
	__HAL_RCC_USART3_CLK_ENABLE();
 8002232:	4b2c      	ldr	r3, [pc, #176]	; (80022e4 <MX_USART3_UART_Init+0xc8>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	4a2b      	ldr	r2, [pc, #172]	; (80022e4 <MX_USART3_UART_Init+0xc8>)
 8002238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800223c:	61d3      	str	r3, [r2, #28]
 800223e:	4b29      	ldr	r3, [pc, #164]	; (80022e4 <MX_USART3_UART_Init+0xc8>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800224a:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <MX_USART3_UART_Init+0xc8>)
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	4a25      	ldr	r2, [pc, #148]	; (80022e4 <MX_USART3_UART_Init+0xc8>)
 8002250:	f043 0308 	orr.w	r3, r3, #8
 8002254:	6193      	str	r3, [r2, #24]
 8002256:	4b23      	ldr	r3, [pc, #140]	; (80022e4 <MX_USART3_UART_Init+0xc8>)
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
	/**USART3 GPIO Configuration
	    PB10     ------> USART3_TX
	    PB11     ------> USART3_RX
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002266:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800226c:	2303      	movs	r3, #3
 800226e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002270:	f107 0310 	add.w	r3, r7, #16
 8002274:	4619      	mov	r1, r3
 8002276:	481c      	ldr	r0, [pc, #112]	; (80022e8 <MX_USART3_UART_Init+0xcc>)
 8002278:	f000 ff86 	bl	8003188 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_11;
 800227c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002280:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002286:	2301      	movs	r3, #1
 8002288:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228a:	f107 0310 	add.w	r3, r7, #16
 800228e:	4619      	mov	r1, r3
 8002290:	4815      	ldr	r0, [pc, #84]	; (80022e8 <MX_USART3_UART_Init+0xcc>)
 8002292:	f000 ff79 	bl	8003188 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002296:	2200      	movs	r2, #0
 8002298:	2100      	movs	r1, #0
 800229a:	2027      	movs	r0, #39	; 0x27
 800229c:	f000 fe8d 	bl	8002fba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 80022a0:	2027      	movs	r0, #39	; 0x27
 80022a2:	f000 fea6 	bl	8002ff2 <HAL_NVIC_EnableIRQ>


  huart3.Instance = USART3;
 80022a6:	4b11      	ldr	r3, [pc, #68]	; (80022ec <MX_USART3_UART_Init+0xd0>)
 80022a8:	4a11      	ldr	r2, [pc, #68]	; (80022f0 <MX_USART3_UART_Init+0xd4>)
 80022aa:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = BaudRate;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a0f      	ldr	r2, [pc, #60]	; (80022ec <MX_USART3_UART_Init+0xd0>)
 80022b0:	6053      	str	r3, [r2, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <MX_USART3_UART_Init+0xd0>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <MX_USART3_UART_Init+0xd0>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022be:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <MX_USART3_UART_Init+0xd0>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022c4:	4b09      	ldr	r3, [pc, #36]	; (80022ec <MX_USART3_UART_Init+0xd0>)
 80022c6:	220c      	movs	r2, #12
 80022c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ca:	4b08      	ldr	r3, [pc, #32]	; (80022ec <MX_USART3_UART_Init+0xd0>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <MX_USART3_UART_Init+0xd0>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart3);
 80022d6:	4805      	ldr	r0, [pc, #20]	; (80022ec <MX_USART3_UART_Init+0xd0>)
 80022d8:	f003 f8ec 	bl	80054b4 <HAL_UART_Init>





}
 80022dc:	bf00      	nop
 80022de:	3720      	adds	r7, #32
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40010c00 	.word	0x40010c00
 80022ec:	20001254 	.word	0x20001254
 80022f0:	40004800 	.word	0x40004800

080022f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022f4:	480c      	ldr	r0, [pc, #48]	; (8002328 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022f6:	490d      	ldr	r1, [pc, #52]	; (800232c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022f8:	4a0d      	ldr	r2, [pc, #52]	; (8002330 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022fc:	e002      	b.n	8002304 <LoopCopyDataInit>

080022fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002302:	3304      	adds	r3, #4

08002304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002308:	d3f9      	bcc.n	80022fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800230a:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800230c:	4c0a      	ldr	r4, [pc, #40]	; (8002338 <LoopFillZerobss+0x22>)
  movs r3, #0
 800230e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002310:	e001      	b.n	8002316 <LoopFillZerobss>

08002312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002314:	3204      	adds	r2, #4

08002316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002318:	d3fb      	bcc.n	8002312 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800231a:	f7ff fc87 	bl	8001c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800231e:	f003 fe0b 	bl	8005f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002322:	f7fe fc2b 	bl	8000b7c <main>
  bx lr
 8002326:	4770      	bx	lr
  ldr r0, =_sdata
 8002328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800232c:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8002330:	0800757c 	.word	0x0800757c
  ldr r2, =_sbss
 8002334:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8002338:	200012ac 	.word	0x200012ac

0800233c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800233c:	e7fe      	b.n	800233c <ADC1_2_IRQHandler>
	...

08002340 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002344:	4b08      	ldr	r3, [pc, #32]	; (8002368 <HAL_Init+0x28>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a07      	ldr	r2, [pc, #28]	; (8002368 <HAL_Init+0x28>)
 800234a:	f043 0310 	orr.w	r3, r3, #16
 800234e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002350:	2003      	movs	r0, #3
 8002352:	f000 fe27 	bl	8002fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002356:	200f      	movs	r0, #15
 8002358:	f000 f808 	bl	800236c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800235c:	f7ff fa22 	bl	80017a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40022000 	.word	0x40022000

0800236c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002374:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <HAL_InitTick+0x54>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <HAL_InitTick+0x58>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	4619      	mov	r1, r3
 800237e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002382:	fbb3 f3f1 	udiv	r3, r3, r1
 8002386:	fbb2 f3f3 	udiv	r3, r2, r3
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fe3f 	bl	800300e <HAL_SYSTICK_Config>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e00e      	b.n	80023b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b0f      	cmp	r3, #15
 800239e:	d80a      	bhi.n	80023b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023a0:	2200      	movs	r2, #0
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	f04f 30ff 	mov.w	r0, #4294967295
 80023a8:	f000 fe07 	bl	8002fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023ac:	4a06      	ldr	r2, [pc, #24]	; (80023c8 <HAL_InitTick+0x5c>)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	e000      	b.n	80023b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000094 	.word	0x20000094
 80023c4:	2000009c 	.word	0x2000009c
 80023c8:	20000098 	.word	0x20000098

080023cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <HAL_IncTick+0x1c>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b05      	ldr	r3, [pc, #20]	; (80023ec <HAL_IncTick+0x20>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	4a03      	ldr	r2, [pc, #12]	; (80023ec <HAL_IncTick+0x20>)
 80023de:	6013      	str	r3, [r2, #0]
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	2000009c 	.word	0x2000009c
 80023ec:	20001298 	.word	0x20001298

080023f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return uwTick;
 80023f4:	4b02      	ldr	r3, [pc, #8]	; (8002400 <HAL_GetTick+0x10>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr
 8002400:	20001298 	.word	0x20001298

08002404 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002414:	2300      	movs	r3, #0
 8002416:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e0be      	b.n	80025a4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002430:	2b00      	cmp	r3, #0
 8002432:	d109      	bne.n	8002448 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff f9e8 	bl	8001818 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 fbf1 	bl	8002c30 <ADC_ConversionStop_Disable>
 800244e:	4603      	mov	r3, r0
 8002450:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	2b00      	cmp	r3, #0
 800245c:	f040 8099 	bne.w	8002592 <HAL_ADC_Init+0x18e>
 8002460:	7dfb      	ldrb	r3, [r7, #23]
 8002462:	2b00      	cmp	r3, #0
 8002464:	f040 8095 	bne.w	8002592 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002470:	f023 0302 	bic.w	r3, r3, #2
 8002474:	f043 0202 	orr.w	r2, r3, #2
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002484:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	7b1b      	ldrb	r3, [r3, #12]
 800248a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800248c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	4313      	orrs	r3, r2
 8002492:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800249c:	d003      	beq.n	80024a6 <HAL_ADC_Init+0xa2>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d102      	bne.n	80024ac <HAL_ADC_Init+0xa8>
 80024a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024aa:	e000      	b.n	80024ae <HAL_ADC_Init+0xaa>
 80024ac:	2300      	movs	r3, #0
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	7d1b      	ldrb	r3, [r3, #20]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d119      	bne.n	80024f0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	7b1b      	ldrb	r3, [r3, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d109      	bne.n	80024d8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	3b01      	subs	r3, #1
 80024ca:	035a      	lsls	r2, r3, #13
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	e00b      	b.n	80024f0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	f043 0220 	orr.w	r2, r3, #32
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	f043 0201 	orr.w	r2, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	430a      	orrs	r2, r1
 8002502:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	4b28      	ldr	r3, [pc, #160]	; (80025ac <HAL_ADC_Init+0x1a8>)
 800250c:	4013      	ands	r3, r2
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6812      	ldr	r2, [r2, #0]
 8002512:	68b9      	ldr	r1, [r7, #8]
 8002514:	430b      	orrs	r3, r1
 8002516:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002520:	d003      	beq.n	800252a <HAL_ADC_Init+0x126>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d104      	bne.n	8002534 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	3b01      	subs	r3, #1
 8002530:	051b      	lsls	r3, r3, #20
 8002532:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	430a      	orrs	r2, r1
 8002546:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	4b18      	ldr	r3, [pc, #96]	; (80025b0 <HAL_ADC_Init+0x1ac>)
 8002550:	4013      	ands	r3, r2
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	429a      	cmp	r2, r3
 8002556:	d10b      	bne.n	8002570 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002562:	f023 0303 	bic.w	r3, r3, #3
 8002566:	f043 0201 	orr.w	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800256e:	e018      	b.n	80025a2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	f023 0312 	bic.w	r3, r3, #18
 8002578:	f043 0210 	orr.w	r2, r3, #16
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	f043 0201 	orr.w	r2, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002590:	e007      	b.n	80025a2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002596:	f043 0210 	orr.w	r2, r3, #16
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	ffe1f7fd 	.word	0xffe1f7fd
 80025b0:	ff1f0efe 	.word	0xff1f0efe

080025b4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_ADC_Start+0x1a>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e098      	b.n	8002700 <HAL_ADC_Start+0x14c>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 fad0 	bl	8002b7c <ADC_Enable>
 80025dc:	4603      	mov	r3, r0
 80025de:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f040 8087 	bne.w	80026f6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f0:	f023 0301 	bic.w	r3, r3, #1
 80025f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a41      	ldr	r2, [pc, #260]	; (8002708 <HAL_ADC_Start+0x154>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d105      	bne.n	8002612 <HAL_ADC_Start+0x5e>
 8002606:	4b41      	ldr	r3, [pc, #260]	; (800270c <HAL_ADC_Start+0x158>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d115      	bne.n	800263e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002628:	2b00      	cmp	r3, #0
 800262a:	d026      	beq.n	800267a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002634:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800263c:	e01d      	b.n	800267a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002642:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a2f      	ldr	r2, [pc, #188]	; (800270c <HAL_ADC_Start+0x158>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d004      	beq.n	800265e <HAL_ADC_Start+0xaa>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a2b      	ldr	r2, [pc, #172]	; (8002708 <HAL_ADC_Start+0x154>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d10d      	bne.n	800267a <HAL_ADC_Start+0xc6>
 800265e:	4b2b      	ldr	r3, [pc, #172]	; (800270c <HAL_ADC_Start+0x158>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002666:	2b00      	cmp	r3, #0
 8002668:	d007      	beq.n	800267a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002672:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d006      	beq.n	8002694 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268a:	f023 0206 	bic.w	r2, r3, #6
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	62da      	str	r2, [r3, #44]	; 0x2c
 8002692:	e002      	b.n	800269a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f06f 0202 	mvn.w	r2, #2
 80026aa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80026b6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80026ba:	d113      	bne.n	80026e4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80026c0:	4a11      	ldr	r2, [pc, #68]	; (8002708 <HAL_ADC_Start+0x154>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d105      	bne.n	80026d2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80026c6:	4b11      	ldr	r3, [pc, #68]	; (800270c <HAL_ADC_Start+0x158>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d108      	bne.n	80026e4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80026e0:	609a      	str	r2, [r3, #8]
 80026e2:	e00c      	b.n	80026fe <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	e003      	b.n	80026fe <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40012800 	.word	0x40012800
 800270c:	40012400 	.word	0x40012400

08002710 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_ADC_Stop+0x1a>
 8002726:	2302      	movs	r3, #2
 8002728:	e01a      	b.n	8002760 <HAL_ADC_Stop+0x50>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 fa7c 	bl	8002c30 <ADC_ConversionStop_Disable>
 8002738:	4603      	mov	r3, r0
 800273a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002746:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800274a:	f023 0301 	bic.w	r3, r3, #1
 800274e:	f043 0201 	orr.w	r2, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800275e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002768:	b590      	push	{r4, r7, lr}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800277e:	f7ff fe37 	bl	80023f0 <HAL_GetTick>
 8002782:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00b      	beq.n	80027aa <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002796:	f043 0220 	orr.w	r2, r3, #32
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e0d3      	b.n	8002952 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d131      	bne.n	800281c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d12a      	bne.n	800281c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80027c6:	e021      	b.n	800280c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ce:	d01d      	beq.n	800280c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d007      	beq.n	80027e6 <HAL_ADC_PollForConversion+0x7e>
 80027d6:	f7ff fe0b 	bl	80023f0 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d212      	bcs.n	800280c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10b      	bne.n	800280c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	f043 0204 	orr.w	r2, r3, #4
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e0a2      	b.n	8002952 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0d6      	beq.n	80027c8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800281a:	e070      	b.n	80028fe <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800281c:	4b4f      	ldr	r3, [pc, #316]	; (800295c <HAL_ADC_PollForConversion+0x1f4>)
 800281e:	681c      	ldr	r4, [r3, #0]
 8002820:	2002      	movs	r0, #2
 8002822:	f001 fb65 	bl	8003ef0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002826:	4603      	mov	r3, r0
 8002828:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6919      	ldr	r1, [r3, #16]
 8002832:	4b4b      	ldr	r3, [pc, #300]	; (8002960 <HAL_ADC_PollForConversion+0x1f8>)
 8002834:	400b      	ands	r3, r1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d118      	bne.n	800286c <HAL_ADC_PollForConversion+0x104>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68d9      	ldr	r1, [r3, #12]
 8002840:	4b48      	ldr	r3, [pc, #288]	; (8002964 <HAL_ADC_PollForConversion+0x1fc>)
 8002842:	400b      	ands	r3, r1
 8002844:	2b00      	cmp	r3, #0
 8002846:	d111      	bne.n	800286c <HAL_ADC_PollForConversion+0x104>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6919      	ldr	r1, [r3, #16]
 800284e:	4b46      	ldr	r3, [pc, #280]	; (8002968 <HAL_ADC_PollForConversion+0x200>)
 8002850:	400b      	ands	r3, r1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d108      	bne.n	8002868 <HAL_ADC_PollForConversion+0x100>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68d9      	ldr	r1, [r3, #12]
 800285c:	4b43      	ldr	r3, [pc, #268]	; (800296c <HAL_ADC_PollForConversion+0x204>)
 800285e:	400b      	ands	r3, r1
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_ADC_PollForConversion+0x100>
 8002864:	2314      	movs	r3, #20
 8002866:	e020      	b.n	80028aa <HAL_ADC_PollForConversion+0x142>
 8002868:	2329      	movs	r3, #41	; 0x29
 800286a:	e01e      	b.n	80028aa <HAL_ADC_PollForConversion+0x142>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6919      	ldr	r1, [r3, #16]
 8002872:	4b3d      	ldr	r3, [pc, #244]	; (8002968 <HAL_ADC_PollForConversion+0x200>)
 8002874:	400b      	ands	r3, r1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <HAL_ADC_PollForConversion+0x120>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68d9      	ldr	r1, [r3, #12]
 8002880:	4b3a      	ldr	r3, [pc, #232]	; (800296c <HAL_ADC_PollForConversion+0x204>)
 8002882:	400b      	ands	r3, r1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00d      	beq.n	80028a4 <HAL_ADC_PollForConversion+0x13c>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6919      	ldr	r1, [r3, #16]
 800288e:	4b38      	ldr	r3, [pc, #224]	; (8002970 <HAL_ADC_PollForConversion+0x208>)
 8002890:	400b      	ands	r3, r1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d108      	bne.n	80028a8 <HAL_ADC_PollForConversion+0x140>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68d9      	ldr	r1, [r3, #12]
 800289c:	4b34      	ldr	r3, [pc, #208]	; (8002970 <HAL_ADC_PollForConversion+0x208>)
 800289e:	400b      	ands	r3, r1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_ADC_PollForConversion+0x140>
 80028a4:	2354      	movs	r3, #84	; 0x54
 80028a6:	e000      	b.n	80028aa <HAL_ADC_PollForConversion+0x142>
 80028a8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80028aa:	fb02 f303 	mul.w	r3, r2, r3
 80028ae:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80028b0:	e021      	b.n	80028f6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b8:	d01a      	beq.n	80028f0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d007      	beq.n	80028d0 <HAL_ADC_PollForConversion+0x168>
 80028c0:	f7ff fd96 	bl	80023f0 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d20f      	bcs.n	80028f0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d90b      	bls.n	80028f0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028dc:	f043 0204 	orr.w	r2, r3, #4
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e030      	b.n	8002952 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	3301      	adds	r3, #1
 80028f4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d8d9      	bhi.n	80028b2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f06f 0212 	mvn.w	r2, #18
 8002906:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800291e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002922:	d115      	bne.n	8002950 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002928:	2b00      	cmp	r3, #0
 800292a:	d111      	bne.n	8002950 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002930:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d105      	bne.n	8002950 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	f043 0201 	orr.w	r2, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	371c      	adds	r7, #28
 8002956:	46bd      	mov	sp, r7
 8002958:	bd90      	pop	{r4, r7, pc}
 800295a:	bf00      	nop
 800295c:	20000094 	.word	0x20000094
 8002960:	24924924 	.word	0x24924924
 8002964:	00924924 	.word	0x00924924
 8002968:	12492492 	.word	0x12492492
 800296c:	00492492 	.word	0x00492492
 8002970:	00249249 	.word	0x00249249

08002974 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002982:	4618      	mov	r0, r3
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800299a:	2300      	movs	r3, #0
 800299c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x20>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e0dc      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x1da>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2b06      	cmp	r3, #6
 80029ba:	d81c      	bhi.n	80029f6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	3b05      	subs	r3, #5
 80029ce:	221f      	movs	r2, #31
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	4019      	ands	r1, r3
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	6818      	ldr	r0, [r3, #0]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	3b05      	subs	r3, #5
 80029e8:	fa00 f203 	lsl.w	r2, r0, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	635a      	str	r2, [r3, #52]	; 0x34
 80029f4:	e03c      	b.n	8002a70 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b0c      	cmp	r3, #12
 80029fc:	d81c      	bhi.n	8002a38 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3b23      	subs	r3, #35	; 0x23
 8002a10:	221f      	movs	r2, #31
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	4019      	ands	r1, r3
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	3b23      	subs	r3, #35	; 0x23
 8002a2a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	631a      	str	r2, [r3, #48]	; 0x30
 8002a36:	e01b      	b.n	8002a70 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	3b41      	subs	r3, #65	; 0x41
 8002a4a:	221f      	movs	r2, #31
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	4019      	ands	r1, r3
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	3b41      	subs	r3, #65	; 0x41
 8002a64:	fa00 f203 	lsl.w	r2, r0, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b09      	cmp	r3, #9
 8002a76:	d91c      	bls.n	8002ab2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68d9      	ldr	r1, [r3, #12]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	4613      	mov	r3, r2
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	4413      	add	r3, r2
 8002a88:	3b1e      	subs	r3, #30
 8002a8a:	2207      	movs	r2, #7
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	4019      	ands	r1, r3
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	6898      	ldr	r0, [r3, #8]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3b1e      	subs	r3, #30
 8002aa4:	fa00 f203 	lsl.w	r2, r0, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	60da      	str	r2, [r3, #12]
 8002ab0:	e019      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6919      	ldr	r1, [r3, #16]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4613      	mov	r3, r2
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	4413      	add	r3, r2
 8002ac2:	2207      	movs	r2, #7
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	4019      	ands	r1, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	6898      	ldr	r0, [r3, #8]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	4413      	add	r3, r2
 8002ada:	fa00 f203 	lsl.w	r2, r0, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b10      	cmp	r3, #16
 8002aec:	d003      	beq.n	8002af6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002af2:	2b11      	cmp	r3, #17
 8002af4:	d132      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a1d      	ldr	r2, [pc, #116]	; (8002b70 <HAL_ADC_ConfigChannel+0x1e4>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d125      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d126      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002b1c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b10      	cmp	r3, #16
 8002b24:	d11a      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b26:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <HAL_ADC_ConfigChannel+0x1e8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a13      	ldr	r2, [pc, #76]	; (8002b78 <HAL_ADC_ConfigChannel+0x1ec>)
 8002b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b30:	0c9a      	lsrs	r2, r3, #18
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b3c:	e002      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f9      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x1b2>
 8002b4a:	e007      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	f043 0220 	orr.w	r2, r3, #32
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr
 8002b70:	40012400 	.word	0x40012400
 8002b74:	20000094 	.word	0x20000094
 8002b78:	431bde83 	.word	0x431bde83

08002b7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d040      	beq.n	8002c1c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0201 	orr.w	r2, r2, #1
 8002ba8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002baa:	4b1f      	ldr	r3, [pc, #124]	; (8002c28 <ADC_Enable+0xac>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1f      	ldr	r2, [pc, #124]	; (8002c2c <ADC_Enable+0xb0>)
 8002bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb4:	0c9b      	lsrs	r3, r3, #18
 8002bb6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bb8:	e002      	b.n	8002bc0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f9      	bne.n	8002bba <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bc6:	f7ff fc13 	bl	80023f0 <HAL_GetTick>
 8002bca:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bcc:	e01f      	b.n	8002c0e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bce:	f7ff fc0f 	bl	80023f0 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d918      	bls.n	8002c0e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d011      	beq.n	8002c0e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bee:	f043 0210 	orr.w	r2, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfa:	f043 0201 	orr.w	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e007      	b.n	8002c1e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d1d8      	bne.n	8002bce <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000094 	.word	0x20000094
 8002c2c:	431bde83 	.word	0x431bde83

08002c30 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d12e      	bne.n	8002ca8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 0201 	bic.w	r2, r2, #1
 8002c58:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c5a:	f7ff fbc9 	bl	80023f0 <HAL_GetTick>
 8002c5e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c60:	e01b      	b.n	8002c9a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c62:	f7ff fbc5 	bl	80023f0 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d914      	bls.n	8002c9a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d10d      	bne.n	8002c9a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c82:	f043 0210 	orr.w	r2, r3, #16
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8e:	f043 0201 	orr.w	r2, r3, #1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e007      	b.n	8002caa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d0dc      	beq.n	8002c62 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002cb4:	b590      	push	{r4, r7, lr}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_ADCEx_Calibration_Start+0x1e>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e095      	b.n	8002dfe <HAL_ADCEx_Calibration_Start+0x14a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff ffa8 	bl	8002c30 <ADC_ConversionStop_Disable>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002ce4:	7dfb      	ldrb	r3, [r7, #23]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f040 8084 	bne.w	8002df4 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cf4:	f023 0302 	bic.w	r3, r3, #2
 8002cf8:	f043 0202 	orr.w	r2, r3, #2
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002d00:	4b41      	ldr	r3, [pc, #260]	; (8002e08 <HAL_ADCEx_Calibration_Start+0x154>)
 8002d02:	681c      	ldr	r4, [r3, #0]
 8002d04:	2002      	movs	r0, #2
 8002d06:	f001 f8f3 	bl	8003ef0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002d10:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002d12:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002d14:	e002      	b.n	8002d1c <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f9      	bne.n	8002d16 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff ff2a 	bl	8002b7c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 0208 	orr.w	r2, r2, #8
 8002d36:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002d38:	f7ff fb5a 	bl	80023f0 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002d3e:	e01b      	b.n	8002d78 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002d40:	f7ff fb56 	bl	80023f0 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b0a      	cmp	r3, #10
 8002d4c:	d914      	bls.n	8002d78 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00d      	beq.n	8002d78 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	f023 0312 	bic.w	r3, r3, #18
 8002d64:	f043 0210 	orr.w	r2, r3, #16
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e042      	b.n	8002dfe <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1dc      	bne.n	8002d40 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0204 	orr.w	r2, r2, #4
 8002d94:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002d96:	f7ff fb2b 	bl	80023f0 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002d9c:	e01b      	b.n	8002dd6 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002d9e:	f7ff fb27 	bl	80023f0 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b0a      	cmp	r3, #10
 8002daa:	d914      	bls.n	8002dd6 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00d      	beq.n	8002dd6 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	f023 0312 	bic.w	r3, r3, #18
 8002dc2:	f043 0210 	orr.w	r2, r3, #16
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e013      	b.n	8002dfe <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1dc      	bne.n	8002d9e <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	f023 0303 	bic.w	r3, r3, #3
 8002dec:	f043 0201 	orr.w	r2, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	371c      	adds	r7, #28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd90      	pop	{r4, r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000094 	.word	0x20000094

08002e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <__NVIC_SetPriorityGrouping+0x44>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e28:	4013      	ands	r3, r2
 8002e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e3e:	4a04      	ldr	r2, [pc, #16]	; (8002e50 <__NVIC_SetPriorityGrouping+0x44>)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	60d3      	str	r3, [r2, #12]
}
 8002e44:	bf00      	nop
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e58:	4b04      	ldr	r3, [pc, #16]	; (8002e6c <__NVIC_GetPriorityGrouping+0x18>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	0a1b      	lsrs	r3, r3, #8
 8002e5e:	f003 0307 	and.w	r3, r3, #7
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	db0b      	blt.n	8002e9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	f003 021f 	and.w	r2, r3, #31
 8002e88:	4906      	ldr	r1, [pc, #24]	; (8002ea4 <__NVIC_EnableIRQ+0x34>)
 8002e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	2001      	movs	r0, #1
 8002e92:	fa00 f202 	lsl.w	r2, r0, r2
 8002e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr
 8002ea4:	e000e100 	.word	0xe000e100

08002ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	6039      	str	r1, [r7, #0]
 8002eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	db0a      	blt.n	8002ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	490c      	ldr	r1, [pc, #48]	; (8002ef4 <__NVIC_SetPriority+0x4c>)
 8002ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec6:	0112      	lsls	r2, r2, #4
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	440b      	add	r3, r1
 8002ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ed0:	e00a      	b.n	8002ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	4908      	ldr	r1, [pc, #32]	; (8002ef8 <__NVIC_SetPriority+0x50>)
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	3b04      	subs	r3, #4
 8002ee0:	0112      	lsls	r2, r2, #4
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	761a      	strb	r2, [r3, #24]
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	e000e100 	.word	0xe000e100
 8002ef8:	e000ed00 	.word	0xe000ed00

08002efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b089      	sub	sp, #36	; 0x24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f1c3 0307 	rsb	r3, r3, #7
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	bf28      	it	cs
 8002f1a:	2304      	movcs	r3, #4
 8002f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	3304      	adds	r3, #4
 8002f22:	2b06      	cmp	r3, #6
 8002f24:	d902      	bls.n	8002f2c <NVIC_EncodePriority+0x30>
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3b03      	subs	r3, #3
 8002f2a:	e000      	b.n	8002f2e <NVIC_EncodePriority+0x32>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f30:	f04f 32ff 	mov.w	r2, #4294967295
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43da      	mvns	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	401a      	ands	r2, r3
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f44:	f04f 31ff 	mov.w	r1, #4294967295
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4e:	43d9      	mvns	r1, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f54:	4313      	orrs	r3, r2
         );
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3724      	adds	r7, #36	; 0x24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr

08002f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f70:	d301      	bcc.n	8002f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f72:	2301      	movs	r3, #1
 8002f74:	e00f      	b.n	8002f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f76:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <SysTick_Config+0x40>)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f7e:	210f      	movs	r1, #15
 8002f80:	f04f 30ff 	mov.w	r0, #4294967295
 8002f84:	f7ff ff90 	bl	8002ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f88:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <SysTick_Config+0x40>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f8e:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <SysTick_Config+0x40>)
 8002f90:	2207      	movs	r2, #7
 8002f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	e000e010 	.word	0xe000e010

08002fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff ff2d 	bl	8002e0c <__NVIC_SetPriorityGrouping>
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b086      	sub	sp, #24
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fcc:	f7ff ff42 	bl	8002e54 <__NVIC_GetPriorityGrouping>
 8002fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	6978      	ldr	r0, [r7, #20]
 8002fd8:	f7ff ff90 	bl	8002efc <NVIC_EncodePriority>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff ff5f 	bl	8002ea8 <__NVIC_SetPriority>
}
 8002fea:	bf00      	nop
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff ff35 	bl	8002e70 <__NVIC_EnableIRQ>
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff ffa2 	bl	8002f60 <SysTick_Config>
 800301c:	4603      	mov	r3, r0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003026:	b480      	push	{r7}
 8003028:	b085      	sub	sp, #20
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003038:	2b02      	cmp	r3, #2
 800303a:	d008      	beq.n	800304e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2204      	movs	r2, #4
 8003040:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e020      	b.n	8003090 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 020e 	bic.w	r2, r2, #14
 800305c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0201 	bic.w	r2, r2, #1
 800306c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003076:	2101      	movs	r1, #1
 8003078:	fa01 f202 	lsl.w	r2, r1, r2
 800307c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800308e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr
	...

0800309c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d005      	beq.n	80030be <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2204      	movs	r2, #4
 80030b6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
 80030bc:	e051      	b.n	8003162 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 020e 	bic.w	r2, r2, #14
 80030cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0201 	bic.w	r2, r2, #1
 80030dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a22      	ldr	r2, [pc, #136]	; (800316c <HAL_DMA_Abort_IT+0xd0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d029      	beq.n	800313c <HAL_DMA_Abort_IT+0xa0>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a20      	ldr	r2, [pc, #128]	; (8003170 <HAL_DMA_Abort_IT+0xd4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d022      	beq.n	8003138 <HAL_DMA_Abort_IT+0x9c>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a1f      	ldr	r2, [pc, #124]	; (8003174 <HAL_DMA_Abort_IT+0xd8>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d01a      	beq.n	8003132 <HAL_DMA_Abort_IT+0x96>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a1d      	ldr	r2, [pc, #116]	; (8003178 <HAL_DMA_Abort_IT+0xdc>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d012      	beq.n	800312c <HAL_DMA_Abort_IT+0x90>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1c      	ldr	r2, [pc, #112]	; (800317c <HAL_DMA_Abort_IT+0xe0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d00a      	beq.n	8003126 <HAL_DMA_Abort_IT+0x8a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a1a      	ldr	r2, [pc, #104]	; (8003180 <HAL_DMA_Abort_IT+0xe4>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d102      	bne.n	8003120 <HAL_DMA_Abort_IT+0x84>
 800311a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800311e:	e00e      	b.n	800313e <HAL_DMA_Abort_IT+0xa2>
 8003120:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003124:	e00b      	b.n	800313e <HAL_DMA_Abort_IT+0xa2>
 8003126:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800312a:	e008      	b.n	800313e <HAL_DMA_Abort_IT+0xa2>
 800312c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003130:	e005      	b.n	800313e <HAL_DMA_Abort_IT+0xa2>
 8003132:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003136:	e002      	b.n	800313e <HAL_DMA_Abort_IT+0xa2>
 8003138:	2310      	movs	r3, #16
 800313a:	e000      	b.n	800313e <HAL_DMA_Abort_IT+0xa2>
 800313c:	2301      	movs	r3, #1
 800313e:	4a11      	ldr	r2, [pc, #68]	; (8003184 <HAL_DMA_Abort_IT+0xe8>)
 8003140:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	4798      	blx	r3
    } 
  }
  return status;
 8003162:	7bfb      	ldrb	r3, [r7, #15]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40020008 	.word	0x40020008
 8003170:	4002001c 	.word	0x4002001c
 8003174:	40020030 	.word	0x40020030
 8003178:	40020044 	.word	0x40020044
 800317c:	40020058 	.word	0x40020058
 8003180:	4002006c 	.word	0x4002006c
 8003184:	40020000 	.word	0x40020000

08003188 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003188:	b480      	push	{r7}
 800318a:	b08b      	sub	sp, #44	; 0x2c
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003192:	2300      	movs	r3, #0
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003196:	2300      	movs	r3, #0
 8003198:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800319a:	e169      	b.n	8003470 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800319c:	2201      	movs	r2, #1
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	f040 8158 	bne.w	800346a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	4a9a      	ldr	r2, [pc, #616]	; (8003428 <HAL_GPIO_Init+0x2a0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d05e      	beq.n	8003282 <HAL_GPIO_Init+0xfa>
 80031c4:	4a98      	ldr	r2, [pc, #608]	; (8003428 <HAL_GPIO_Init+0x2a0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d875      	bhi.n	80032b6 <HAL_GPIO_Init+0x12e>
 80031ca:	4a98      	ldr	r2, [pc, #608]	; (800342c <HAL_GPIO_Init+0x2a4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d058      	beq.n	8003282 <HAL_GPIO_Init+0xfa>
 80031d0:	4a96      	ldr	r2, [pc, #600]	; (800342c <HAL_GPIO_Init+0x2a4>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d86f      	bhi.n	80032b6 <HAL_GPIO_Init+0x12e>
 80031d6:	4a96      	ldr	r2, [pc, #600]	; (8003430 <HAL_GPIO_Init+0x2a8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d052      	beq.n	8003282 <HAL_GPIO_Init+0xfa>
 80031dc:	4a94      	ldr	r2, [pc, #592]	; (8003430 <HAL_GPIO_Init+0x2a8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d869      	bhi.n	80032b6 <HAL_GPIO_Init+0x12e>
 80031e2:	4a94      	ldr	r2, [pc, #592]	; (8003434 <HAL_GPIO_Init+0x2ac>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d04c      	beq.n	8003282 <HAL_GPIO_Init+0xfa>
 80031e8:	4a92      	ldr	r2, [pc, #584]	; (8003434 <HAL_GPIO_Init+0x2ac>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d863      	bhi.n	80032b6 <HAL_GPIO_Init+0x12e>
 80031ee:	4a92      	ldr	r2, [pc, #584]	; (8003438 <HAL_GPIO_Init+0x2b0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d046      	beq.n	8003282 <HAL_GPIO_Init+0xfa>
 80031f4:	4a90      	ldr	r2, [pc, #576]	; (8003438 <HAL_GPIO_Init+0x2b0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d85d      	bhi.n	80032b6 <HAL_GPIO_Init+0x12e>
 80031fa:	2b12      	cmp	r3, #18
 80031fc:	d82a      	bhi.n	8003254 <HAL_GPIO_Init+0xcc>
 80031fe:	2b12      	cmp	r3, #18
 8003200:	d859      	bhi.n	80032b6 <HAL_GPIO_Init+0x12e>
 8003202:	a201      	add	r2, pc, #4	; (adr r2, 8003208 <HAL_GPIO_Init+0x80>)
 8003204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003208:	08003283 	.word	0x08003283
 800320c:	0800325d 	.word	0x0800325d
 8003210:	0800326f 	.word	0x0800326f
 8003214:	080032b1 	.word	0x080032b1
 8003218:	080032b7 	.word	0x080032b7
 800321c:	080032b7 	.word	0x080032b7
 8003220:	080032b7 	.word	0x080032b7
 8003224:	080032b7 	.word	0x080032b7
 8003228:	080032b7 	.word	0x080032b7
 800322c:	080032b7 	.word	0x080032b7
 8003230:	080032b7 	.word	0x080032b7
 8003234:	080032b7 	.word	0x080032b7
 8003238:	080032b7 	.word	0x080032b7
 800323c:	080032b7 	.word	0x080032b7
 8003240:	080032b7 	.word	0x080032b7
 8003244:	080032b7 	.word	0x080032b7
 8003248:	080032b7 	.word	0x080032b7
 800324c:	08003265 	.word	0x08003265
 8003250:	08003279 	.word	0x08003279
 8003254:	4a79      	ldr	r2, [pc, #484]	; (800343c <HAL_GPIO_Init+0x2b4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d013      	beq.n	8003282 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800325a:	e02c      	b.n	80032b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	623b      	str	r3, [r7, #32]
          break;
 8003262:	e029      	b.n	80032b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	3304      	adds	r3, #4
 800326a:	623b      	str	r3, [r7, #32]
          break;
 800326c:	e024      	b.n	80032b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	3308      	adds	r3, #8
 8003274:	623b      	str	r3, [r7, #32]
          break;
 8003276:	e01f      	b.n	80032b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	330c      	adds	r3, #12
 800327e:	623b      	str	r3, [r7, #32]
          break;
 8003280:	e01a      	b.n	80032b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d102      	bne.n	8003290 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800328a:	2304      	movs	r3, #4
 800328c:	623b      	str	r3, [r7, #32]
          break;
 800328e:	e013      	b.n	80032b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d105      	bne.n	80032a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003298:	2308      	movs	r3, #8
 800329a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69fa      	ldr	r2, [r7, #28]
 80032a0:	611a      	str	r2, [r3, #16]
          break;
 80032a2:	e009      	b.n	80032b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032a4:	2308      	movs	r3, #8
 80032a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69fa      	ldr	r2, [r7, #28]
 80032ac:	615a      	str	r2, [r3, #20]
          break;
 80032ae:	e003      	b.n	80032b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032b0:	2300      	movs	r3, #0
 80032b2:	623b      	str	r3, [r7, #32]
          break;
 80032b4:	e000      	b.n	80032b8 <HAL_GPIO_Init+0x130>
          break;
 80032b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	2bff      	cmp	r3, #255	; 0xff
 80032bc:	d801      	bhi.n	80032c2 <HAL_GPIO_Init+0x13a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	e001      	b.n	80032c6 <HAL_GPIO_Init+0x13e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3304      	adds	r3, #4
 80032c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	2bff      	cmp	r3, #255	; 0xff
 80032cc:	d802      	bhi.n	80032d4 <HAL_GPIO_Init+0x14c>
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	e002      	b.n	80032da <HAL_GPIO_Init+0x152>
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	3b08      	subs	r3, #8
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	210f      	movs	r1, #15
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	fa01 f303 	lsl.w	r3, r1, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	401a      	ands	r2, r3
 80032ec:	6a39      	ldr	r1, [r7, #32]
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	fa01 f303 	lsl.w	r3, r1, r3
 80032f4:	431a      	orrs	r2, r3
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 80b1 	beq.w	800346a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003308:	4b4d      	ldr	r3, [pc, #308]	; (8003440 <HAL_GPIO_Init+0x2b8>)
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	4a4c      	ldr	r2, [pc, #304]	; (8003440 <HAL_GPIO_Init+0x2b8>)
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	6193      	str	r3, [r2, #24]
 8003314:	4b4a      	ldr	r3, [pc, #296]	; (8003440 <HAL_GPIO_Init+0x2b8>)
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003320:	4a48      	ldr	r2, [pc, #288]	; (8003444 <HAL_GPIO_Init+0x2bc>)
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	089b      	lsrs	r3, r3, #2
 8003326:	3302      	adds	r3, #2
 8003328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800332c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	220f      	movs	r2, #15
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4013      	ands	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a40      	ldr	r2, [pc, #256]	; (8003448 <HAL_GPIO_Init+0x2c0>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d013      	beq.n	8003374 <HAL_GPIO_Init+0x1ec>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a3f      	ldr	r2, [pc, #252]	; (800344c <HAL_GPIO_Init+0x2c4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00d      	beq.n	8003370 <HAL_GPIO_Init+0x1e8>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a3e      	ldr	r2, [pc, #248]	; (8003450 <HAL_GPIO_Init+0x2c8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d007      	beq.n	800336c <HAL_GPIO_Init+0x1e4>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a3d      	ldr	r2, [pc, #244]	; (8003454 <HAL_GPIO_Init+0x2cc>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d101      	bne.n	8003368 <HAL_GPIO_Init+0x1e0>
 8003364:	2303      	movs	r3, #3
 8003366:	e006      	b.n	8003376 <HAL_GPIO_Init+0x1ee>
 8003368:	2304      	movs	r3, #4
 800336a:	e004      	b.n	8003376 <HAL_GPIO_Init+0x1ee>
 800336c:	2302      	movs	r3, #2
 800336e:	e002      	b.n	8003376 <HAL_GPIO_Init+0x1ee>
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <HAL_GPIO_Init+0x1ee>
 8003374:	2300      	movs	r3, #0
 8003376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003378:	f002 0203 	and.w	r2, r2, #3
 800337c:	0092      	lsls	r2, r2, #2
 800337e:	4093      	lsls	r3, r2
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003386:	492f      	ldr	r1, [pc, #188]	; (8003444 <HAL_GPIO_Init+0x2bc>)
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	089b      	lsrs	r3, r3, #2
 800338c:	3302      	adds	r3, #2
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d006      	beq.n	80033ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80033a0:	4b2d      	ldr	r3, [pc, #180]	; (8003458 <HAL_GPIO_Init+0x2d0>)
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	492c      	ldr	r1, [pc, #176]	; (8003458 <HAL_GPIO_Init+0x2d0>)
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	600b      	str	r3, [r1, #0]
 80033ac:	e006      	b.n	80033bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80033ae:	4b2a      	ldr	r3, [pc, #168]	; (8003458 <HAL_GPIO_Init+0x2d0>)
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	43db      	mvns	r3, r3
 80033b6:	4928      	ldr	r1, [pc, #160]	; (8003458 <HAL_GPIO_Init+0x2d0>)
 80033b8:	4013      	ands	r3, r2
 80033ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d006      	beq.n	80033d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033c8:	4b23      	ldr	r3, [pc, #140]	; (8003458 <HAL_GPIO_Init+0x2d0>)
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	4922      	ldr	r1, [pc, #136]	; (8003458 <HAL_GPIO_Init+0x2d0>)
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	604b      	str	r3, [r1, #4]
 80033d4:	e006      	b.n	80033e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80033d6:	4b20      	ldr	r3, [pc, #128]	; (8003458 <HAL_GPIO_Init+0x2d0>)
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	43db      	mvns	r3, r3
 80033de:	491e      	ldr	r1, [pc, #120]	; (8003458 <HAL_GPIO_Init+0x2d0>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d006      	beq.n	80033fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033f0:	4b19      	ldr	r3, [pc, #100]	; (8003458 <HAL_GPIO_Init+0x2d0>)
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	4918      	ldr	r1, [pc, #96]	; (8003458 <HAL_GPIO_Init+0x2d0>)
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	608b      	str	r3, [r1, #8]
 80033fc:	e006      	b.n	800340c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033fe:	4b16      	ldr	r3, [pc, #88]	; (8003458 <HAL_GPIO_Init+0x2d0>)
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	43db      	mvns	r3, r3
 8003406:	4914      	ldr	r1, [pc, #80]	; (8003458 <HAL_GPIO_Init+0x2d0>)
 8003408:	4013      	ands	r3, r2
 800340a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d021      	beq.n	800345c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003418:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <HAL_GPIO_Init+0x2d0>)
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	490e      	ldr	r1, [pc, #56]	; (8003458 <HAL_GPIO_Init+0x2d0>)
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	4313      	orrs	r3, r2
 8003422:	60cb      	str	r3, [r1, #12]
 8003424:	e021      	b.n	800346a <HAL_GPIO_Init+0x2e2>
 8003426:	bf00      	nop
 8003428:	10320000 	.word	0x10320000
 800342c:	10310000 	.word	0x10310000
 8003430:	10220000 	.word	0x10220000
 8003434:	10210000 	.word	0x10210000
 8003438:	10120000 	.word	0x10120000
 800343c:	10110000 	.word	0x10110000
 8003440:	40021000 	.word	0x40021000
 8003444:	40010000 	.word	0x40010000
 8003448:	40010800 	.word	0x40010800
 800344c:	40010c00 	.word	0x40010c00
 8003450:	40011000 	.word	0x40011000
 8003454:	40011400 	.word	0x40011400
 8003458:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <HAL_GPIO_Init+0x304>)
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	43db      	mvns	r3, r3
 8003464:	4909      	ldr	r1, [pc, #36]	; (800348c <HAL_GPIO_Init+0x304>)
 8003466:	4013      	ands	r3, r2
 8003468:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	3301      	adds	r3, #1
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	fa22 f303 	lsr.w	r3, r2, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	f47f ae8e 	bne.w	800319c <HAL_GPIO_Init+0x14>
  }
}
 8003480:	bf00      	nop
 8003482:	bf00      	nop
 8003484:	372c      	adds	r7, #44	; 0x2c
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr
 800348c:	40010400 	.word	0x40010400

08003490 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	887b      	ldrh	r3, [r7, #2]
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034a8:	2301      	movs	r3, #1
 80034aa:	73fb      	strb	r3, [r7, #15]
 80034ac:	e001      	b.n	80034b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034ae:	2300      	movs	r3, #0
 80034b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr

080034be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	460b      	mov	r3, r1
 80034c8:	807b      	strh	r3, [r7, #2]
 80034ca:	4613      	mov	r3, r2
 80034cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034ce:	787b      	ldrb	r3, [r7, #1]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034d4:	887a      	ldrh	r2, [r7, #2]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80034da:	e003      	b.n	80034e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80034dc:	887b      	ldrh	r3, [r7, #2]
 80034de:	041a      	lsls	r2, r3, #16
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	611a      	str	r2, [r3, #16]
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr

080034ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b085      	sub	sp, #20
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	460b      	mov	r3, r1
 80034f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003500:	887a      	ldrh	r2, [r7, #2]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	4013      	ands	r3, r2
 8003506:	041a      	lsls	r2, r3, #16
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	43d9      	mvns	r1, r3
 800350c:	887b      	ldrh	r3, [r7, #2]
 800350e:	400b      	ands	r3, r1
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	611a      	str	r2, [r3, #16]
}
 8003516:	bf00      	nop
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr

08003520 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800352a:	4b08      	ldr	r3, [pc, #32]	; (800354c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800352c:	695a      	ldr	r2, [r3, #20]
 800352e:	88fb      	ldrh	r3, [r7, #6]
 8003530:	4013      	ands	r3, r2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d006      	beq.n	8003544 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003536:	4a05      	ldr	r2, [pc, #20]	; (800354c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800353c:	88fb      	ldrh	r3, [r7, #6]
 800353e:	4618      	mov	r0, r3
 8003540:	f7fe f926 	bl	8001790 <HAL_GPIO_EXTI_Callback>
  }
}
 8003544:	bf00      	nop
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40010400 	.word	0x40010400

08003550 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e272      	b.n	8003a48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 8087 	beq.w	800367e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003570:	4b92      	ldr	r3, [pc, #584]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 030c 	and.w	r3, r3, #12
 8003578:	2b04      	cmp	r3, #4
 800357a:	d00c      	beq.n	8003596 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800357c:	4b8f      	ldr	r3, [pc, #572]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f003 030c 	and.w	r3, r3, #12
 8003584:	2b08      	cmp	r3, #8
 8003586:	d112      	bne.n	80035ae <HAL_RCC_OscConfig+0x5e>
 8003588:	4b8c      	ldr	r3, [pc, #560]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003594:	d10b      	bne.n	80035ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003596:	4b89      	ldr	r3, [pc, #548]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d06c      	beq.n	800367c <HAL_RCC_OscConfig+0x12c>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d168      	bne.n	800367c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e24c      	b.n	8003a48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b6:	d106      	bne.n	80035c6 <HAL_RCC_OscConfig+0x76>
 80035b8:	4b80      	ldr	r3, [pc, #512]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a7f      	ldr	r2, [pc, #508]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 80035be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c2:	6013      	str	r3, [r2, #0]
 80035c4:	e02e      	b.n	8003624 <HAL_RCC_OscConfig+0xd4>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10c      	bne.n	80035e8 <HAL_RCC_OscConfig+0x98>
 80035ce:	4b7b      	ldr	r3, [pc, #492]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a7a      	ldr	r2, [pc, #488]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 80035d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	4b78      	ldr	r3, [pc, #480]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a77      	ldr	r2, [pc, #476]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 80035e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	e01d      	b.n	8003624 <HAL_RCC_OscConfig+0xd4>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f0:	d10c      	bne.n	800360c <HAL_RCC_OscConfig+0xbc>
 80035f2:	4b72      	ldr	r3, [pc, #456]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a71      	ldr	r2, [pc, #452]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 80035f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	4b6f      	ldr	r3, [pc, #444]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a6e      	ldr	r2, [pc, #440]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 8003604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	e00b      	b.n	8003624 <HAL_RCC_OscConfig+0xd4>
 800360c:	4b6b      	ldr	r3, [pc, #428]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a6a      	ldr	r2, [pc, #424]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 8003612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	4b68      	ldr	r3, [pc, #416]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a67      	ldr	r2, [pc, #412]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 800361e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003622:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d013      	beq.n	8003654 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362c:	f7fe fee0 	bl	80023f0 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003634:	f7fe fedc 	bl	80023f0 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b64      	cmp	r3, #100	; 0x64
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e200      	b.n	8003a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003646:	4b5d      	ldr	r3, [pc, #372]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCC_OscConfig+0xe4>
 8003652:	e014      	b.n	800367e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003654:	f7fe fecc 	bl	80023f0 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800365c:	f7fe fec8 	bl	80023f0 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b64      	cmp	r3, #100	; 0x64
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e1ec      	b.n	8003a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366e:	4b53      	ldr	r3, [pc, #332]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x10c>
 800367a:	e000      	b.n	800367e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800367c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d063      	beq.n	8003752 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800368a:	4b4c      	ldr	r3, [pc, #304]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f003 030c 	and.w	r3, r3, #12
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00b      	beq.n	80036ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003696:	4b49      	ldr	r3, [pc, #292]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d11c      	bne.n	80036dc <HAL_RCC_OscConfig+0x18c>
 80036a2:	4b46      	ldr	r3, [pc, #280]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d116      	bne.n	80036dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ae:	4b43      	ldr	r3, [pc, #268]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d005      	beq.n	80036c6 <HAL_RCC_OscConfig+0x176>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d001      	beq.n	80036c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e1c0      	b.n	8003a48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c6:	4b3d      	ldr	r3, [pc, #244]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4939      	ldr	r1, [pc, #228]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036da:	e03a      	b.n	8003752 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d020      	beq.n	8003726 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e4:	4b36      	ldr	r3, [pc, #216]	; (80037c0 <HAL_RCC_OscConfig+0x270>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ea:	f7fe fe81 	bl	80023f0 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036f2:	f7fe fe7d 	bl	80023f0 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e1a1      	b.n	8003a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003704:	4b2d      	ldr	r3, [pc, #180]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0f0      	beq.n	80036f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003710:	4b2a      	ldr	r3, [pc, #168]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	4927      	ldr	r1, [pc, #156]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 8003720:	4313      	orrs	r3, r2
 8003722:	600b      	str	r3, [r1, #0]
 8003724:	e015      	b.n	8003752 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003726:	4b26      	ldr	r3, [pc, #152]	; (80037c0 <HAL_RCC_OscConfig+0x270>)
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372c:	f7fe fe60 	bl	80023f0 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003734:	f7fe fe5c 	bl	80023f0 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e180      	b.n	8003a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003746:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f0      	bne.n	8003734 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d03a      	beq.n	80037d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d019      	beq.n	800379a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003766:	4b17      	ldr	r3, [pc, #92]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 8003768:	2201      	movs	r2, #1
 800376a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800376c:	f7fe fe40 	bl	80023f0 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003774:	f7fe fe3c 	bl	80023f0 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e160      	b.n	8003a48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003786:	4b0d      	ldr	r3, [pc, #52]	; (80037bc <HAL_RCC_OscConfig+0x26c>)
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003792:	2001      	movs	r0, #1
 8003794:	f000 fad8 	bl	8003d48 <RCC_Delay>
 8003798:	e01c      	b.n	80037d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800379a:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a0:	f7fe fe26 	bl	80023f0 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a6:	e00f      	b.n	80037c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a8:	f7fe fe22 	bl	80023f0 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d908      	bls.n	80037c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e146      	b.n	8003a48 <HAL_RCC_OscConfig+0x4f8>
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000
 80037c0:	42420000 	.word	0x42420000
 80037c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c8:	4b92      	ldr	r3, [pc, #584]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1e9      	bne.n	80037a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 80a6 	beq.w	800392e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e2:	2300      	movs	r3, #0
 80037e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e6:	4b8b      	ldr	r3, [pc, #556]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10d      	bne.n	800380e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f2:	4b88      	ldr	r3, [pc, #544]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	4a87      	ldr	r2, [pc, #540]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 80037f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fc:	61d3      	str	r3, [r2, #28]
 80037fe:	4b85      	ldr	r3, [pc, #532]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003806:	60bb      	str	r3, [r7, #8]
 8003808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800380a:	2301      	movs	r3, #1
 800380c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380e:	4b82      	ldr	r3, [pc, #520]	; (8003a18 <HAL_RCC_OscConfig+0x4c8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003816:	2b00      	cmp	r3, #0
 8003818:	d118      	bne.n	800384c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800381a:	4b7f      	ldr	r3, [pc, #508]	; (8003a18 <HAL_RCC_OscConfig+0x4c8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a7e      	ldr	r2, [pc, #504]	; (8003a18 <HAL_RCC_OscConfig+0x4c8>)
 8003820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003826:	f7fe fde3 	bl	80023f0 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800382e:	f7fe fddf 	bl	80023f0 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b64      	cmp	r3, #100	; 0x64
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e103      	b.n	8003a48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003840:	4b75      	ldr	r3, [pc, #468]	; (8003a18 <HAL_RCC_OscConfig+0x4c8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0f0      	beq.n	800382e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d106      	bne.n	8003862 <HAL_RCC_OscConfig+0x312>
 8003854:	4b6f      	ldr	r3, [pc, #444]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	4a6e      	ldr	r2, [pc, #440]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 800385a:	f043 0301 	orr.w	r3, r3, #1
 800385e:	6213      	str	r3, [r2, #32]
 8003860:	e02d      	b.n	80038be <HAL_RCC_OscConfig+0x36e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10c      	bne.n	8003884 <HAL_RCC_OscConfig+0x334>
 800386a:	4b6a      	ldr	r3, [pc, #424]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	4a69      	ldr	r2, [pc, #420]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 8003870:	f023 0301 	bic.w	r3, r3, #1
 8003874:	6213      	str	r3, [r2, #32]
 8003876:	4b67      	ldr	r3, [pc, #412]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	4a66      	ldr	r2, [pc, #408]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 800387c:	f023 0304 	bic.w	r3, r3, #4
 8003880:	6213      	str	r3, [r2, #32]
 8003882:	e01c      	b.n	80038be <HAL_RCC_OscConfig+0x36e>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	2b05      	cmp	r3, #5
 800388a:	d10c      	bne.n	80038a6 <HAL_RCC_OscConfig+0x356>
 800388c:	4b61      	ldr	r3, [pc, #388]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	4a60      	ldr	r2, [pc, #384]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 8003892:	f043 0304 	orr.w	r3, r3, #4
 8003896:	6213      	str	r3, [r2, #32]
 8003898:	4b5e      	ldr	r3, [pc, #376]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	4a5d      	ldr	r2, [pc, #372]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	6213      	str	r3, [r2, #32]
 80038a4:	e00b      	b.n	80038be <HAL_RCC_OscConfig+0x36e>
 80038a6:	4b5b      	ldr	r3, [pc, #364]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	4a5a      	ldr	r2, [pc, #360]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 80038ac:	f023 0301 	bic.w	r3, r3, #1
 80038b0:	6213      	str	r3, [r2, #32]
 80038b2:	4b58      	ldr	r3, [pc, #352]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	4a57      	ldr	r2, [pc, #348]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 80038b8:	f023 0304 	bic.w	r3, r3, #4
 80038bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d015      	beq.n	80038f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c6:	f7fe fd93 	bl	80023f0 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038cc:	e00a      	b.n	80038e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ce:	f7fe fd8f 	bl	80023f0 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038dc:	4293      	cmp	r3, r2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e0b1      	b.n	8003a48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e4:	4b4b      	ldr	r3, [pc, #300]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0ee      	beq.n	80038ce <HAL_RCC_OscConfig+0x37e>
 80038f0:	e014      	b.n	800391c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f2:	f7fe fd7d 	bl	80023f0 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f8:	e00a      	b.n	8003910 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fa:	f7fe fd79 	bl	80023f0 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	f241 3288 	movw	r2, #5000	; 0x1388
 8003908:	4293      	cmp	r3, r2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e09b      	b.n	8003a48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003910:	4b40      	ldr	r3, [pc, #256]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1ee      	bne.n	80038fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800391c:	7dfb      	ldrb	r3, [r7, #23]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d105      	bne.n	800392e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003922:	4b3c      	ldr	r3, [pc, #240]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	4a3b      	ldr	r2, [pc, #236]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 8003928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800392c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 8087 	beq.w	8003a46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003938:	4b36      	ldr	r3, [pc, #216]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f003 030c 	and.w	r3, r3, #12
 8003940:	2b08      	cmp	r3, #8
 8003942:	d061      	beq.n	8003a08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	2b02      	cmp	r3, #2
 800394a:	d146      	bne.n	80039da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394c:	4b33      	ldr	r3, [pc, #204]	; (8003a1c <HAL_RCC_OscConfig+0x4cc>)
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003952:	f7fe fd4d 	bl	80023f0 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800395a:	f7fe fd49 	bl	80023f0 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e06d      	b.n	8003a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800396c:	4b29      	ldr	r3, [pc, #164]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1f0      	bne.n	800395a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003980:	d108      	bne.n	8003994 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003982:	4b24      	ldr	r3, [pc, #144]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	4921      	ldr	r1, [pc, #132]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 8003990:	4313      	orrs	r3, r2
 8003992:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003994:	4b1f      	ldr	r3, [pc, #124]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a19      	ldr	r1, [r3, #32]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	430b      	orrs	r3, r1
 80039a6:	491b      	ldr	r1, [pc, #108]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ac:	4b1b      	ldr	r3, [pc, #108]	; (8003a1c <HAL_RCC_OscConfig+0x4cc>)
 80039ae:	2201      	movs	r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b2:	f7fe fd1d 	bl	80023f0 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ba:	f7fe fd19 	bl	80023f0 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e03d      	b.n	8003a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039cc:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0f0      	beq.n	80039ba <HAL_RCC_OscConfig+0x46a>
 80039d8:	e035      	b.n	8003a46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039da:	4b10      	ldr	r3, [pc, #64]	; (8003a1c <HAL_RCC_OscConfig+0x4cc>)
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e0:	f7fe fd06 	bl	80023f0 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e8:	f7fe fd02 	bl	80023f0 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e026      	b.n	8003a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039fa:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <HAL_RCC_OscConfig+0x4c4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0x498>
 8003a06:	e01e      	b.n	8003a46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d107      	bne.n	8003a20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e019      	b.n	8003a48 <HAL_RCC_OscConfig+0x4f8>
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40007000 	.word	0x40007000
 8003a1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a20:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <HAL_RCC_OscConfig+0x500>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d106      	bne.n	8003a42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d001      	beq.n	8003a46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40021000 	.word	0x40021000

08003a54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e0d0      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a68:	4b6a      	ldr	r3, [pc, #424]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d910      	bls.n	8003a98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a76:	4b67      	ldr	r3, [pc, #412]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f023 0207 	bic.w	r2, r3, #7
 8003a7e:	4965      	ldr	r1, [pc, #404]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a86:	4b63      	ldr	r3, [pc, #396]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d001      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0b8      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d020      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ab0:	4b59      	ldr	r3, [pc, #356]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	4a58      	ldr	r2, [pc, #352]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003aba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ac8:	4b53      	ldr	r3, [pc, #332]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	4a52      	ldr	r2, [pc, #328]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ace:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ad2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad4:	4b50      	ldr	r3, [pc, #320]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	494d      	ldr	r1, [pc, #308]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d040      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d107      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afa:	4b47      	ldr	r3, [pc, #284]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d115      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e07f      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d107      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b12:	4b41      	ldr	r3, [pc, #260]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d109      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e073      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b22:	4b3d      	ldr	r3, [pc, #244]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e06b      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b32:	4b39      	ldr	r3, [pc, #228]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f023 0203 	bic.w	r2, r3, #3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	4936      	ldr	r1, [pc, #216]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b44:	f7fe fc54 	bl	80023f0 <HAL_GetTick>
 8003b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4a:	e00a      	b.n	8003b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b4c:	f7fe fc50 	bl	80023f0 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e053      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b62:	4b2d      	ldr	r3, [pc, #180]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f003 020c 	and.w	r2, r3, #12
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d1eb      	bne.n	8003b4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b74:	4b27      	ldr	r3, [pc, #156]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d210      	bcs.n	8003ba4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b82:	4b24      	ldr	r3, [pc, #144]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f023 0207 	bic.w	r2, r3, #7
 8003b8a:	4922      	ldr	r1, [pc, #136]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b92:	4b20      	ldr	r3, [pc, #128]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d001      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e032      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb0:	4b19      	ldr	r3, [pc, #100]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	4916      	ldr	r1, [pc, #88]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d009      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bce:	4b12      	ldr	r3, [pc, #72]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	490e      	ldr	r1, [pc, #56]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003be2:	f000 f821 	bl	8003c28 <HAL_RCC_GetSysClockFreq>
 8003be6:	4602      	mov	r2, r0
 8003be8:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	091b      	lsrs	r3, r3, #4
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	490a      	ldr	r1, [pc, #40]	; (8003c1c <HAL_RCC_ClockConfig+0x1c8>)
 8003bf4:	5ccb      	ldrb	r3, [r1, r3]
 8003bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bfa:	4a09      	ldr	r2, [pc, #36]	; (8003c20 <HAL_RCC_ClockConfig+0x1cc>)
 8003bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bfe:	4b09      	ldr	r3, [pc, #36]	; (8003c24 <HAL_RCC_ClockConfig+0x1d0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fe fbb2 	bl	800236c <HAL_InitTick>

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40022000 	.word	0x40022000
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	080073c0 	.word	0x080073c0
 8003c20:	20000094 	.word	0x20000094
 8003c24:	20000098 	.word	0x20000098

08003c28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c28:	b490      	push	{r4, r7}
 8003c2a:	b08a      	sub	sp, #40	; 0x28
 8003c2c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c2e:	4b29      	ldr	r3, [pc, #164]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003c30:	1d3c      	adds	r4, r7, #4
 8003c32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c38:	f240 2301 	movw	r3, #513	; 0x201
 8003c3c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61fb      	str	r3, [r7, #28]
 8003c42:	2300      	movs	r3, #0
 8003c44:	61bb      	str	r3, [r7, #24]
 8003c46:	2300      	movs	r3, #0
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c52:	4b21      	ldr	r3, [pc, #132]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d002      	beq.n	8003c68 <HAL_RCC_GetSysClockFreq+0x40>
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d003      	beq.n	8003c6e <HAL_RCC_GetSysClockFreq+0x46>
 8003c66:	e02b      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c68:	4b1c      	ldr	r3, [pc, #112]	; (8003cdc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c6a:	623b      	str	r3, [r7, #32]
      break;
 8003c6c:	e02b      	b.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	0c9b      	lsrs	r3, r3, #18
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	3328      	adds	r3, #40	; 0x28
 8003c78:	443b      	add	r3, r7
 8003c7a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c7e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d012      	beq.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c8a:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	0c5b      	lsrs	r3, r3, #17
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	3328      	adds	r3, #40	; 0x28
 8003c96:	443b      	add	r3, r7
 8003c98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c9c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	4a0e      	ldr	r2, [pc, #56]	; (8003cdc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ca2:	fb03 f202 	mul.w	r2, r3, r2
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
 8003cae:	e004      	b.n	8003cba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	4a0b      	ldr	r2, [pc, #44]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cb4:	fb02 f303 	mul.w	r3, r2, r3
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	623b      	str	r3, [r7, #32]
      break;
 8003cbe:	e002      	b.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cc0:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cc2:	623b      	str	r3, [r7, #32]
      break;
 8003cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3728      	adds	r7, #40	; 0x28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bc90      	pop	{r4, r7}
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	080073a0 	.word	0x080073a0
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	007a1200 	.word	0x007a1200
 8003ce0:	003d0900 	.word	0x003d0900

08003ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ce8:	4b02      	ldr	r3, [pc, #8]	; (8003cf4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003cea:	681b      	ldr	r3, [r3, #0]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr
 8003cf4:	20000094 	.word	0x20000094

08003cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cfc:	f7ff fff2 	bl	8003ce4 <HAL_RCC_GetHCLKFreq>
 8003d00:	4602      	mov	r2, r0
 8003d02:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	0a1b      	lsrs	r3, r3, #8
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	4903      	ldr	r1, [pc, #12]	; (8003d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d0e:	5ccb      	ldrb	r3, [r1, r3]
 8003d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	080073d0 	.word	0x080073d0

08003d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d24:	f7ff ffde 	bl	8003ce4 <HAL_RCC_GetHCLKFreq>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	0adb      	lsrs	r3, r3, #11
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	4903      	ldr	r1, [pc, #12]	; (8003d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d36:	5ccb      	ldrb	r3, [r1, r3]
 8003d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40021000 	.word	0x40021000
 8003d44:	080073d0 	.word	0x080073d0

08003d48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d50:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <RCC_Delay+0x34>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a0a      	ldr	r2, [pc, #40]	; (8003d80 <RCC_Delay+0x38>)
 8003d56:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5a:	0a5b      	lsrs	r3, r3, #9
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	fb02 f303 	mul.w	r3, r2, r3
 8003d62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d64:	bf00      	nop
  }
  while (Delay --);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	1e5a      	subs	r2, r3, #1
 8003d6a:	60fa      	str	r2, [r7, #12]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1f9      	bne.n	8003d64 <RCC_Delay+0x1c>
}
 8003d70:	bf00      	nop
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr
 8003d7c:	20000094 	.word	0x20000094
 8003d80:	10624dd3 	.word	0x10624dd3

08003d84 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	613b      	str	r3, [r7, #16]
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d07d      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003da0:	2300      	movs	r3, #0
 8003da2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da4:	4b4f      	ldr	r3, [pc, #316]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10d      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db0:	4b4c      	ldr	r3, [pc, #304]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	4a4b      	ldr	r2, [pc, #300]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dba:	61d3      	str	r3, [r2, #28]
 8003dbc:	4b49      	ldr	r3, [pc, #292]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dcc:	4b46      	ldr	r3, [pc, #280]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d118      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dd8:	4b43      	ldr	r3, [pc, #268]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a42      	ldr	r2, [pc, #264]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003de4:	f7fe fb04 	bl	80023f0 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dea:	e008      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dec:	f7fe fb00 	bl	80023f0 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b64      	cmp	r3, #100	; 0x64
 8003df8:	d901      	bls.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e06d      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfe:	4b3a      	ldr	r3, [pc, #232]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0f0      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e0a:	4b36      	ldr	r3, [pc, #216]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e12:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d02e      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d027      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e28:	4b2e      	ldr	r3, [pc, #184]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e30:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e32:	4b2e      	ldr	r3, [pc, #184]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e34:	2201      	movs	r2, #1
 8003e36:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e38:	4b2c      	ldr	r3, [pc, #176]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e3e:	4a29      	ldr	r2, [pc, #164]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d014      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4e:	f7fe facf 	bl	80023f0 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e54:	e00a      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e56:	f7fe facb 	bl	80023f0 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e036      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0ee      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e78:	4b1a      	ldr	r3, [pc, #104]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	4917      	ldr	r1, [pc, #92]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e8a:	7dfb      	ldrb	r3, [r7, #23]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d105      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e90:	4b14      	ldr	r3, [pc, #80]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	4a13      	ldr	r2, [pc, #76]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d008      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ea8:	4b0e      	ldr	r3, [pc, #56]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	490b      	ldr	r1, [pc, #44]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0310 	and.w	r3, r3, #16
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d008      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ec6:	4b07      	ldr	r3, [pc, #28]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	4904      	ldr	r1, [pc, #16]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	40007000 	.word	0x40007000
 8003eec:	42420440 	.word	0x42420440

08003ef0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ef0:	b590      	push	{r4, r7, lr}
 8003ef2:	b08d      	sub	sp, #52	; 0x34
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ef8:	4b58      	ldr	r3, [pc, #352]	; (800405c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003efa:	f107 040c 	add.w	r4, r7, #12
 8003efe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f04:	f240 2301 	movw	r3, #513	; 0x201
 8003f08:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0e:	2300      	movs	r3, #0
 8003f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f12:	2300      	movs	r3, #0
 8003f14:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	61fb      	str	r3, [r7, #28]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b10      	cmp	r3, #16
 8003f22:	d00a      	beq.n	8003f3a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b10      	cmp	r3, #16
 8003f28:	f200 808e 	bhi.w	8004048 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d049      	beq.n	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d079      	beq.n	800402c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003f38:	e086      	b.n	8004048 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8003f3a:	4b49      	ldr	r3, [pc, #292]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003f40:	4b47      	ldr	r3, [pc, #284]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d07f      	beq.n	800404c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	0c9b      	lsrs	r3, r3, #18
 8003f50:	f003 030f 	and.w	r3, r3, #15
 8003f54:	3330      	adds	r3, #48	; 0x30
 8003f56:	443b      	add	r3, r7
 8003f58:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003f5c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d017      	beq.n	8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f68:	4b3d      	ldr	r3, [pc, #244]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	0c5b      	lsrs	r3, r3, #17
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	3330      	adds	r3, #48	; 0x30
 8003f74:	443b      	add	r3, r7
 8003f76:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00d      	beq.n	8003fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003f86:	4a37      	ldr	r2, [pc, #220]	; (8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	fb02 f303 	mul.w	r3, r2, r3
 8003f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f96:	e004      	b.n	8003fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	4a33      	ldr	r2, [pc, #204]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003f9c:	fb02 f303 	mul.w	r3, r2, r3
 8003fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003fa2:	4b2f      	ldr	r3, [pc, #188]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003faa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fae:	d102      	bne.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003fb4:	e04a      	b.n	800404c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	4a2c      	ldr	r2, [pc, #176]	; (800406c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc0:	085b      	lsrs	r3, r3, #1
 8003fc2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003fc4:	e042      	b.n	800404c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003fc6:	4b26      	ldr	r3, [pc, #152]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fd6:	d108      	bne.n	8003fea <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fe8:	e01f      	b.n	800402a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff4:	d109      	bne.n	800400a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003ff6:	4b1a      	ldr	r3, [pc, #104]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8004002:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004006:	62bb      	str	r3, [r7, #40]	; 0x28
 8004008:	e00f      	b.n	800402a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004010:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004014:	d11c      	bne.n	8004050 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8004016:	4b12      	ldr	r3, [pc, #72]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d016      	beq.n	8004050 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8004022:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004026:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004028:	e012      	b.n	8004050 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800402a:	e011      	b.n	8004050 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800402c:	f7ff fe78 	bl	8003d20 <HAL_RCC_GetPCLK2Freq>
 8004030:	4602      	mov	r2, r0
 8004032:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	0b9b      	lsrs	r3, r3, #14
 8004038:	f003 0303 	and.w	r3, r3, #3
 800403c:	3301      	adds	r3, #1
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	fbb2 f3f3 	udiv	r3, r2, r3
 8004044:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004046:	e004      	b.n	8004052 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004048:	bf00      	nop
 800404a:	e002      	b.n	8004052 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800404c:	bf00      	nop
 800404e:	e000      	b.n	8004052 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004050:	bf00      	nop
    }
  }
  return (frequency);
 8004052:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004054:	4618      	mov	r0, r3
 8004056:	3734      	adds	r7, #52	; 0x34
 8004058:	46bd      	mov	sp, r7
 800405a:	bd90      	pop	{r4, r7, pc}
 800405c:	080073b0 	.word	0x080073b0
 8004060:	40021000 	.word	0x40021000
 8004064:	007a1200 	.word	0x007a1200
 8004068:	003d0900 	.word	0x003d0900
 800406c:	aaaaaaab 	.word	0xaaaaaaab

08004070 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e041      	b.n	8004106 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d106      	bne.n	800409c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fd fbfa 	bl	8001890 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3304      	adds	r3, #4
 80040ac:	4619      	mov	r1, r3
 80040ae:	4610      	mov	r0, r2
 80040b0:	f000 feec 	bl	8004e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	d001      	beq.n	8004128 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e032      	b.n	800418e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a18      	ldr	r2, [pc, #96]	; (8004198 <HAL_TIM_Base_Start+0x88>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d00e      	beq.n	8004158 <HAL_TIM_Base_Start+0x48>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004142:	d009      	beq.n	8004158 <HAL_TIM_Base_Start+0x48>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a14      	ldr	r2, [pc, #80]	; (800419c <HAL_TIM_Base_Start+0x8c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d004      	beq.n	8004158 <HAL_TIM_Base_Start+0x48>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a13      	ldr	r2, [pc, #76]	; (80041a0 <HAL_TIM_Base_Start+0x90>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d111      	bne.n	800417c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2b06      	cmp	r3, #6
 8004168:	d010      	beq.n	800418c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f042 0201 	orr.w	r2, r2, #1
 8004178:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800417a:	e007      	b.n	800418c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0201 	orr.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr
 8004198:	40012c00 	.word	0x40012c00
 800419c:	40000400 	.word	0x40000400
 80041a0:	40000800 	.word	0x40000800

080041a4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6a1a      	ldr	r2, [r3, #32]
 80041b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80041b6:	4013      	ands	r3, r2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10f      	bne.n	80041dc <HAL_TIM_Base_Stop+0x38>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6a1a      	ldr	r2, [r3, #32]
 80041c2:	f240 4344 	movw	r3, #1092	; 0x444
 80041c6:	4013      	ands	r3, r2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d107      	bne.n	80041dc <HAL_TIM_Base_Stop+0x38>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0201 	bic.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bc80      	pop	{r7}
 80041ee:	4770      	bx	lr

080041f0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e041      	b.n	8004286 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f839 	bl	800428e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3304      	adds	r3, #4
 800422c:	4619      	mov	r1, r3
 800422e:	4610      	mov	r0, r2
 8004230:	f000 fe2c 	bl	8004e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	bc80      	pop	{r7}
 800429e:	4770      	bx	lr

080042a0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d109      	bne.n	80042c4 <HAL_TIM_OC_Start_IT+0x24>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	bf14      	ite	ne
 80042bc:	2301      	movne	r3, #1
 80042be:	2300      	moveq	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	e022      	b.n	800430a <HAL_TIM_OC_Start_IT+0x6a>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d109      	bne.n	80042de <HAL_TIM_OC_Start_IT+0x3e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	bf14      	ite	ne
 80042d6:	2301      	movne	r3, #1
 80042d8:	2300      	moveq	r3, #0
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	e015      	b.n	800430a <HAL_TIM_OC_Start_IT+0x6a>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d109      	bne.n	80042f8 <HAL_TIM_OC_Start_IT+0x58>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	bf14      	ite	ne
 80042f0:	2301      	movne	r3, #1
 80042f2:	2300      	moveq	r3, #0
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	e008      	b.n	800430a <HAL_TIM_OC_Start_IT+0x6a>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b01      	cmp	r3, #1
 8004302:	bf14      	ite	ne
 8004304:	2301      	movne	r3, #1
 8004306:	2300      	moveq	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e0a4      	b.n	800445c <HAL_TIM_OC_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d104      	bne.n	8004322 <HAL_TIM_OC_Start_IT+0x82>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004320:	e013      	b.n	800434a <HAL_TIM_OC_Start_IT+0xaa>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b04      	cmp	r3, #4
 8004326:	d104      	bne.n	8004332 <HAL_TIM_OC_Start_IT+0x92>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004330:	e00b      	b.n	800434a <HAL_TIM_OC_Start_IT+0xaa>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b08      	cmp	r3, #8
 8004336:	d104      	bne.n	8004342 <HAL_TIM_OC_Start_IT+0xa2>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004340:	e003      	b.n	800434a <HAL_TIM_OC_Start_IT+0xaa>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2202      	movs	r2, #2
 8004346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b0c      	cmp	r3, #12
 800434e:	d841      	bhi.n	80043d4 <HAL_TIM_OC_Start_IT+0x134>
 8004350:	a201      	add	r2, pc, #4	; (adr r2, 8004358 <HAL_TIM_OC_Start_IT+0xb8>)
 8004352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004356:	bf00      	nop
 8004358:	0800438d 	.word	0x0800438d
 800435c:	080043d5 	.word	0x080043d5
 8004360:	080043d5 	.word	0x080043d5
 8004364:	080043d5 	.word	0x080043d5
 8004368:	0800439f 	.word	0x0800439f
 800436c:	080043d5 	.word	0x080043d5
 8004370:	080043d5 	.word	0x080043d5
 8004374:	080043d5 	.word	0x080043d5
 8004378:	080043b1 	.word	0x080043b1
 800437c:	080043d5 	.word	0x080043d5
 8004380:	080043d5 	.word	0x080043d5
 8004384:	080043d5 	.word	0x080043d5
 8004388:	080043c3 	.word	0x080043c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0202 	orr.w	r2, r2, #2
 800439a:	60da      	str	r2, [r3, #12]
      break;
 800439c:	e01b      	b.n	80043d6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0204 	orr.w	r2, r2, #4
 80043ac:	60da      	str	r2, [r3, #12]
      break;
 80043ae:	e012      	b.n	80043d6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0208 	orr.w	r2, r2, #8
 80043be:	60da      	str	r2, [r3, #12]
      break;
 80043c0:	e009      	b.n	80043d6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0210 	orr.w	r2, r2, #16
 80043d0:	60da      	str	r2, [r3, #12]
      break;
 80043d2:	e000      	b.n	80043d6 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 80043d4:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2201      	movs	r2, #1
 80043dc:	6839      	ldr	r1, [r7, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 ffd4 	bl	800538c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a1e      	ldr	r2, [pc, #120]	; (8004464 <HAL_TIM_OC_Start_IT+0x1c4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d107      	bne.n	80043fe <HAL_TIM_OC_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a18      	ldr	r2, [pc, #96]	; (8004464 <HAL_TIM_OC_Start_IT+0x1c4>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d00e      	beq.n	8004426 <HAL_TIM_OC_Start_IT+0x186>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004410:	d009      	beq.n	8004426 <HAL_TIM_OC_Start_IT+0x186>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a14      	ldr	r2, [pc, #80]	; (8004468 <HAL_TIM_OC_Start_IT+0x1c8>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d004      	beq.n	8004426 <HAL_TIM_OC_Start_IT+0x186>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a12      	ldr	r2, [pc, #72]	; (800446c <HAL_TIM_OC_Start_IT+0x1cc>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d111      	bne.n	800444a <HAL_TIM_OC_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2b06      	cmp	r3, #6
 8004436:	d010      	beq.n	800445a <HAL_TIM_OC_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0201 	orr.w	r2, r2, #1
 8004446:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004448:	e007      	b.n	800445a <HAL_TIM_OC_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f042 0201 	orr.w	r2, r2, #1
 8004458:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40012c00 	.word	0x40012c00
 8004468:	40000400 	.word	0x40000400
 800446c:	40000800 	.word	0x40000800

08004470 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b0c      	cmp	r3, #12
 800447e:	d841      	bhi.n	8004504 <HAL_TIM_OC_Stop_IT+0x94>
 8004480:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <HAL_TIM_OC_Stop_IT+0x18>)
 8004482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004486:	bf00      	nop
 8004488:	080044bd 	.word	0x080044bd
 800448c:	08004505 	.word	0x08004505
 8004490:	08004505 	.word	0x08004505
 8004494:	08004505 	.word	0x08004505
 8004498:	080044cf 	.word	0x080044cf
 800449c:	08004505 	.word	0x08004505
 80044a0:	08004505 	.word	0x08004505
 80044a4:	08004505 	.word	0x08004505
 80044a8:	080044e1 	.word	0x080044e1
 80044ac:	08004505 	.word	0x08004505
 80044b0:	08004505 	.word	0x08004505
 80044b4:	08004505 	.word	0x08004505
 80044b8:	080044f3 	.word	0x080044f3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0202 	bic.w	r2, r2, #2
 80044ca:	60da      	str	r2, [r3, #12]
      break;
 80044cc:	e01b      	b.n	8004506 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0204 	bic.w	r2, r2, #4
 80044dc:	60da      	str	r2, [r3, #12]
      break;
 80044de:	e012      	b.n	8004506 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0208 	bic.w	r2, r2, #8
 80044ee:	60da      	str	r2, [r3, #12]
      break;
 80044f0:	e009      	b.n	8004506 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0210 	bic.w	r2, r2, #16
 8004500:	60da      	str	r2, [r3, #12]
      break;
 8004502:	e000      	b.n	8004506 <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8004504:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2200      	movs	r2, #0
 800450c:	6839      	ldr	r1, [r7, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f000 ff3c 	bl	800538c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a29      	ldr	r2, [pc, #164]	; (80045c0 <HAL_TIM_OC_Stop_IT+0x150>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d117      	bne.n	800454e <HAL_TIM_OC_Stop_IT+0xde>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6a1a      	ldr	r2, [r3, #32]
 8004524:	f241 1311 	movw	r3, #4369	; 0x1111
 8004528:	4013      	ands	r3, r2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10f      	bne.n	800454e <HAL_TIM_OC_Stop_IT+0xde>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6a1a      	ldr	r2, [r3, #32]
 8004534:	f240 4344 	movw	r3, #1092	; 0x444
 8004538:	4013      	ands	r3, r2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d107      	bne.n	800454e <HAL_TIM_OC_Stop_IT+0xde>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800454c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6a1a      	ldr	r2, [r3, #32]
 8004554:	f241 1311 	movw	r3, #4369	; 0x1111
 8004558:	4013      	ands	r3, r2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10f      	bne.n	800457e <HAL_TIM_OC_Stop_IT+0x10e>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6a1a      	ldr	r2, [r3, #32]
 8004564:	f240 4344 	movw	r3, #1092	; 0x444
 8004568:	4013      	ands	r3, r2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d107      	bne.n	800457e <HAL_TIM_OC_Stop_IT+0x10e>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0201 	bic.w	r2, r2, #1
 800457c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d104      	bne.n	800458e <HAL_TIM_OC_Stop_IT+0x11e>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800458c:	e013      	b.n	80045b6 <HAL_TIM_OC_Stop_IT+0x146>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b04      	cmp	r3, #4
 8004592:	d104      	bne.n	800459e <HAL_TIM_OC_Stop_IT+0x12e>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800459c:	e00b      	b.n	80045b6 <HAL_TIM_OC_Stop_IT+0x146>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d104      	bne.n	80045ae <HAL_TIM_OC_Stop_IT+0x13e>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045ac:	e003      	b.n	80045b6 <HAL_TIM_OC_Stop_IT+0x146>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40012c00 	.word	0x40012c00

080045c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e041      	b.n	800465a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f839 	bl	8004662 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3304      	adds	r3, #4
 8004600:	4619      	mov	r1, r3
 8004602:	4610      	mov	r0, r2
 8004604:	f000 fc42 	bl	8004e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr

08004674 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d109      	bne.n	8004698 <HAL_TIM_PWM_Start+0x24>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b01      	cmp	r3, #1
 800468e:	bf14      	ite	ne
 8004690:	2301      	movne	r3, #1
 8004692:	2300      	moveq	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	e022      	b.n	80046de <HAL_TIM_PWM_Start+0x6a>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b04      	cmp	r3, #4
 800469c:	d109      	bne.n	80046b2 <HAL_TIM_PWM_Start+0x3e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	bf14      	ite	ne
 80046aa:	2301      	movne	r3, #1
 80046ac:	2300      	moveq	r3, #0
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	e015      	b.n	80046de <HAL_TIM_PWM_Start+0x6a>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d109      	bne.n	80046cc <HAL_TIM_PWM_Start+0x58>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	bf14      	ite	ne
 80046c4:	2301      	movne	r3, #1
 80046c6:	2300      	moveq	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	e008      	b.n	80046de <HAL_TIM_PWM_Start+0x6a>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	bf14      	ite	ne
 80046d8:	2301      	movne	r3, #1
 80046da:	2300      	moveq	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e05e      	b.n	80047a4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d104      	bne.n	80046f6 <HAL_TIM_PWM_Start+0x82>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046f4:	e013      	b.n	800471e <HAL_TIM_PWM_Start+0xaa>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d104      	bne.n	8004706 <HAL_TIM_PWM_Start+0x92>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004704:	e00b      	b.n	800471e <HAL_TIM_PWM_Start+0xaa>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b08      	cmp	r3, #8
 800470a:	d104      	bne.n	8004716 <HAL_TIM_PWM_Start+0xa2>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004714:	e003      	b.n	800471e <HAL_TIM_PWM_Start+0xaa>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2202      	movs	r2, #2
 800471a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2201      	movs	r2, #1
 8004724:	6839      	ldr	r1, [r7, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fe30 	bl	800538c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a1e      	ldr	r2, [pc, #120]	; (80047ac <HAL_TIM_PWM_Start+0x138>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d107      	bne.n	8004746 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004744:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a18      	ldr	r2, [pc, #96]	; (80047ac <HAL_TIM_PWM_Start+0x138>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d00e      	beq.n	800476e <HAL_TIM_PWM_Start+0xfa>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004758:	d009      	beq.n	800476e <HAL_TIM_PWM_Start+0xfa>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a14      	ldr	r2, [pc, #80]	; (80047b0 <HAL_TIM_PWM_Start+0x13c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d004      	beq.n	800476e <HAL_TIM_PWM_Start+0xfa>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a12      	ldr	r2, [pc, #72]	; (80047b4 <HAL_TIM_PWM_Start+0x140>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d111      	bne.n	8004792 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2b06      	cmp	r3, #6
 800477e:	d010      	beq.n	80047a2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0201 	orr.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004790:	e007      	b.n	80047a2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f042 0201 	orr.w	r2, r2, #1
 80047a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40012c00 	.word	0x40012c00
 80047b0:	40000400 	.word	0x40000400
 80047b4:	40000800 	.word	0x40000800

080047b8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2200      	movs	r2, #0
 80047c8:	6839      	ldr	r1, [r7, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fdde 	bl	800538c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a29      	ldr	r2, [pc, #164]	; (800487c <HAL_TIM_PWM_Stop+0xc4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d117      	bne.n	800480a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6a1a      	ldr	r2, [r3, #32]
 80047e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80047e4:	4013      	ands	r3, r2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10f      	bne.n	800480a <HAL_TIM_PWM_Stop+0x52>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6a1a      	ldr	r2, [r3, #32]
 80047f0:	f240 4344 	movw	r3, #1092	; 0x444
 80047f4:	4013      	ands	r3, r2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d107      	bne.n	800480a <HAL_TIM_PWM_Stop+0x52>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004808:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6a1a      	ldr	r2, [r3, #32]
 8004810:	f241 1311 	movw	r3, #4369	; 0x1111
 8004814:	4013      	ands	r3, r2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10f      	bne.n	800483a <HAL_TIM_PWM_Stop+0x82>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6a1a      	ldr	r2, [r3, #32]
 8004820:	f240 4344 	movw	r3, #1092	; 0x444
 8004824:	4013      	ands	r3, r2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d107      	bne.n	800483a <HAL_TIM_PWM_Stop+0x82>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0201 	bic.w	r2, r2, #1
 8004838:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d104      	bne.n	800484a <HAL_TIM_PWM_Stop+0x92>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004848:	e013      	b.n	8004872 <HAL_TIM_PWM_Stop+0xba>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b04      	cmp	r3, #4
 800484e:	d104      	bne.n	800485a <HAL_TIM_PWM_Stop+0xa2>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004858:	e00b      	b.n	8004872 <HAL_TIM_PWM_Stop+0xba>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b08      	cmp	r3, #8
 800485e:	d104      	bne.n	800486a <HAL_TIM_PWM_Stop+0xb2>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004868:	e003      	b.n	8004872 <HAL_TIM_PWM_Stop+0xba>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40012c00 	.word	0x40012c00

08004880 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b02      	cmp	r3, #2
 8004894:	d122      	bne.n	80048dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d11b      	bne.n	80048dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0202 	mvn.w	r2, #2
 80048ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fac7 	bl	8004e56 <HAL_TIM_IC_CaptureCallback>
 80048c8:	e005      	b.n	80048d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fc fe70 	bl	80015b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 fac9 	bl	8004e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d122      	bne.n	8004930 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d11b      	bne.n	8004930 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0204 	mvn.w	r2, #4
 8004900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2202      	movs	r2, #2
 8004906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fa9d 	bl	8004e56 <HAL_TIM_IC_CaptureCallback>
 800491c:	e005      	b.n	800492a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fc fe46 	bl	80015b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 fa9f 	bl	8004e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b08      	cmp	r3, #8
 800493c:	d122      	bne.n	8004984 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b08      	cmp	r3, #8
 800494a:	d11b      	bne.n	8004984 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f06f 0208 	mvn.w	r2, #8
 8004954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2204      	movs	r2, #4
 800495a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fa73 	bl	8004e56 <HAL_TIM_IC_CaptureCallback>
 8004970:	e005      	b.n	800497e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fc fe1c 	bl	80015b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 fa75 	bl	8004e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f003 0310 	and.w	r3, r3, #16
 800498e:	2b10      	cmp	r3, #16
 8004990:	d122      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f003 0310 	and.w	r3, r3, #16
 800499c:	2b10      	cmp	r3, #16
 800499e:	d11b      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0210 	mvn.w	r2, #16
 80049a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2208      	movs	r2, #8
 80049ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fa49 	bl	8004e56 <HAL_TIM_IC_CaptureCallback>
 80049c4:	e005      	b.n	80049d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fc fdf2 	bl	80015b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 fa4b 	bl	8004e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d10e      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d107      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0201 	mvn.w	r2, #1
 80049fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fa20 	bl	8004e44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0e:	2b80      	cmp	r3, #128	; 0x80
 8004a10:	d10e      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1c:	2b80      	cmp	r3, #128	; 0x80
 8004a1e:	d107      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 fd39 	bl	80054a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3a:	2b40      	cmp	r3, #64	; 0x40
 8004a3c:	d10e      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a48:	2b40      	cmp	r3, #64	; 0x40
 8004a4a:	d107      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fa0f 	bl	8004e7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	f003 0320 	and.w	r3, r3, #32
 8004a66:	2b20      	cmp	r3, #32
 8004a68:	d10e      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f003 0320 	and.w	r3, r3, #32
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d107      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f06f 0220 	mvn.w	r2, #32
 8004a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 fd04 	bl	8005490 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a88:	bf00      	nop
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_TIM_OC_ConfigChannel+0x1a>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e046      	b.n	8004b38 <HAL_TIM_OC_ConfigChannel+0xa8>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b0c      	cmp	r3, #12
 8004ab6:	d839      	bhi.n	8004b2c <HAL_TIM_OC_ConfigChannel+0x9c>
 8004ab8:	a201      	add	r2, pc, #4	; (adr r2, 8004ac0 <HAL_TIM_OC_ConfigChannel+0x30>)
 8004aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abe:	bf00      	nop
 8004ac0:	08004af5 	.word	0x08004af5
 8004ac4:	08004b2d 	.word	0x08004b2d
 8004ac8:	08004b2d 	.word	0x08004b2d
 8004acc:	08004b2d 	.word	0x08004b2d
 8004ad0:	08004b03 	.word	0x08004b03
 8004ad4:	08004b2d 	.word	0x08004b2d
 8004ad8:	08004b2d 	.word	0x08004b2d
 8004adc:	08004b2d 	.word	0x08004b2d
 8004ae0:	08004b11 	.word	0x08004b11
 8004ae4:	08004b2d 	.word	0x08004b2d
 8004ae8:	08004b2d 	.word	0x08004b2d
 8004aec:	08004b2d 	.word	0x08004b2d
 8004af0:	08004b1f 	.word	0x08004b1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fa28 	bl	8004f50 <TIM_OC1_SetConfig>
      break;
 8004b00:	e015      	b.n	8004b2e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 fa87 	bl	800501c <TIM_OC2_SetConfig>
      break;
 8004b0e:	e00e      	b.n	8004b2e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68b9      	ldr	r1, [r7, #8]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 faea 	bl	80050f0 <TIM_OC3_SetConfig>
      break;
 8004b1c:	e007      	b.n	8004b2e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68b9      	ldr	r1, [r7, #8]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 fb4d 	bl	80051c4 <TIM_OC4_SetConfig>
      break;
 8004b2a:	e000      	b.n	8004b2e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004b2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d101      	bne.n	8004b5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e0ac      	b.n	8004cb4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b0c      	cmp	r3, #12
 8004b66:	f200 809f 	bhi.w	8004ca8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004b6a:	a201      	add	r2, pc, #4	; (adr r2, 8004b70 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b70:	08004ba5 	.word	0x08004ba5
 8004b74:	08004ca9 	.word	0x08004ca9
 8004b78:	08004ca9 	.word	0x08004ca9
 8004b7c:	08004ca9 	.word	0x08004ca9
 8004b80:	08004be5 	.word	0x08004be5
 8004b84:	08004ca9 	.word	0x08004ca9
 8004b88:	08004ca9 	.word	0x08004ca9
 8004b8c:	08004ca9 	.word	0x08004ca9
 8004b90:	08004c27 	.word	0x08004c27
 8004b94:	08004ca9 	.word	0x08004ca9
 8004b98:	08004ca9 	.word	0x08004ca9
 8004b9c:	08004ca9 	.word	0x08004ca9
 8004ba0:	08004c67 	.word	0x08004c67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68b9      	ldr	r1, [r7, #8]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 f9d0 	bl	8004f50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699a      	ldr	r2, [r3, #24]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0208 	orr.w	r2, r2, #8
 8004bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699a      	ldr	r2, [r3, #24]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0204 	bic.w	r2, r2, #4
 8004bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6999      	ldr	r1, [r3, #24]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	691a      	ldr	r2, [r3, #16]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	619a      	str	r2, [r3, #24]
      break;
 8004be2:	e062      	b.n	8004caa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68b9      	ldr	r1, [r7, #8]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fa16 	bl	800501c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699a      	ldr	r2, [r3, #24]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699a      	ldr	r2, [r3, #24]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6999      	ldr	r1, [r3, #24]
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	021a      	lsls	r2, r3, #8
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	619a      	str	r2, [r3, #24]
      break;
 8004c24:	e041      	b.n	8004caa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68b9      	ldr	r1, [r7, #8]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 fa5f 	bl	80050f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	69da      	ldr	r2, [r3, #28]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f042 0208 	orr.w	r2, r2, #8
 8004c40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	69da      	ldr	r2, [r3, #28]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 0204 	bic.w	r2, r2, #4
 8004c50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69d9      	ldr	r1, [r3, #28]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	61da      	str	r2, [r3, #28]
      break;
 8004c64:	e021      	b.n	8004caa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68b9      	ldr	r1, [r7, #8]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 faa9 	bl	80051c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69da      	ldr	r2, [r3, #28]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69da      	ldr	r2, [r3, #28]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	69d9      	ldr	r1, [r3, #28]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	021a      	lsls	r2, r3, #8
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	61da      	str	r2, [r3, #28]
      break;
 8004ca6:	e000      	b.n	8004caa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004ca8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d101      	bne.n	8004cd4 <HAL_TIM_ConfigClockSource+0x18>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e0b3      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x180>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cf2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cfa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d0c:	d03e      	beq.n	8004d8c <HAL_TIM_ConfigClockSource+0xd0>
 8004d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d12:	f200 8087 	bhi.w	8004e24 <HAL_TIM_ConfigClockSource+0x168>
 8004d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d1a:	f000 8085 	beq.w	8004e28 <HAL_TIM_ConfigClockSource+0x16c>
 8004d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d22:	d87f      	bhi.n	8004e24 <HAL_TIM_ConfigClockSource+0x168>
 8004d24:	2b70      	cmp	r3, #112	; 0x70
 8004d26:	d01a      	beq.n	8004d5e <HAL_TIM_ConfigClockSource+0xa2>
 8004d28:	2b70      	cmp	r3, #112	; 0x70
 8004d2a:	d87b      	bhi.n	8004e24 <HAL_TIM_ConfigClockSource+0x168>
 8004d2c:	2b60      	cmp	r3, #96	; 0x60
 8004d2e:	d050      	beq.n	8004dd2 <HAL_TIM_ConfigClockSource+0x116>
 8004d30:	2b60      	cmp	r3, #96	; 0x60
 8004d32:	d877      	bhi.n	8004e24 <HAL_TIM_ConfigClockSource+0x168>
 8004d34:	2b50      	cmp	r3, #80	; 0x50
 8004d36:	d03c      	beq.n	8004db2 <HAL_TIM_ConfigClockSource+0xf6>
 8004d38:	2b50      	cmp	r3, #80	; 0x50
 8004d3a:	d873      	bhi.n	8004e24 <HAL_TIM_ConfigClockSource+0x168>
 8004d3c:	2b40      	cmp	r3, #64	; 0x40
 8004d3e:	d058      	beq.n	8004df2 <HAL_TIM_ConfigClockSource+0x136>
 8004d40:	2b40      	cmp	r3, #64	; 0x40
 8004d42:	d86f      	bhi.n	8004e24 <HAL_TIM_ConfigClockSource+0x168>
 8004d44:	2b30      	cmp	r3, #48	; 0x30
 8004d46:	d064      	beq.n	8004e12 <HAL_TIM_ConfigClockSource+0x156>
 8004d48:	2b30      	cmp	r3, #48	; 0x30
 8004d4a:	d86b      	bhi.n	8004e24 <HAL_TIM_ConfigClockSource+0x168>
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	d060      	beq.n	8004e12 <HAL_TIM_ConfigClockSource+0x156>
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d867      	bhi.n	8004e24 <HAL_TIM_ConfigClockSource+0x168>
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d05c      	beq.n	8004e12 <HAL_TIM_ConfigClockSource+0x156>
 8004d58:	2b10      	cmp	r3, #16
 8004d5a:	d05a      	beq.n	8004e12 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004d5c:	e062      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6818      	ldr	r0, [r3, #0]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	6899      	ldr	r1, [r3, #8]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f000 faee 	bl	800534e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d80:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	609a      	str	r2, [r3, #8]
      break;
 8004d8a:	e04e      	b.n	8004e2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6818      	ldr	r0, [r3, #0]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	6899      	ldr	r1, [r3, #8]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f000 fad7 	bl	800534e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dae:	609a      	str	r2, [r3, #8]
      break;
 8004db0:	e03b      	b.n	8004e2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6818      	ldr	r0, [r3, #0]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	6859      	ldr	r1, [r3, #4]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	f000 fa4e 	bl	8005260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2150      	movs	r1, #80	; 0x50
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 faa5 	bl	800531a <TIM_ITRx_SetConfig>
      break;
 8004dd0:	e02b      	b.n	8004e2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6818      	ldr	r0, [r3, #0]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	6859      	ldr	r1, [r3, #4]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	461a      	mov	r2, r3
 8004de0:	f000 fa6c 	bl	80052bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2160      	movs	r1, #96	; 0x60
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fa95 	bl	800531a <TIM_ITRx_SetConfig>
      break;
 8004df0:	e01b      	b.n	8004e2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6818      	ldr	r0, [r3, #0]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	6859      	ldr	r1, [r3, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f000 fa2e 	bl	8005260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2140      	movs	r1, #64	; 0x40
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 fa85 	bl	800531a <TIM_ITRx_SetConfig>
      break;
 8004e10:	e00b      	b.n	8004e2a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	4610      	mov	r0, r2
 8004e1e:	f000 fa7c 	bl	800531a <TIM_ITRx_SetConfig>
        break;
 8004e22:	e002      	b.n	8004e2a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004e24:	bf00      	nop
 8004e26:	e000      	b.n	8004e2a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004e28:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bc80      	pop	{r7}
 8004e54:	4770      	bx	lr

08004e56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bc80      	pop	{r7}
 8004e66:	4770      	bx	lr

08004e68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bc80      	pop	{r7}
 8004e78:	4770      	bx	lr

08004e7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bc80      	pop	{r7}
 8004e8a:	4770      	bx	lr

08004e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a29      	ldr	r2, [pc, #164]	; (8004f44 <TIM_Base_SetConfig+0xb8>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00b      	beq.n	8004ebc <TIM_Base_SetConfig+0x30>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eaa:	d007      	beq.n	8004ebc <TIM_Base_SetConfig+0x30>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a26      	ldr	r2, [pc, #152]	; (8004f48 <TIM_Base_SetConfig+0xbc>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d003      	beq.n	8004ebc <TIM_Base_SetConfig+0x30>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a25      	ldr	r2, [pc, #148]	; (8004f4c <TIM_Base_SetConfig+0xc0>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d108      	bne.n	8004ece <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a1c      	ldr	r2, [pc, #112]	; (8004f44 <TIM_Base_SetConfig+0xb8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00b      	beq.n	8004eee <TIM_Base_SetConfig+0x62>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004edc:	d007      	beq.n	8004eee <TIM_Base_SetConfig+0x62>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a19      	ldr	r2, [pc, #100]	; (8004f48 <TIM_Base_SetConfig+0xbc>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d003      	beq.n	8004eee <TIM_Base_SetConfig+0x62>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a18      	ldr	r2, [pc, #96]	; (8004f4c <TIM_Base_SetConfig+0xc0>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d108      	bne.n	8004f00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a07      	ldr	r2, [pc, #28]	; (8004f44 <TIM_Base_SetConfig+0xb8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d103      	bne.n	8004f34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	691a      	ldr	r2, [r3, #16]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	615a      	str	r2, [r3, #20]
}
 8004f3a:	bf00      	nop
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr
 8004f44:	40012c00 	.word	0x40012c00
 8004f48:	40000400 	.word	0x40000400
 8004f4c:	40000800 	.word	0x40000800

08004f50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	f023 0201 	bic.w	r2, r3, #1
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 0303 	bic.w	r3, r3, #3
 8004f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f023 0302 	bic.w	r3, r3, #2
 8004f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a1c      	ldr	r2, [pc, #112]	; (8005018 <TIM_OC1_SetConfig+0xc8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d10c      	bne.n	8004fc6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f023 0308 	bic.w	r3, r3, #8
 8004fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f023 0304 	bic.w	r3, r3, #4
 8004fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a13      	ldr	r2, [pc, #76]	; (8005018 <TIM_OC1_SetConfig+0xc8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d111      	bne.n	8004ff2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	621a      	str	r2, [r3, #32]
}
 800500c:	bf00      	nop
 800500e:	371c      	adds	r7, #28
 8005010:	46bd      	mov	sp, r7
 8005012:	bc80      	pop	{r7}
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40012c00 	.word	0x40012c00

0800501c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	f023 0210 	bic.w	r2, r3, #16
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800504a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	021b      	lsls	r3, r3, #8
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f023 0320 	bic.w	r3, r3, #32
 8005066:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a1d      	ldr	r2, [pc, #116]	; (80050ec <TIM_OC2_SetConfig+0xd0>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d10d      	bne.n	8005098 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005082:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005096:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a14      	ldr	r2, [pc, #80]	; (80050ec <TIM_OC2_SetConfig+0xd0>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d113      	bne.n	80050c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	621a      	str	r2, [r3, #32]
}
 80050e2:	bf00      	nop
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bc80      	pop	{r7}
 80050ea:	4770      	bx	lr
 80050ec:	40012c00 	.word	0x40012c00

080050f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0303 	bic.w	r3, r3, #3
 8005126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	021b      	lsls	r3, r3, #8
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a1d      	ldr	r2, [pc, #116]	; (80051c0 <TIM_OC3_SetConfig+0xd0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d10d      	bne.n	800516a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005154:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	021b      	lsls	r3, r3, #8
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	4313      	orrs	r3, r2
 8005160:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005168:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a14      	ldr	r2, [pc, #80]	; (80051c0 <TIM_OC3_SetConfig+0xd0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d113      	bne.n	800519a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	621a      	str	r2, [r3, #32]
}
 80051b4:	bf00      	nop
 80051b6:	371c      	adds	r7, #28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bc80      	pop	{r7}
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40012c00 	.word	0x40012c00

080051c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800520e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	031b      	lsls	r3, r3, #12
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a0f      	ldr	r2, [pc, #60]	; (800525c <TIM_OC4_SetConfig+0x98>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d109      	bne.n	8005238 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800522a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	019b      	lsls	r3, r3, #6
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	621a      	str	r2, [r3, #32]
}
 8005252:	bf00      	nop
 8005254:	371c      	adds	r7, #28
 8005256:	46bd      	mov	sp, r7
 8005258:	bc80      	pop	{r7}
 800525a:	4770      	bx	lr
 800525c:	40012c00 	.word	0x40012c00

08005260 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	f023 0201 	bic.w	r2, r3, #1
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800528a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f023 030a 	bic.w	r3, r3, #10
 800529c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	621a      	str	r2, [r3, #32]
}
 80052b2:	bf00      	nop
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bc80      	pop	{r7}
 80052ba:	4770      	bx	lr

080052bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	f023 0210 	bic.w	r2, r3, #16
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	031b      	lsls	r3, r3, #12
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	4313      	orrs	r3, r2
 8005302:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	621a      	str	r2, [r3, #32]
}
 8005310:	bf00      	nop
 8005312:	371c      	adds	r7, #28
 8005314:	46bd      	mov	sp, r7
 8005316:	bc80      	pop	{r7}
 8005318:	4770      	bx	lr

0800531a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800531a:	b480      	push	{r7}
 800531c:	b085      	sub	sp, #20
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005330:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	f043 0307 	orr.w	r3, r3, #7
 800533c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	609a      	str	r2, [r3, #8]
}
 8005344:	bf00      	nop
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr

0800534e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800534e:	b480      	push	{r7}
 8005350:	b087      	sub	sp, #28
 8005352:	af00      	add	r7, sp, #0
 8005354:	60f8      	str	r0, [r7, #12]
 8005356:	60b9      	str	r1, [r7, #8]
 8005358:	607a      	str	r2, [r7, #4]
 800535a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005368:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	021a      	lsls	r2, r3, #8
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	431a      	orrs	r2, r3
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	4313      	orrs	r3, r2
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	4313      	orrs	r3, r2
 800537a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	609a      	str	r2, [r3, #8]
}
 8005382:	bf00      	nop
 8005384:	371c      	adds	r7, #28
 8005386:	46bd      	mov	sp, r7
 8005388:	bc80      	pop	{r7}
 800538a:	4770      	bx	lr

0800538c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f003 031f 	and.w	r3, r3, #31
 800539e:	2201      	movs	r2, #1
 80053a0:	fa02 f303 	lsl.w	r3, r2, r3
 80053a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6a1a      	ldr	r2, [r3, #32]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	43db      	mvns	r3, r3
 80053ae:	401a      	ands	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6a1a      	ldr	r2, [r3, #32]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f003 031f 	and.w	r3, r3, #31
 80053be:	6879      	ldr	r1, [r7, #4]
 80053c0:	fa01 f303 	lsl.w	r3, r1, r3
 80053c4:	431a      	orrs	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	621a      	str	r2, [r3, #32]
}
 80053ca:	bf00      	nop
 80053cc:	371c      	adds	r7, #28
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr

080053d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d101      	bne.n	80053ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053e8:	2302      	movs	r3, #2
 80053ea:	e046      	b.n	800547a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a16      	ldr	r2, [pc, #88]	; (8005484 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d00e      	beq.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005438:	d009      	beq.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a12      	ldr	r2, [pc, #72]	; (8005488 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d004      	beq.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a10      	ldr	r2, [pc, #64]	; (800548c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d10c      	bne.n	8005468 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005454:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	4313      	orrs	r3, r2
 800545e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	bc80      	pop	{r7}
 8005482:	4770      	bx	lr
 8005484:	40012c00 	.word	0x40012c00
 8005488:	40000400 	.word	0x40000400
 800548c:	40000800 	.word	0x40000800

08005490 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr

080054a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr

080054b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e03f      	b.n	8005546 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d106      	bne.n	80054e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7fc f9f4 	bl	80018c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2224      	movs	r2, #36	; 0x24
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 fc85 	bl	8005e08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	691a      	ldr	r2, [r3, #16]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800550c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	695a      	ldr	r2, [r3, #20]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800551c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800552c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2220      	movs	r2, #32
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2220      	movs	r2, #32
 8005540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b08a      	sub	sp, #40	; 0x28
 8005552:	af02      	add	r7, sp, #8
 8005554:	60f8      	str	r0, [r7, #12]
 8005556:	60b9      	str	r1, [r7, #8]
 8005558:	603b      	str	r3, [r7, #0]
 800555a:	4613      	mov	r3, r2
 800555c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b20      	cmp	r3, #32
 800556c:	d17c      	bne.n	8005668 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <HAL_UART_Transmit+0x2c>
 8005574:	88fb      	ldrh	r3, [r7, #6]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e075      	b.n	800566a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005584:	2b01      	cmp	r3, #1
 8005586:	d101      	bne.n	800558c <HAL_UART_Transmit+0x3e>
 8005588:	2302      	movs	r3, #2
 800558a:	e06e      	b.n	800566a <HAL_UART_Transmit+0x11c>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2221      	movs	r2, #33	; 0x21
 800559e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055a2:	f7fc ff25 	bl	80023f0 <HAL_GetTick>
 80055a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	88fa      	ldrh	r2, [r7, #6]
 80055ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	88fa      	ldrh	r2, [r7, #6]
 80055b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055bc:	d108      	bne.n	80055d0 <HAL_UART_Transmit+0x82>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d104      	bne.n	80055d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80055c6:	2300      	movs	r3, #0
 80055c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	61bb      	str	r3, [r7, #24]
 80055ce:	e003      	b.n	80055d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055d4:	2300      	movs	r3, #0
 80055d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80055e0:	e02a      	b.n	8005638 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2200      	movs	r2, #0
 80055ea:	2180      	movs	r1, #128	; 0x80
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f000 fa38 	bl	8005a62 <UART_WaitOnFlagUntilTimeout>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e036      	b.n	800566a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10b      	bne.n	800561a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005610:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	3302      	adds	r3, #2
 8005616:	61bb      	str	r3, [r7, #24]
 8005618:	e007      	b.n	800562a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	781a      	ldrb	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	3301      	adds	r3, #1
 8005628:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800563c:	b29b      	uxth	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1cf      	bne.n	80055e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2200      	movs	r2, #0
 800564a:	2140      	movs	r1, #64	; 0x40
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 fa08 	bl	8005a62 <UART_WaitOnFlagUntilTimeout>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e006      	b.n	800566a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2220      	movs	r2, #32
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005664:	2300      	movs	r3, #0
 8005666:	e000      	b.n	800566a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005668:	2302      	movs	r3, #2
  }
}
 800566a:	4618      	mov	r0, r3
 800566c:	3720      	adds	r7, #32
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b084      	sub	sp, #16
 8005676:	af00      	add	r7, sp, #0
 8005678:	60f8      	str	r0, [r7, #12]
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	4613      	mov	r3, r2
 800567e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b20      	cmp	r3, #32
 800568a:	d11d      	bne.n	80056c8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d002      	beq.n	8005698 <HAL_UART_Receive_IT+0x26>
 8005692:	88fb      	ldrh	r3, [r7, #6]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e016      	b.n	80056ca <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d101      	bne.n	80056aa <HAL_UART_Receive_IT+0x38>
 80056a6:	2302      	movs	r3, #2
 80056a8:	e00f      	b.n	80056ca <HAL_UART_Receive_IT+0x58>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80056b8:	88fb      	ldrh	r3, [r7, #6]
 80056ba:	461a      	mov	r2, r3
 80056bc:	68b9      	ldr	r1, [r7, #8]
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 fa19 	bl	8005af6 <UART_Start_Receive_IT>
 80056c4:	4603      	mov	r3, r0
 80056c6:	e000      	b.n	80056ca <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80056c8:	2302      	movs	r3, #2
  }
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
	...

080056d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b08a      	sub	sp, #40	; 0x28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10d      	bne.n	8005726 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	f003 0320 	and.w	r3, r3, #32
 8005710:	2b00      	cmp	r3, #0
 8005712:	d008      	beq.n	8005726 <HAL_UART_IRQHandler+0x52>
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	f003 0320 	and.w	r3, r3, #32
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fac9 	bl	8005cb6 <UART_Receive_IT>
      return;
 8005724:	e17b      	b.n	8005a1e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 80b1 	beq.w	8005890 <HAL_UART_IRQHandler+0x1bc>
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	d105      	bne.n	8005744 <HAL_UART_IRQHandler+0x70>
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800573e:	2b00      	cmp	r3, #0
 8005740:	f000 80a6 	beq.w	8005890 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00a      	beq.n	8005764 <HAL_UART_IRQHandler+0x90>
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005754:	2b00      	cmp	r3, #0
 8005756:	d005      	beq.n	8005764 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575c:	f043 0201 	orr.w	r2, r3, #1
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	f003 0304 	and.w	r3, r3, #4
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <HAL_UART_IRQHandler+0xb0>
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b00      	cmp	r3, #0
 8005776:	d005      	beq.n	8005784 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577c:	f043 0202 	orr.w	r2, r3, #2
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <HAL_UART_IRQHandler+0xd0>
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	d005      	beq.n	80057a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579c:	f043 0204 	orr.w	r2, r3, #4
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	f003 0308 	and.w	r3, r3, #8
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00f      	beq.n	80057ce <HAL_UART_IRQHandler+0xfa>
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	f003 0320 	and.w	r3, r3, #32
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d104      	bne.n	80057c2 <HAL_UART_IRQHandler+0xee>
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d005      	beq.n	80057ce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	f043 0208 	orr.w	r2, r3, #8
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f000 811e 	beq.w	8005a14 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	f003 0320 	and.w	r3, r3, #32
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d007      	beq.n	80057f2 <HAL_UART_IRQHandler+0x11e>
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	f003 0320 	and.w	r3, r3, #32
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 fa62 	bl	8005cb6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	bf14      	ite	ne
 8005800:	2301      	movne	r3, #1
 8005802:	2300      	moveq	r3, #0
 8005804:	b2db      	uxtb	r3, r3
 8005806:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	f003 0308 	and.w	r3, r3, #8
 8005810:	2b00      	cmp	r3, #0
 8005812:	d102      	bne.n	800581a <HAL_UART_IRQHandler+0x146>
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d031      	beq.n	800587e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f9a4 	bl	8005b68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582a:	2b00      	cmp	r3, #0
 800582c:	d023      	beq.n	8005876 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	695a      	ldr	r2, [r3, #20]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800583c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005842:	2b00      	cmp	r3, #0
 8005844:	d013      	beq.n	800586e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584a:	4a76      	ldr	r2, [pc, #472]	; (8005a24 <HAL_UART_IRQHandler+0x350>)
 800584c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005852:	4618      	mov	r0, r3
 8005854:	f7fd fc22 	bl	800309c <HAL_DMA_Abort_IT>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d016      	beq.n	800588c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005868:	4610      	mov	r0, r2
 800586a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800586c:	e00e      	b.n	800588c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f8e3 	bl	8005a3a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005874:	e00a      	b.n	800588c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f8df 	bl	8005a3a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800587c:	e006      	b.n	800588c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f8db 	bl	8005a3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800588a:	e0c3      	b.n	8005a14 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800588c:	bf00      	nop
    return;
 800588e:	e0c1      	b.n	8005a14 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005894:	2b01      	cmp	r3, #1
 8005896:	f040 80a1 	bne.w	80059dc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	f003 0310 	and.w	r3, r3, #16
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 809b 	beq.w	80059dc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	f003 0310 	and.w	r3, r3, #16
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 8095 	beq.w	80059dc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058b2:	2300      	movs	r3, #0
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d04e      	beq.n	8005974 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80058e0:	8a3b      	ldrh	r3, [r7, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 8098 	beq.w	8005a18 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058ec:	8a3a      	ldrh	r2, [r7, #16]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	f080 8092 	bcs.w	8005a18 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	8a3a      	ldrh	r2, [r7, #16]
 80058f8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	2b20      	cmp	r3, #32
 8005902:	d02b      	beq.n	800595c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005912:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695a      	ldr	r2, [r3, #20]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0201 	bic.w	r2, r2, #1
 8005922:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695a      	ldr	r2, [r3, #20]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005932:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2220      	movs	r2, #32
 8005938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68da      	ldr	r2, [r3, #12]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0210 	bic.w	r2, r2, #16
 8005950:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005956:	4618      	mov	r0, r3
 8005958:	f7fd fb65 	bl	8003026 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005964:	b29b      	uxth	r3, r3
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	b29b      	uxth	r3, r3
 800596a:	4619      	mov	r1, r3
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f86d 	bl	8005a4c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005972:	e051      	b.n	8005a18 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800597c:	b29b      	uxth	r3, r3
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005986:	b29b      	uxth	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d047      	beq.n	8005a1c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800598c:	8a7b      	ldrh	r3, [r7, #18]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d044      	beq.n	8005a1c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059a0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695a      	ldr	r2, [r3, #20]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0201 	bic.w	r2, r2, #1
 80059b0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 0210 	bic.w	r2, r2, #16
 80059ce:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059d0:	8a7b      	ldrh	r3, [r7, #18]
 80059d2:	4619      	mov	r1, r3
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 f839 	bl	8005a4c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80059da:	e01f      	b.n	8005a1c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d008      	beq.n	80059f8 <HAL_UART_IRQHandler+0x324>
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f8f9 	bl	8005be8 <UART_Transmit_IT>
    return;
 80059f6:	e012      	b.n	8005a1e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00d      	beq.n	8005a1e <HAL_UART_IRQHandler+0x34a>
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d008      	beq.n	8005a1e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f93a 	bl	8005c86 <UART_EndTransmit_IT>
    return;
 8005a12:	e004      	b.n	8005a1e <HAL_UART_IRQHandler+0x34a>
    return;
 8005a14:	bf00      	nop
 8005a16:	e002      	b.n	8005a1e <HAL_UART_IRQHandler+0x34a>
      return;
 8005a18:	bf00      	nop
 8005a1a:	e000      	b.n	8005a1e <HAL_UART_IRQHandler+0x34a>
      return;
 8005a1c:	bf00      	nop
  }
}
 8005a1e:	3728      	adds	r7, #40	; 0x28
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	08005bc1 	.word	0x08005bc1

08005a28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bc80      	pop	{r7}
 8005a38:	4770      	bx	lr

08005a3a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a42:	bf00      	nop
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bc80      	pop	{r7}
 8005a4a:	4770      	bx	lr

08005a4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	460b      	mov	r3, r1
 8005a56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bc80      	pop	{r7}
 8005a60:	4770      	bx	lr

08005a62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b084      	sub	sp, #16
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	60f8      	str	r0, [r7, #12]
 8005a6a:	60b9      	str	r1, [r7, #8]
 8005a6c:	603b      	str	r3, [r7, #0]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a72:	e02c      	b.n	8005ace <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7a:	d028      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d007      	beq.n	8005a92 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a82:	f7fc fcb5 	bl	80023f0 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d21d      	bcs.n	8005ace <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68da      	ldr	r2, [r3, #12]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005aa0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	695a      	ldr	r2, [r3, #20]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 0201 	bic.w	r2, r2, #1
 8005ab0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e00f      	b.n	8005aee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	bf0c      	ite	eq
 8005ade:	2301      	moveq	r3, #1
 8005ae0:	2300      	movne	r3, #0
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d0c3      	beq.n	8005a74 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b085      	sub	sp, #20
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	4613      	mov	r3, r2
 8005b02:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	88fa      	ldrh	r2, [r7, #6]
 8005b0e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	88fa      	ldrh	r2, [r7, #6]
 8005b14:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2222      	movs	r2, #34	; 0x22
 8005b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b3a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695a      	ldr	r2, [r3, #20]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0201 	orr.w	r2, r2, #1
 8005b4a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 0220 	orr.w	r2, r2, #32
 8005b5a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bc80      	pop	{r7}
 8005b66:	4770      	bx	lr

08005b68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b7e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	695a      	ldr	r2, [r3, #20]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0201 	bic.w	r2, r2, #1
 8005b8e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d107      	bne.n	8005ba8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 0210 	bic.w	r2, r2, #16
 8005ba6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2220      	movs	r2, #32
 8005bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bc80      	pop	{r7}
 8005bbe:	4770      	bx	lr

08005bc0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f7ff ff2d 	bl	8005a3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005be0:	bf00      	nop
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b21      	cmp	r3, #33	; 0x21
 8005bfa:	d13e      	bne.n	8005c7a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c04:	d114      	bne.n	8005c30 <UART_Transmit_IT+0x48>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d110      	bne.n	8005c30 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c22:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	1c9a      	adds	r2, r3, #2
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	621a      	str	r2, [r3, #32]
 8005c2e:	e008      	b.n	8005c42 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	1c59      	adds	r1, r3, #1
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	6211      	str	r1, [r2, #32]
 8005c3a:	781a      	ldrb	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	4619      	mov	r1, r3
 8005c50:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10f      	bne.n	8005c76 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	e000      	b.n	8005c7c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c7a:	2302      	movs	r3, #2
  }
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bc80      	pop	{r7}
 8005c84:	4770      	bx	lr

08005c86 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b082      	sub	sp, #8
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68da      	ldr	r2, [r3, #12]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c9c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7ff febe 	bl	8005a28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b086      	sub	sp, #24
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b22      	cmp	r3, #34	; 0x22
 8005cc8:	f040 8099 	bne.w	8005dfe <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd4:	d117      	bne.n	8005d06 <UART_Receive_IT+0x50>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d113      	bne.n	8005d06 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfe:	1c9a      	adds	r2, r3, #2
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	629a      	str	r2, [r3, #40]	; 0x28
 8005d04:	e026      	b.n	8005d54 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d18:	d007      	beq.n	8005d2a <UART_Receive_IT+0x74>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10a      	bne.n	8005d38 <UART_Receive_IT+0x82>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d106      	bne.n	8005d38 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	e008      	b.n	8005d4a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4e:	1c5a      	adds	r2, r3, #1
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	4619      	mov	r1, r3
 8005d62:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d148      	bne.n	8005dfa <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f022 0220 	bic.w	r2, r2, #32
 8005d76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	695a      	ldr	r2, [r3, #20]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 0201 	bic.w	r2, r2, #1
 8005d96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d123      	bne.n	8005df0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68da      	ldr	r2, [r3, #12]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0210 	bic.w	r2, r2, #16
 8005dbc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0310 	and.w	r3, r3, #16
 8005dc8:	2b10      	cmp	r3, #16
 8005dca:	d10a      	bne.n	8005de2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dcc:	2300      	movs	r3, #0
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005de6:	4619      	mov	r1, r3
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff fe2f 	bl	8005a4c <HAL_UARTEx_RxEventCallback>
 8005dee:	e002      	b.n	8005df6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7fa ff39 	bl	8000c68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	e002      	b.n	8005e00 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	e000      	b.n	8005e00 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005dfe:	2302      	movs	r3, #2
  }
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3718      	adds	r7, #24
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689a      	ldr	r2, [r3, #8]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005e42:	f023 030c 	bic.w	r3, r3, #12
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	6812      	ldr	r2, [r2, #0]
 8005e4a:	68b9      	ldr	r1, [r7, #8]
 8005e4c:	430b      	orrs	r3, r1
 8005e4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699a      	ldr	r2, [r3, #24]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a2c      	ldr	r2, [pc, #176]	; (8005f1c <UART_SetConfig+0x114>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d103      	bne.n	8005e78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005e70:	f7fd ff56 	bl	8003d20 <HAL_RCC_GetPCLK2Freq>
 8005e74:	60f8      	str	r0, [r7, #12]
 8005e76:	e002      	b.n	8005e7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005e78:	f7fd ff3e 	bl	8003cf8 <HAL_RCC_GetPCLK1Freq>
 8005e7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	4613      	mov	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	009a      	lsls	r2, r3, #2
 8005e88:	441a      	add	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e94:	4a22      	ldr	r2, [pc, #136]	; (8005f20 <UART_SetConfig+0x118>)
 8005e96:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	0119      	lsls	r1, r3, #4
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	009a      	lsls	r2, r3, #2
 8005ea8:	441a      	add	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005eb4:	4b1a      	ldr	r3, [pc, #104]	; (8005f20 <UART_SetConfig+0x118>)
 8005eb6:	fba3 0302 	umull	r0, r3, r3, r2
 8005eba:	095b      	lsrs	r3, r3, #5
 8005ebc:	2064      	movs	r0, #100	; 0x64
 8005ebe:	fb00 f303 	mul.w	r3, r0, r3
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	011b      	lsls	r3, r3, #4
 8005ec6:	3332      	adds	r3, #50	; 0x32
 8005ec8:	4a15      	ldr	r2, [pc, #84]	; (8005f20 <UART_SetConfig+0x118>)
 8005eca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ece:	095b      	lsrs	r3, r3, #5
 8005ed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ed4:	4419      	add	r1, r3
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	009a      	lsls	r2, r3, #2
 8005ee0:	441a      	add	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005eec:	4b0c      	ldr	r3, [pc, #48]	; (8005f20 <UART_SetConfig+0x118>)
 8005eee:	fba3 0302 	umull	r0, r3, r3, r2
 8005ef2:	095b      	lsrs	r3, r3, #5
 8005ef4:	2064      	movs	r0, #100	; 0x64
 8005ef6:	fb00 f303 	mul.w	r3, r0, r3
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	011b      	lsls	r3, r3, #4
 8005efe:	3332      	adds	r3, #50	; 0x32
 8005f00:	4a07      	ldr	r2, [pc, #28]	; (8005f20 <UART_SetConfig+0x118>)
 8005f02:	fba2 2303 	umull	r2, r3, r2, r3
 8005f06:	095b      	lsrs	r3, r3, #5
 8005f08:	f003 020f 	and.w	r2, r3, #15
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	440a      	add	r2, r1
 8005f12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005f14:	bf00      	nop
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	40013800 	.word	0x40013800
 8005f20:	51eb851f 	.word	0x51eb851f

08005f24 <atoi>:
 8005f24:	220a      	movs	r2, #10
 8005f26:	2100      	movs	r1, #0
 8005f28:	f000 b950 	b.w	80061cc <strtol>

08005f2c <__errno>:
 8005f2c:	4b01      	ldr	r3, [pc, #4]	; (8005f34 <__errno+0x8>)
 8005f2e:	6818      	ldr	r0, [r3, #0]
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	200000a0 	.word	0x200000a0

08005f38 <__libc_init_array>:
 8005f38:	b570      	push	{r4, r5, r6, lr}
 8005f3a:	2600      	movs	r6, #0
 8005f3c:	4d0c      	ldr	r5, [pc, #48]	; (8005f70 <__libc_init_array+0x38>)
 8005f3e:	4c0d      	ldr	r4, [pc, #52]	; (8005f74 <__libc_init_array+0x3c>)
 8005f40:	1b64      	subs	r4, r4, r5
 8005f42:	10a4      	asrs	r4, r4, #2
 8005f44:	42a6      	cmp	r6, r4
 8005f46:	d109      	bne.n	8005f5c <__libc_init_array+0x24>
 8005f48:	f001 f90e 	bl	8007168 <_init>
 8005f4c:	2600      	movs	r6, #0
 8005f4e:	4d0a      	ldr	r5, [pc, #40]	; (8005f78 <__libc_init_array+0x40>)
 8005f50:	4c0a      	ldr	r4, [pc, #40]	; (8005f7c <__libc_init_array+0x44>)
 8005f52:	1b64      	subs	r4, r4, r5
 8005f54:	10a4      	asrs	r4, r4, #2
 8005f56:	42a6      	cmp	r6, r4
 8005f58:	d105      	bne.n	8005f66 <__libc_init_array+0x2e>
 8005f5a:	bd70      	pop	{r4, r5, r6, pc}
 8005f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f60:	4798      	blx	r3
 8005f62:	3601      	adds	r6, #1
 8005f64:	e7ee      	b.n	8005f44 <__libc_init_array+0xc>
 8005f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f6a:	4798      	blx	r3
 8005f6c:	3601      	adds	r6, #1
 8005f6e:	e7f2      	b.n	8005f56 <__libc_init_array+0x1e>
 8005f70:	08007574 	.word	0x08007574
 8005f74:	08007574 	.word	0x08007574
 8005f78:	08007574 	.word	0x08007574
 8005f7c:	08007578 	.word	0x08007578

08005f80 <memset>:
 8005f80:	4603      	mov	r3, r0
 8005f82:	4402      	add	r2, r0
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d100      	bne.n	8005f8a <memset+0xa>
 8005f88:	4770      	bx	lr
 8005f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f8e:	e7f9      	b.n	8005f84 <memset+0x4>

08005f90 <iprintf>:
 8005f90:	b40f      	push	{r0, r1, r2, r3}
 8005f92:	4b0a      	ldr	r3, [pc, #40]	; (8005fbc <iprintf+0x2c>)
 8005f94:	b513      	push	{r0, r1, r4, lr}
 8005f96:	681c      	ldr	r4, [r3, #0]
 8005f98:	b124      	cbz	r4, 8005fa4 <iprintf+0x14>
 8005f9a:	69a3      	ldr	r3, [r4, #24]
 8005f9c:	b913      	cbnz	r3, 8005fa4 <iprintf+0x14>
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f000 faf4 	bl	800658c <__sinit>
 8005fa4:	ab05      	add	r3, sp, #20
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	9a04      	ldr	r2, [sp, #16]
 8005faa:	68a1      	ldr	r1, [r4, #8]
 8005fac:	9301      	str	r3, [sp, #4]
 8005fae:	f000 fcf7 	bl	80069a0 <_vfiprintf_r>
 8005fb2:	b002      	add	sp, #8
 8005fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fb8:	b004      	add	sp, #16
 8005fba:	4770      	bx	lr
 8005fbc:	200000a0 	.word	0x200000a0

08005fc0 <putchar>:
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	4b08      	ldr	r3, [pc, #32]	; (8005fe4 <putchar+0x24>)
 8005fc4:	4605      	mov	r5, r0
 8005fc6:	681c      	ldr	r4, [r3, #0]
 8005fc8:	b124      	cbz	r4, 8005fd4 <putchar+0x14>
 8005fca:	69a3      	ldr	r3, [r4, #24]
 8005fcc:	b913      	cbnz	r3, 8005fd4 <putchar+0x14>
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f000 fadc 	bl	800658c <__sinit>
 8005fd4:	4629      	mov	r1, r5
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	68a2      	ldr	r2, [r4, #8]
 8005fda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fde:	f000 bfa5 	b.w	8006f2c <_putc_r>
 8005fe2:	bf00      	nop
 8005fe4:	200000a0 	.word	0x200000a0

08005fe8 <_puts_r>:
 8005fe8:	b570      	push	{r4, r5, r6, lr}
 8005fea:	460e      	mov	r6, r1
 8005fec:	4605      	mov	r5, r0
 8005fee:	b118      	cbz	r0, 8005ff8 <_puts_r+0x10>
 8005ff0:	6983      	ldr	r3, [r0, #24]
 8005ff2:	b90b      	cbnz	r3, 8005ff8 <_puts_r+0x10>
 8005ff4:	f000 faca 	bl	800658c <__sinit>
 8005ff8:	69ab      	ldr	r3, [r5, #24]
 8005ffa:	68ac      	ldr	r4, [r5, #8]
 8005ffc:	b913      	cbnz	r3, 8006004 <_puts_r+0x1c>
 8005ffe:	4628      	mov	r0, r5
 8006000:	f000 fac4 	bl	800658c <__sinit>
 8006004:	4b2c      	ldr	r3, [pc, #176]	; (80060b8 <_puts_r+0xd0>)
 8006006:	429c      	cmp	r4, r3
 8006008:	d120      	bne.n	800604c <_puts_r+0x64>
 800600a:	686c      	ldr	r4, [r5, #4]
 800600c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800600e:	07db      	lsls	r3, r3, #31
 8006010:	d405      	bmi.n	800601e <_puts_r+0x36>
 8006012:	89a3      	ldrh	r3, [r4, #12]
 8006014:	0598      	lsls	r0, r3, #22
 8006016:	d402      	bmi.n	800601e <_puts_r+0x36>
 8006018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800601a:	f000 fb55 	bl	80066c8 <__retarget_lock_acquire_recursive>
 800601e:	89a3      	ldrh	r3, [r4, #12]
 8006020:	0719      	lsls	r1, r3, #28
 8006022:	d51d      	bpl.n	8006060 <_puts_r+0x78>
 8006024:	6923      	ldr	r3, [r4, #16]
 8006026:	b1db      	cbz	r3, 8006060 <_puts_r+0x78>
 8006028:	3e01      	subs	r6, #1
 800602a:	68a3      	ldr	r3, [r4, #8]
 800602c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006030:	3b01      	subs	r3, #1
 8006032:	60a3      	str	r3, [r4, #8]
 8006034:	bb39      	cbnz	r1, 8006086 <_puts_r+0x9e>
 8006036:	2b00      	cmp	r3, #0
 8006038:	da38      	bge.n	80060ac <_puts_r+0xc4>
 800603a:	4622      	mov	r2, r4
 800603c:	210a      	movs	r1, #10
 800603e:	4628      	mov	r0, r5
 8006040:	f000 f8ce 	bl	80061e0 <__swbuf_r>
 8006044:	3001      	adds	r0, #1
 8006046:	d011      	beq.n	800606c <_puts_r+0x84>
 8006048:	250a      	movs	r5, #10
 800604a:	e011      	b.n	8006070 <_puts_r+0x88>
 800604c:	4b1b      	ldr	r3, [pc, #108]	; (80060bc <_puts_r+0xd4>)
 800604e:	429c      	cmp	r4, r3
 8006050:	d101      	bne.n	8006056 <_puts_r+0x6e>
 8006052:	68ac      	ldr	r4, [r5, #8]
 8006054:	e7da      	b.n	800600c <_puts_r+0x24>
 8006056:	4b1a      	ldr	r3, [pc, #104]	; (80060c0 <_puts_r+0xd8>)
 8006058:	429c      	cmp	r4, r3
 800605a:	bf08      	it	eq
 800605c:	68ec      	ldreq	r4, [r5, #12]
 800605e:	e7d5      	b.n	800600c <_puts_r+0x24>
 8006060:	4621      	mov	r1, r4
 8006062:	4628      	mov	r0, r5
 8006064:	f000 f90e 	bl	8006284 <__swsetup_r>
 8006068:	2800      	cmp	r0, #0
 800606a:	d0dd      	beq.n	8006028 <_puts_r+0x40>
 800606c:	f04f 35ff 	mov.w	r5, #4294967295
 8006070:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006072:	07da      	lsls	r2, r3, #31
 8006074:	d405      	bmi.n	8006082 <_puts_r+0x9a>
 8006076:	89a3      	ldrh	r3, [r4, #12]
 8006078:	059b      	lsls	r3, r3, #22
 800607a:	d402      	bmi.n	8006082 <_puts_r+0x9a>
 800607c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800607e:	f000 fb24 	bl	80066ca <__retarget_lock_release_recursive>
 8006082:	4628      	mov	r0, r5
 8006084:	bd70      	pop	{r4, r5, r6, pc}
 8006086:	2b00      	cmp	r3, #0
 8006088:	da04      	bge.n	8006094 <_puts_r+0xac>
 800608a:	69a2      	ldr	r2, [r4, #24]
 800608c:	429a      	cmp	r2, r3
 800608e:	dc06      	bgt.n	800609e <_puts_r+0xb6>
 8006090:	290a      	cmp	r1, #10
 8006092:	d004      	beq.n	800609e <_puts_r+0xb6>
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	6022      	str	r2, [r4, #0]
 800609a:	7019      	strb	r1, [r3, #0]
 800609c:	e7c5      	b.n	800602a <_puts_r+0x42>
 800609e:	4622      	mov	r2, r4
 80060a0:	4628      	mov	r0, r5
 80060a2:	f000 f89d 	bl	80061e0 <__swbuf_r>
 80060a6:	3001      	adds	r0, #1
 80060a8:	d1bf      	bne.n	800602a <_puts_r+0x42>
 80060aa:	e7df      	b.n	800606c <_puts_r+0x84>
 80060ac:	250a      	movs	r5, #10
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	1c5a      	adds	r2, r3, #1
 80060b2:	6022      	str	r2, [r4, #0]
 80060b4:	701d      	strb	r5, [r3, #0]
 80060b6:	e7db      	b.n	8006070 <_puts_r+0x88>
 80060b8:	08007500 	.word	0x08007500
 80060bc:	08007520 	.word	0x08007520
 80060c0:	080074e0 	.word	0x080074e0

080060c4 <puts>:
 80060c4:	4b02      	ldr	r3, [pc, #8]	; (80060d0 <puts+0xc>)
 80060c6:	4601      	mov	r1, r0
 80060c8:	6818      	ldr	r0, [r3, #0]
 80060ca:	f7ff bf8d 	b.w	8005fe8 <_puts_r>
 80060ce:	bf00      	nop
 80060d0:	200000a0 	.word	0x200000a0

080060d4 <_strtol_l.constprop.0>:
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060da:	4680      	mov	r8, r0
 80060dc:	d001      	beq.n	80060e2 <_strtol_l.constprop.0+0xe>
 80060de:	2b24      	cmp	r3, #36	; 0x24
 80060e0:	d906      	bls.n	80060f0 <_strtol_l.constprop.0+0x1c>
 80060e2:	f7ff ff23 	bl	8005f2c <__errno>
 80060e6:	2316      	movs	r3, #22
 80060e8:	6003      	str	r3, [r0, #0]
 80060ea:	2000      	movs	r0, #0
 80060ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060f0:	460d      	mov	r5, r1
 80060f2:	4f35      	ldr	r7, [pc, #212]	; (80061c8 <_strtol_l.constprop.0+0xf4>)
 80060f4:	4628      	mov	r0, r5
 80060f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060fa:	5de6      	ldrb	r6, [r4, r7]
 80060fc:	f016 0608 	ands.w	r6, r6, #8
 8006100:	d1f8      	bne.n	80060f4 <_strtol_l.constprop.0+0x20>
 8006102:	2c2d      	cmp	r4, #45	; 0x2d
 8006104:	d12f      	bne.n	8006166 <_strtol_l.constprop.0+0x92>
 8006106:	2601      	movs	r6, #1
 8006108:	782c      	ldrb	r4, [r5, #0]
 800610a:	1c85      	adds	r5, r0, #2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d057      	beq.n	80061c0 <_strtol_l.constprop.0+0xec>
 8006110:	2b10      	cmp	r3, #16
 8006112:	d109      	bne.n	8006128 <_strtol_l.constprop.0+0x54>
 8006114:	2c30      	cmp	r4, #48	; 0x30
 8006116:	d107      	bne.n	8006128 <_strtol_l.constprop.0+0x54>
 8006118:	7828      	ldrb	r0, [r5, #0]
 800611a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800611e:	2858      	cmp	r0, #88	; 0x58
 8006120:	d149      	bne.n	80061b6 <_strtol_l.constprop.0+0xe2>
 8006122:	2310      	movs	r3, #16
 8006124:	786c      	ldrb	r4, [r5, #1]
 8006126:	3502      	adds	r5, #2
 8006128:	2700      	movs	r7, #0
 800612a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800612e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006132:	fbbe f9f3 	udiv	r9, lr, r3
 8006136:	4638      	mov	r0, r7
 8006138:	fb03 ea19 	mls	sl, r3, r9, lr
 800613c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006140:	f1bc 0f09 	cmp.w	ip, #9
 8006144:	d814      	bhi.n	8006170 <_strtol_l.constprop.0+0x9c>
 8006146:	4664      	mov	r4, ip
 8006148:	42a3      	cmp	r3, r4
 800614a:	dd22      	ble.n	8006192 <_strtol_l.constprop.0+0xbe>
 800614c:	2f00      	cmp	r7, #0
 800614e:	db1d      	blt.n	800618c <_strtol_l.constprop.0+0xb8>
 8006150:	4581      	cmp	r9, r0
 8006152:	d31b      	bcc.n	800618c <_strtol_l.constprop.0+0xb8>
 8006154:	d101      	bne.n	800615a <_strtol_l.constprop.0+0x86>
 8006156:	45a2      	cmp	sl, r4
 8006158:	db18      	blt.n	800618c <_strtol_l.constprop.0+0xb8>
 800615a:	2701      	movs	r7, #1
 800615c:	fb00 4003 	mla	r0, r0, r3, r4
 8006160:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006164:	e7ea      	b.n	800613c <_strtol_l.constprop.0+0x68>
 8006166:	2c2b      	cmp	r4, #43	; 0x2b
 8006168:	bf04      	itt	eq
 800616a:	782c      	ldrbeq	r4, [r5, #0]
 800616c:	1c85      	addeq	r5, r0, #2
 800616e:	e7cd      	b.n	800610c <_strtol_l.constprop.0+0x38>
 8006170:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006174:	f1bc 0f19 	cmp.w	ip, #25
 8006178:	d801      	bhi.n	800617e <_strtol_l.constprop.0+0xaa>
 800617a:	3c37      	subs	r4, #55	; 0x37
 800617c:	e7e4      	b.n	8006148 <_strtol_l.constprop.0+0x74>
 800617e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006182:	f1bc 0f19 	cmp.w	ip, #25
 8006186:	d804      	bhi.n	8006192 <_strtol_l.constprop.0+0xbe>
 8006188:	3c57      	subs	r4, #87	; 0x57
 800618a:	e7dd      	b.n	8006148 <_strtol_l.constprop.0+0x74>
 800618c:	f04f 37ff 	mov.w	r7, #4294967295
 8006190:	e7e6      	b.n	8006160 <_strtol_l.constprop.0+0x8c>
 8006192:	2f00      	cmp	r7, #0
 8006194:	da07      	bge.n	80061a6 <_strtol_l.constprop.0+0xd2>
 8006196:	2322      	movs	r3, #34	; 0x22
 8006198:	4670      	mov	r0, lr
 800619a:	f8c8 3000 	str.w	r3, [r8]
 800619e:	2a00      	cmp	r2, #0
 80061a0:	d0a4      	beq.n	80060ec <_strtol_l.constprop.0+0x18>
 80061a2:	1e69      	subs	r1, r5, #1
 80061a4:	e005      	b.n	80061b2 <_strtol_l.constprop.0+0xde>
 80061a6:	b106      	cbz	r6, 80061aa <_strtol_l.constprop.0+0xd6>
 80061a8:	4240      	negs	r0, r0
 80061aa:	2a00      	cmp	r2, #0
 80061ac:	d09e      	beq.n	80060ec <_strtol_l.constprop.0+0x18>
 80061ae:	2f00      	cmp	r7, #0
 80061b0:	d1f7      	bne.n	80061a2 <_strtol_l.constprop.0+0xce>
 80061b2:	6011      	str	r1, [r2, #0]
 80061b4:	e79a      	b.n	80060ec <_strtol_l.constprop.0+0x18>
 80061b6:	2430      	movs	r4, #48	; 0x30
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1b5      	bne.n	8006128 <_strtol_l.constprop.0+0x54>
 80061bc:	2308      	movs	r3, #8
 80061be:	e7b3      	b.n	8006128 <_strtol_l.constprop.0+0x54>
 80061c0:	2c30      	cmp	r4, #48	; 0x30
 80061c2:	d0a9      	beq.n	8006118 <_strtol_l.constprop.0+0x44>
 80061c4:	230a      	movs	r3, #10
 80061c6:	e7af      	b.n	8006128 <_strtol_l.constprop.0+0x54>
 80061c8:	080073dd 	.word	0x080073dd

080061cc <strtol>:
 80061cc:	4613      	mov	r3, r2
 80061ce:	460a      	mov	r2, r1
 80061d0:	4601      	mov	r1, r0
 80061d2:	4802      	ldr	r0, [pc, #8]	; (80061dc <strtol+0x10>)
 80061d4:	6800      	ldr	r0, [r0, #0]
 80061d6:	f7ff bf7d 	b.w	80060d4 <_strtol_l.constprop.0>
 80061da:	bf00      	nop
 80061dc:	200000a0 	.word	0x200000a0

080061e0 <__swbuf_r>:
 80061e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061e2:	460e      	mov	r6, r1
 80061e4:	4614      	mov	r4, r2
 80061e6:	4605      	mov	r5, r0
 80061e8:	b118      	cbz	r0, 80061f2 <__swbuf_r+0x12>
 80061ea:	6983      	ldr	r3, [r0, #24]
 80061ec:	b90b      	cbnz	r3, 80061f2 <__swbuf_r+0x12>
 80061ee:	f000 f9cd 	bl	800658c <__sinit>
 80061f2:	4b21      	ldr	r3, [pc, #132]	; (8006278 <__swbuf_r+0x98>)
 80061f4:	429c      	cmp	r4, r3
 80061f6:	d12b      	bne.n	8006250 <__swbuf_r+0x70>
 80061f8:	686c      	ldr	r4, [r5, #4]
 80061fa:	69a3      	ldr	r3, [r4, #24]
 80061fc:	60a3      	str	r3, [r4, #8]
 80061fe:	89a3      	ldrh	r3, [r4, #12]
 8006200:	071a      	lsls	r2, r3, #28
 8006202:	d52f      	bpl.n	8006264 <__swbuf_r+0x84>
 8006204:	6923      	ldr	r3, [r4, #16]
 8006206:	b36b      	cbz	r3, 8006264 <__swbuf_r+0x84>
 8006208:	6923      	ldr	r3, [r4, #16]
 800620a:	6820      	ldr	r0, [r4, #0]
 800620c:	b2f6      	uxtb	r6, r6
 800620e:	1ac0      	subs	r0, r0, r3
 8006210:	6963      	ldr	r3, [r4, #20]
 8006212:	4637      	mov	r7, r6
 8006214:	4283      	cmp	r3, r0
 8006216:	dc04      	bgt.n	8006222 <__swbuf_r+0x42>
 8006218:	4621      	mov	r1, r4
 800621a:	4628      	mov	r0, r5
 800621c:	f000 f922 	bl	8006464 <_fflush_r>
 8006220:	bb30      	cbnz	r0, 8006270 <__swbuf_r+0x90>
 8006222:	68a3      	ldr	r3, [r4, #8]
 8006224:	3001      	adds	r0, #1
 8006226:	3b01      	subs	r3, #1
 8006228:	60a3      	str	r3, [r4, #8]
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	6022      	str	r2, [r4, #0]
 8006230:	701e      	strb	r6, [r3, #0]
 8006232:	6963      	ldr	r3, [r4, #20]
 8006234:	4283      	cmp	r3, r0
 8006236:	d004      	beq.n	8006242 <__swbuf_r+0x62>
 8006238:	89a3      	ldrh	r3, [r4, #12]
 800623a:	07db      	lsls	r3, r3, #31
 800623c:	d506      	bpl.n	800624c <__swbuf_r+0x6c>
 800623e:	2e0a      	cmp	r6, #10
 8006240:	d104      	bne.n	800624c <__swbuf_r+0x6c>
 8006242:	4621      	mov	r1, r4
 8006244:	4628      	mov	r0, r5
 8006246:	f000 f90d 	bl	8006464 <_fflush_r>
 800624a:	b988      	cbnz	r0, 8006270 <__swbuf_r+0x90>
 800624c:	4638      	mov	r0, r7
 800624e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006250:	4b0a      	ldr	r3, [pc, #40]	; (800627c <__swbuf_r+0x9c>)
 8006252:	429c      	cmp	r4, r3
 8006254:	d101      	bne.n	800625a <__swbuf_r+0x7a>
 8006256:	68ac      	ldr	r4, [r5, #8]
 8006258:	e7cf      	b.n	80061fa <__swbuf_r+0x1a>
 800625a:	4b09      	ldr	r3, [pc, #36]	; (8006280 <__swbuf_r+0xa0>)
 800625c:	429c      	cmp	r4, r3
 800625e:	bf08      	it	eq
 8006260:	68ec      	ldreq	r4, [r5, #12]
 8006262:	e7ca      	b.n	80061fa <__swbuf_r+0x1a>
 8006264:	4621      	mov	r1, r4
 8006266:	4628      	mov	r0, r5
 8006268:	f000 f80c 	bl	8006284 <__swsetup_r>
 800626c:	2800      	cmp	r0, #0
 800626e:	d0cb      	beq.n	8006208 <__swbuf_r+0x28>
 8006270:	f04f 37ff 	mov.w	r7, #4294967295
 8006274:	e7ea      	b.n	800624c <__swbuf_r+0x6c>
 8006276:	bf00      	nop
 8006278:	08007500 	.word	0x08007500
 800627c:	08007520 	.word	0x08007520
 8006280:	080074e0 	.word	0x080074e0

08006284 <__swsetup_r>:
 8006284:	4b32      	ldr	r3, [pc, #200]	; (8006350 <__swsetup_r+0xcc>)
 8006286:	b570      	push	{r4, r5, r6, lr}
 8006288:	681d      	ldr	r5, [r3, #0]
 800628a:	4606      	mov	r6, r0
 800628c:	460c      	mov	r4, r1
 800628e:	b125      	cbz	r5, 800629a <__swsetup_r+0x16>
 8006290:	69ab      	ldr	r3, [r5, #24]
 8006292:	b913      	cbnz	r3, 800629a <__swsetup_r+0x16>
 8006294:	4628      	mov	r0, r5
 8006296:	f000 f979 	bl	800658c <__sinit>
 800629a:	4b2e      	ldr	r3, [pc, #184]	; (8006354 <__swsetup_r+0xd0>)
 800629c:	429c      	cmp	r4, r3
 800629e:	d10f      	bne.n	80062c0 <__swsetup_r+0x3c>
 80062a0:	686c      	ldr	r4, [r5, #4]
 80062a2:	89a3      	ldrh	r3, [r4, #12]
 80062a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062a8:	0719      	lsls	r1, r3, #28
 80062aa:	d42c      	bmi.n	8006306 <__swsetup_r+0x82>
 80062ac:	06dd      	lsls	r5, r3, #27
 80062ae:	d411      	bmi.n	80062d4 <__swsetup_r+0x50>
 80062b0:	2309      	movs	r3, #9
 80062b2:	6033      	str	r3, [r6, #0]
 80062b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80062b8:	f04f 30ff 	mov.w	r0, #4294967295
 80062bc:	81a3      	strh	r3, [r4, #12]
 80062be:	e03e      	b.n	800633e <__swsetup_r+0xba>
 80062c0:	4b25      	ldr	r3, [pc, #148]	; (8006358 <__swsetup_r+0xd4>)
 80062c2:	429c      	cmp	r4, r3
 80062c4:	d101      	bne.n	80062ca <__swsetup_r+0x46>
 80062c6:	68ac      	ldr	r4, [r5, #8]
 80062c8:	e7eb      	b.n	80062a2 <__swsetup_r+0x1e>
 80062ca:	4b24      	ldr	r3, [pc, #144]	; (800635c <__swsetup_r+0xd8>)
 80062cc:	429c      	cmp	r4, r3
 80062ce:	bf08      	it	eq
 80062d0:	68ec      	ldreq	r4, [r5, #12]
 80062d2:	e7e6      	b.n	80062a2 <__swsetup_r+0x1e>
 80062d4:	0758      	lsls	r0, r3, #29
 80062d6:	d512      	bpl.n	80062fe <__swsetup_r+0x7a>
 80062d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062da:	b141      	cbz	r1, 80062ee <__swsetup_r+0x6a>
 80062dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062e0:	4299      	cmp	r1, r3
 80062e2:	d002      	beq.n	80062ea <__swsetup_r+0x66>
 80062e4:	4630      	mov	r0, r6
 80062e6:	f000 fa57 	bl	8006798 <_free_r>
 80062ea:	2300      	movs	r3, #0
 80062ec:	6363      	str	r3, [r4, #52]	; 0x34
 80062ee:	89a3      	ldrh	r3, [r4, #12]
 80062f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062f4:	81a3      	strh	r3, [r4, #12]
 80062f6:	2300      	movs	r3, #0
 80062f8:	6063      	str	r3, [r4, #4]
 80062fa:	6923      	ldr	r3, [r4, #16]
 80062fc:	6023      	str	r3, [r4, #0]
 80062fe:	89a3      	ldrh	r3, [r4, #12]
 8006300:	f043 0308 	orr.w	r3, r3, #8
 8006304:	81a3      	strh	r3, [r4, #12]
 8006306:	6923      	ldr	r3, [r4, #16]
 8006308:	b94b      	cbnz	r3, 800631e <__swsetup_r+0x9a>
 800630a:	89a3      	ldrh	r3, [r4, #12]
 800630c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006314:	d003      	beq.n	800631e <__swsetup_r+0x9a>
 8006316:	4621      	mov	r1, r4
 8006318:	4630      	mov	r0, r6
 800631a:	f000 f9fd 	bl	8006718 <__smakebuf_r>
 800631e:	89a0      	ldrh	r0, [r4, #12]
 8006320:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006324:	f010 0301 	ands.w	r3, r0, #1
 8006328:	d00a      	beq.n	8006340 <__swsetup_r+0xbc>
 800632a:	2300      	movs	r3, #0
 800632c:	60a3      	str	r3, [r4, #8]
 800632e:	6963      	ldr	r3, [r4, #20]
 8006330:	425b      	negs	r3, r3
 8006332:	61a3      	str	r3, [r4, #24]
 8006334:	6923      	ldr	r3, [r4, #16]
 8006336:	b943      	cbnz	r3, 800634a <__swsetup_r+0xc6>
 8006338:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800633c:	d1ba      	bne.n	80062b4 <__swsetup_r+0x30>
 800633e:	bd70      	pop	{r4, r5, r6, pc}
 8006340:	0781      	lsls	r1, r0, #30
 8006342:	bf58      	it	pl
 8006344:	6963      	ldrpl	r3, [r4, #20]
 8006346:	60a3      	str	r3, [r4, #8]
 8006348:	e7f4      	b.n	8006334 <__swsetup_r+0xb0>
 800634a:	2000      	movs	r0, #0
 800634c:	e7f7      	b.n	800633e <__swsetup_r+0xba>
 800634e:	bf00      	nop
 8006350:	200000a0 	.word	0x200000a0
 8006354:	08007500 	.word	0x08007500
 8006358:	08007520 	.word	0x08007520
 800635c:	080074e0 	.word	0x080074e0

08006360 <__sflush_r>:
 8006360:	898a      	ldrh	r2, [r1, #12]
 8006362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006364:	4605      	mov	r5, r0
 8006366:	0710      	lsls	r0, r2, #28
 8006368:	460c      	mov	r4, r1
 800636a:	d457      	bmi.n	800641c <__sflush_r+0xbc>
 800636c:	684b      	ldr	r3, [r1, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	dc04      	bgt.n	800637c <__sflush_r+0x1c>
 8006372:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006374:	2b00      	cmp	r3, #0
 8006376:	dc01      	bgt.n	800637c <__sflush_r+0x1c>
 8006378:	2000      	movs	r0, #0
 800637a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800637c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800637e:	2e00      	cmp	r6, #0
 8006380:	d0fa      	beq.n	8006378 <__sflush_r+0x18>
 8006382:	2300      	movs	r3, #0
 8006384:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006388:	682f      	ldr	r7, [r5, #0]
 800638a:	602b      	str	r3, [r5, #0]
 800638c:	d032      	beq.n	80063f4 <__sflush_r+0x94>
 800638e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006390:	89a3      	ldrh	r3, [r4, #12]
 8006392:	075a      	lsls	r2, r3, #29
 8006394:	d505      	bpl.n	80063a2 <__sflush_r+0x42>
 8006396:	6863      	ldr	r3, [r4, #4]
 8006398:	1ac0      	subs	r0, r0, r3
 800639a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800639c:	b10b      	cbz	r3, 80063a2 <__sflush_r+0x42>
 800639e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063a0:	1ac0      	subs	r0, r0, r3
 80063a2:	2300      	movs	r3, #0
 80063a4:	4602      	mov	r2, r0
 80063a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063a8:	4628      	mov	r0, r5
 80063aa:	6a21      	ldr	r1, [r4, #32]
 80063ac:	47b0      	blx	r6
 80063ae:	1c43      	adds	r3, r0, #1
 80063b0:	89a3      	ldrh	r3, [r4, #12]
 80063b2:	d106      	bne.n	80063c2 <__sflush_r+0x62>
 80063b4:	6829      	ldr	r1, [r5, #0]
 80063b6:	291d      	cmp	r1, #29
 80063b8:	d82c      	bhi.n	8006414 <__sflush_r+0xb4>
 80063ba:	4a29      	ldr	r2, [pc, #164]	; (8006460 <__sflush_r+0x100>)
 80063bc:	40ca      	lsrs	r2, r1
 80063be:	07d6      	lsls	r6, r2, #31
 80063c0:	d528      	bpl.n	8006414 <__sflush_r+0xb4>
 80063c2:	2200      	movs	r2, #0
 80063c4:	6062      	str	r2, [r4, #4]
 80063c6:	6922      	ldr	r2, [r4, #16]
 80063c8:	04d9      	lsls	r1, r3, #19
 80063ca:	6022      	str	r2, [r4, #0]
 80063cc:	d504      	bpl.n	80063d8 <__sflush_r+0x78>
 80063ce:	1c42      	adds	r2, r0, #1
 80063d0:	d101      	bne.n	80063d6 <__sflush_r+0x76>
 80063d2:	682b      	ldr	r3, [r5, #0]
 80063d4:	b903      	cbnz	r3, 80063d8 <__sflush_r+0x78>
 80063d6:	6560      	str	r0, [r4, #84]	; 0x54
 80063d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063da:	602f      	str	r7, [r5, #0]
 80063dc:	2900      	cmp	r1, #0
 80063de:	d0cb      	beq.n	8006378 <__sflush_r+0x18>
 80063e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063e4:	4299      	cmp	r1, r3
 80063e6:	d002      	beq.n	80063ee <__sflush_r+0x8e>
 80063e8:	4628      	mov	r0, r5
 80063ea:	f000 f9d5 	bl	8006798 <_free_r>
 80063ee:	2000      	movs	r0, #0
 80063f0:	6360      	str	r0, [r4, #52]	; 0x34
 80063f2:	e7c2      	b.n	800637a <__sflush_r+0x1a>
 80063f4:	6a21      	ldr	r1, [r4, #32]
 80063f6:	2301      	movs	r3, #1
 80063f8:	4628      	mov	r0, r5
 80063fa:	47b0      	blx	r6
 80063fc:	1c41      	adds	r1, r0, #1
 80063fe:	d1c7      	bne.n	8006390 <__sflush_r+0x30>
 8006400:	682b      	ldr	r3, [r5, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d0c4      	beq.n	8006390 <__sflush_r+0x30>
 8006406:	2b1d      	cmp	r3, #29
 8006408:	d001      	beq.n	800640e <__sflush_r+0xae>
 800640a:	2b16      	cmp	r3, #22
 800640c:	d101      	bne.n	8006412 <__sflush_r+0xb2>
 800640e:	602f      	str	r7, [r5, #0]
 8006410:	e7b2      	b.n	8006378 <__sflush_r+0x18>
 8006412:	89a3      	ldrh	r3, [r4, #12]
 8006414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006418:	81a3      	strh	r3, [r4, #12]
 800641a:	e7ae      	b.n	800637a <__sflush_r+0x1a>
 800641c:	690f      	ldr	r7, [r1, #16]
 800641e:	2f00      	cmp	r7, #0
 8006420:	d0aa      	beq.n	8006378 <__sflush_r+0x18>
 8006422:	0793      	lsls	r3, r2, #30
 8006424:	bf18      	it	ne
 8006426:	2300      	movne	r3, #0
 8006428:	680e      	ldr	r6, [r1, #0]
 800642a:	bf08      	it	eq
 800642c:	694b      	ldreq	r3, [r1, #20]
 800642e:	1bf6      	subs	r6, r6, r7
 8006430:	600f      	str	r7, [r1, #0]
 8006432:	608b      	str	r3, [r1, #8]
 8006434:	2e00      	cmp	r6, #0
 8006436:	dd9f      	ble.n	8006378 <__sflush_r+0x18>
 8006438:	4633      	mov	r3, r6
 800643a:	463a      	mov	r2, r7
 800643c:	4628      	mov	r0, r5
 800643e:	6a21      	ldr	r1, [r4, #32]
 8006440:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006444:	47e0      	blx	ip
 8006446:	2800      	cmp	r0, #0
 8006448:	dc06      	bgt.n	8006458 <__sflush_r+0xf8>
 800644a:	89a3      	ldrh	r3, [r4, #12]
 800644c:	f04f 30ff 	mov.w	r0, #4294967295
 8006450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006454:	81a3      	strh	r3, [r4, #12]
 8006456:	e790      	b.n	800637a <__sflush_r+0x1a>
 8006458:	4407      	add	r7, r0
 800645a:	1a36      	subs	r6, r6, r0
 800645c:	e7ea      	b.n	8006434 <__sflush_r+0xd4>
 800645e:	bf00      	nop
 8006460:	20400001 	.word	0x20400001

08006464 <_fflush_r>:
 8006464:	b538      	push	{r3, r4, r5, lr}
 8006466:	690b      	ldr	r3, [r1, #16]
 8006468:	4605      	mov	r5, r0
 800646a:	460c      	mov	r4, r1
 800646c:	b913      	cbnz	r3, 8006474 <_fflush_r+0x10>
 800646e:	2500      	movs	r5, #0
 8006470:	4628      	mov	r0, r5
 8006472:	bd38      	pop	{r3, r4, r5, pc}
 8006474:	b118      	cbz	r0, 800647e <_fflush_r+0x1a>
 8006476:	6983      	ldr	r3, [r0, #24]
 8006478:	b90b      	cbnz	r3, 800647e <_fflush_r+0x1a>
 800647a:	f000 f887 	bl	800658c <__sinit>
 800647e:	4b14      	ldr	r3, [pc, #80]	; (80064d0 <_fflush_r+0x6c>)
 8006480:	429c      	cmp	r4, r3
 8006482:	d11b      	bne.n	80064bc <_fflush_r+0x58>
 8006484:	686c      	ldr	r4, [r5, #4]
 8006486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d0ef      	beq.n	800646e <_fflush_r+0xa>
 800648e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006490:	07d0      	lsls	r0, r2, #31
 8006492:	d404      	bmi.n	800649e <_fflush_r+0x3a>
 8006494:	0599      	lsls	r1, r3, #22
 8006496:	d402      	bmi.n	800649e <_fflush_r+0x3a>
 8006498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800649a:	f000 f915 	bl	80066c8 <__retarget_lock_acquire_recursive>
 800649e:	4628      	mov	r0, r5
 80064a0:	4621      	mov	r1, r4
 80064a2:	f7ff ff5d 	bl	8006360 <__sflush_r>
 80064a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064a8:	4605      	mov	r5, r0
 80064aa:	07da      	lsls	r2, r3, #31
 80064ac:	d4e0      	bmi.n	8006470 <_fflush_r+0xc>
 80064ae:	89a3      	ldrh	r3, [r4, #12]
 80064b0:	059b      	lsls	r3, r3, #22
 80064b2:	d4dd      	bmi.n	8006470 <_fflush_r+0xc>
 80064b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064b6:	f000 f908 	bl	80066ca <__retarget_lock_release_recursive>
 80064ba:	e7d9      	b.n	8006470 <_fflush_r+0xc>
 80064bc:	4b05      	ldr	r3, [pc, #20]	; (80064d4 <_fflush_r+0x70>)
 80064be:	429c      	cmp	r4, r3
 80064c0:	d101      	bne.n	80064c6 <_fflush_r+0x62>
 80064c2:	68ac      	ldr	r4, [r5, #8]
 80064c4:	e7df      	b.n	8006486 <_fflush_r+0x22>
 80064c6:	4b04      	ldr	r3, [pc, #16]	; (80064d8 <_fflush_r+0x74>)
 80064c8:	429c      	cmp	r4, r3
 80064ca:	bf08      	it	eq
 80064cc:	68ec      	ldreq	r4, [r5, #12]
 80064ce:	e7da      	b.n	8006486 <_fflush_r+0x22>
 80064d0:	08007500 	.word	0x08007500
 80064d4:	08007520 	.word	0x08007520
 80064d8:	080074e0 	.word	0x080074e0

080064dc <std>:
 80064dc:	2300      	movs	r3, #0
 80064de:	b510      	push	{r4, lr}
 80064e0:	4604      	mov	r4, r0
 80064e2:	e9c0 3300 	strd	r3, r3, [r0]
 80064e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064ea:	6083      	str	r3, [r0, #8]
 80064ec:	8181      	strh	r1, [r0, #12]
 80064ee:	6643      	str	r3, [r0, #100]	; 0x64
 80064f0:	81c2      	strh	r2, [r0, #14]
 80064f2:	6183      	str	r3, [r0, #24]
 80064f4:	4619      	mov	r1, r3
 80064f6:	2208      	movs	r2, #8
 80064f8:	305c      	adds	r0, #92	; 0x5c
 80064fa:	f7ff fd41 	bl	8005f80 <memset>
 80064fe:	4b05      	ldr	r3, [pc, #20]	; (8006514 <std+0x38>)
 8006500:	6224      	str	r4, [r4, #32]
 8006502:	6263      	str	r3, [r4, #36]	; 0x24
 8006504:	4b04      	ldr	r3, [pc, #16]	; (8006518 <std+0x3c>)
 8006506:	62a3      	str	r3, [r4, #40]	; 0x28
 8006508:	4b04      	ldr	r3, [pc, #16]	; (800651c <std+0x40>)
 800650a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800650c:	4b04      	ldr	r3, [pc, #16]	; (8006520 <std+0x44>)
 800650e:	6323      	str	r3, [r4, #48]	; 0x30
 8006510:	bd10      	pop	{r4, pc}
 8006512:	bf00      	nop
 8006514:	08006fdd 	.word	0x08006fdd
 8006518:	08006fff 	.word	0x08006fff
 800651c:	08007037 	.word	0x08007037
 8006520:	0800705b 	.word	0x0800705b

08006524 <_cleanup_r>:
 8006524:	4901      	ldr	r1, [pc, #4]	; (800652c <_cleanup_r+0x8>)
 8006526:	f000 b8af 	b.w	8006688 <_fwalk_reent>
 800652a:	bf00      	nop
 800652c:	08006465 	.word	0x08006465

08006530 <__sfmoreglue>:
 8006530:	2268      	movs	r2, #104	; 0x68
 8006532:	b570      	push	{r4, r5, r6, lr}
 8006534:	1e4d      	subs	r5, r1, #1
 8006536:	4355      	muls	r5, r2
 8006538:	460e      	mov	r6, r1
 800653a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800653e:	f000 f993 	bl	8006868 <_malloc_r>
 8006542:	4604      	mov	r4, r0
 8006544:	b140      	cbz	r0, 8006558 <__sfmoreglue+0x28>
 8006546:	2100      	movs	r1, #0
 8006548:	e9c0 1600 	strd	r1, r6, [r0]
 800654c:	300c      	adds	r0, #12
 800654e:	60a0      	str	r0, [r4, #8]
 8006550:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006554:	f7ff fd14 	bl	8005f80 <memset>
 8006558:	4620      	mov	r0, r4
 800655a:	bd70      	pop	{r4, r5, r6, pc}

0800655c <__sfp_lock_acquire>:
 800655c:	4801      	ldr	r0, [pc, #4]	; (8006564 <__sfp_lock_acquire+0x8>)
 800655e:	f000 b8b3 	b.w	80066c8 <__retarget_lock_acquire_recursive>
 8006562:	bf00      	nop
 8006564:	2000129d 	.word	0x2000129d

08006568 <__sfp_lock_release>:
 8006568:	4801      	ldr	r0, [pc, #4]	; (8006570 <__sfp_lock_release+0x8>)
 800656a:	f000 b8ae 	b.w	80066ca <__retarget_lock_release_recursive>
 800656e:	bf00      	nop
 8006570:	2000129d 	.word	0x2000129d

08006574 <__sinit_lock_acquire>:
 8006574:	4801      	ldr	r0, [pc, #4]	; (800657c <__sinit_lock_acquire+0x8>)
 8006576:	f000 b8a7 	b.w	80066c8 <__retarget_lock_acquire_recursive>
 800657a:	bf00      	nop
 800657c:	2000129e 	.word	0x2000129e

08006580 <__sinit_lock_release>:
 8006580:	4801      	ldr	r0, [pc, #4]	; (8006588 <__sinit_lock_release+0x8>)
 8006582:	f000 b8a2 	b.w	80066ca <__retarget_lock_release_recursive>
 8006586:	bf00      	nop
 8006588:	2000129e 	.word	0x2000129e

0800658c <__sinit>:
 800658c:	b510      	push	{r4, lr}
 800658e:	4604      	mov	r4, r0
 8006590:	f7ff fff0 	bl	8006574 <__sinit_lock_acquire>
 8006594:	69a3      	ldr	r3, [r4, #24]
 8006596:	b11b      	cbz	r3, 80065a0 <__sinit+0x14>
 8006598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800659c:	f7ff bff0 	b.w	8006580 <__sinit_lock_release>
 80065a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80065a4:	6523      	str	r3, [r4, #80]	; 0x50
 80065a6:	4b13      	ldr	r3, [pc, #76]	; (80065f4 <__sinit+0x68>)
 80065a8:	4a13      	ldr	r2, [pc, #76]	; (80065f8 <__sinit+0x6c>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80065ae:	42a3      	cmp	r3, r4
 80065b0:	bf08      	it	eq
 80065b2:	2301      	moveq	r3, #1
 80065b4:	4620      	mov	r0, r4
 80065b6:	bf08      	it	eq
 80065b8:	61a3      	streq	r3, [r4, #24]
 80065ba:	f000 f81f 	bl	80065fc <__sfp>
 80065be:	6060      	str	r0, [r4, #4]
 80065c0:	4620      	mov	r0, r4
 80065c2:	f000 f81b 	bl	80065fc <__sfp>
 80065c6:	60a0      	str	r0, [r4, #8]
 80065c8:	4620      	mov	r0, r4
 80065ca:	f000 f817 	bl	80065fc <__sfp>
 80065ce:	2200      	movs	r2, #0
 80065d0:	2104      	movs	r1, #4
 80065d2:	60e0      	str	r0, [r4, #12]
 80065d4:	6860      	ldr	r0, [r4, #4]
 80065d6:	f7ff ff81 	bl	80064dc <std>
 80065da:	2201      	movs	r2, #1
 80065dc:	2109      	movs	r1, #9
 80065de:	68a0      	ldr	r0, [r4, #8]
 80065e0:	f7ff ff7c 	bl	80064dc <std>
 80065e4:	2202      	movs	r2, #2
 80065e6:	2112      	movs	r1, #18
 80065e8:	68e0      	ldr	r0, [r4, #12]
 80065ea:	f7ff ff77 	bl	80064dc <std>
 80065ee:	2301      	movs	r3, #1
 80065f0:	61a3      	str	r3, [r4, #24]
 80065f2:	e7d1      	b.n	8006598 <__sinit+0xc>
 80065f4:	080073d8 	.word	0x080073d8
 80065f8:	08006525 	.word	0x08006525

080065fc <__sfp>:
 80065fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fe:	4607      	mov	r7, r0
 8006600:	f7ff ffac 	bl	800655c <__sfp_lock_acquire>
 8006604:	4b1e      	ldr	r3, [pc, #120]	; (8006680 <__sfp+0x84>)
 8006606:	681e      	ldr	r6, [r3, #0]
 8006608:	69b3      	ldr	r3, [r6, #24]
 800660a:	b913      	cbnz	r3, 8006612 <__sfp+0x16>
 800660c:	4630      	mov	r0, r6
 800660e:	f7ff ffbd 	bl	800658c <__sinit>
 8006612:	3648      	adds	r6, #72	; 0x48
 8006614:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006618:	3b01      	subs	r3, #1
 800661a:	d503      	bpl.n	8006624 <__sfp+0x28>
 800661c:	6833      	ldr	r3, [r6, #0]
 800661e:	b30b      	cbz	r3, 8006664 <__sfp+0x68>
 8006620:	6836      	ldr	r6, [r6, #0]
 8006622:	e7f7      	b.n	8006614 <__sfp+0x18>
 8006624:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006628:	b9d5      	cbnz	r5, 8006660 <__sfp+0x64>
 800662a:	4b16      	ldr	r3, [pc, #88]	; (8006684 <__sfp+0x88>)
 800662c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006630:	60e3      	str	r3, [r4, #12]
 8006632:	6665      	str	r5, [r4, #100]	; 0x64
 8006634:	f000 f847 	bl	80066c6 <__retarget_lock_init_recursive>
 8006638:	f7ff ff96 	bl	8006568 <__sfp_lock_release>
 800663c:	2208      	movs	r2, #8
 800663e:	4629      	mov	r1, r5
 8006640:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006644:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006648:	6025      	str	r5, [r4, #0]
 800664a:	61a5      	str	r5, [r4, #24]
 800664c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006650:	f7ff fc96 	bl	8005f80 <memset>
 8006654:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006658:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800665c:	4620      	mov	r0, r4
 800665e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006660:	3468      	adds	r4, #104	; 0x68
 8006662:	e7d9      	b.n	8006618 <__sfp+0x1c>
 8006664:	2104      	movs	r1, #4
 8006666:	4638      	mov	r0, r7
 8006668:	f7ff ff62 	bl	8006530 <__sfmoreglue>
 800666c:	4604      	mov	r4, r0
 800666e:	6030      	str	r0, [r6, #0]
 8006670:	2800      	cmp	r0, #0
 8006672:	d1d5      	bne.n	8006620 <__sfp+0x24>
 8006674:	f7ff ff78 	bl	8006568 <__sfp_lock_release>
 8006678:	230c      	movs	r3, #12
 800667a:	603b      	str	r3, [r7, #0]
 800667c:	e7ee      	b.n	800665c <__sfp+0x60>
 800667e:	bf00      	nop
 8006680:	080073d8 	.word	0x080073d8
 8006684:	ffff0001 	.word	0xffff0001

08006688 <_fwalk_reent>:
 8006688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800668c:	4606      	mov	r6, r0
 800668e:	4688      	mov	r8, r1
 8006690:	2700      	movs	r7, #0
 8006692:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006696:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800669a:	f1b9 0901 	subs.w	r9, r9, #1
 800669e:	d505      	bpl.n	80066ac <_fwalk_reent+0x24>
 80066a0:	6824      	ldr	r4, [r4, #0]
 80066a2:	2c00      	cmp	r4, #0
 80066a4:	d1f7      	bne.n	8006696 <_fwalk_reent+0xe>
 80066a6:	4638      	mov	r0, r7
 80066a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066ac:	89ab      	ldrh	r3, [r5, #12]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d907      	bls.n	80066c2 <_fwalk_reent+0x3a>
 80066b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066b6:	3301      	adds	r3, #1
 80066b8:	d003      	beq.n	80066c2 <_fwalk_reent+0x3a>
 80066ba:	4629      	mov	r1, r5
 80066bc:	4630      	mov	r0, r6
 80066be:	47c0      	blx	r8
 80066c0:	4307      	orrs	r7, r0
 80066c2:	3568      	adds	r5, #104	; 0x68
 80066c4:	e7e9      	b.n	800669a <_fwalk_reent+0x12>

080066c6 <__retarget_lock_init_recursive>:
 80066c6:	4770      	bx	lr

080066c8 <__retarget_lock_acquire_recursive>:
 80066c8:	4770      	bx	lr

080066ca <__retarget_lock_release_recursive>:
 80066ca:	4770      	bx	lr

080066cc <__swhatbuf_r>:
 80066cc:	b570      	push	{r4, r5, r6, lr}
 80066ce:	460e      	mov	r6, r1
 80066d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d4:	4614      	mov	r4, r2
 80066d6:	2900      	cmp	r1, #0
 80066d8:	461d      	mov	r5, r3
 80066da:	b096      	sub	sp, #88	; 0x58
 80066dc:	da08      	bge.n	80066f0 <__swhatbuf_r+0x24>
 80066de:	2200      	movs	r2, #0
 80066e0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80066e4:	602a      	str	r2, [r5, #0]
 80066e6:	061a      	lsls	r2, r3, #24
 80066e8:	d410      	bmi.n	800670c <__swhatbuf_r+0x40>
 80066ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066ee:	e00e      	b.n	800670e <__swhatbuf_r+0x42>
 80066f0:	466a      	mov	r2, sp
 80066f2:	f000 fcd9 	bl	80070a8 <_fstat_r>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	dbf1      	blt.n	80066de <__swhatbuf_r+0x12>
 80066fa:	9a01      	ldr	r2, [sp, #4]
 80066fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006700:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006704:	425a      	negs	r2, r3
 8006706:	415a      	adcs	r2, r3
 8006708:	602a      	str	r2, [r5, #0]
 800670a:	e7ee      	b.n	80066ea <__swhatbuf_r+0x1e>
 800670c:	2340      	movs	r3, #64	; 0x40
 800670e:	2000      	movs	r0, #0
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	b016      	add	sp, #88	; 0x58
 8006714:	bd70      	pop	{r4, r5, r6, pc}
	...

08006718 <__smakebuf_r>:
 8006718:	898b      	ldrh	r3, [r1, #12]
 800671a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800671c:	079d      	lsls	r5, r3, #30
 800671e:	4606      	mov	r6, r0
 8006720:	460c      	mov	r4, r1
 8006722:	d507      	bpl.n	8006734 <__smakebuf_r+0x1c>
 8006724:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006728:	6023      	str	r3, [r4, #0]
 800672a:	6123      	str	r3, [r4, #16]
 800672c:	2301      	movs	r3, #1
 800672e:	6163      	str	r3, [r4, #20]
 8006730:	b002      	add	sp, #8
 8006732:	bd70      	pop	{r4, r5, r6, pc}
 8006734:	466a      	mov	r2, sp
 8006736:	ab01      	add	r3, sp, #4
 8006738:	f7ff ffc8 	bl	80066cc <__swhatbuf_r>
 800673c:	9900      	ldr	r1, [sp, #0]
 800673e:	4605      	mov	r5, r0
 8006740:	4630      	mov	r0, r6
 8006742:	f000 f891 	bl	8006868 <_malloc_r>
 8006746:	b948      	cbnz	r0, 800675c <__smakebuf_r+0x44>
 8006748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800674c:	059a      	lsls	r2, r3, #22
 800674e:	d4ef      	bmi.n	8006730 <__smakebuf_r+0x18>
 8006750:	f023 0303 	bic.w	r3, r3, #3
 8006754:	f043 0302 	orr.w	r3, r3, #2
 8006758:	81a3      	strh	r3, [r4, #12]
 800675a:	e7e3      	b.n	8006724 <__smakebuf_r+0xc>
 800675c:	4b0d      	ldr	r3, [pc, #52]	; (8006794 <__smakebuf_r+0x7c>)
 800675e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006760:	89a3      	ldrh	r3, [r4, #12]
 8006762:	6020      	str	r0, [r4, #0]
 8006764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006768:	81a3      	strh	r3, [r4, #12]
 800676a:	9b00      	ldr	r3, [sp, #0]
 800676c:	6120      	str	r0, [r4, #16]
 800676e:	6163      	str	r3, [r4, #20]
 8006770:	9b01      	ldr	r3, [sp, #4]
 8006772:	b15b      	cbz	r3, 800678c <__smakebuf_r+0x74>
 8006774:	4630      	mov	r0, r6
 8006776:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800677a:	f000 fca7 	bl	80070cc <_isatty_r>
 800677e:	b128      	cbz	r0, 800678c <__smakebuf_r+0x74>
 8006780:	89a3      	ldrh	r3, [r4, #12]
 8006782:	f023 0303 	bic.w	r3, r3, #3
 8006786:	f043 0301 	orr.w	r3, r3, #1
 800678a:	81a3      	strh	r3, [r4, #12]
 800678c:	89a0      	ldrh	r0, [r4, #12]
 800678e:	4305      	orrs	r5, r0
 8006790:	81a5      	strh	r5, [r4, #12]
 8006792:	e7cd      	b.n	8006730 <__smakebuf_r+0x18>
 8006794:	08006525 	.word	0x08006525

08006798 <_free_r>:
 8006798:	b538      	push	{r3, r4, r5, lr}
 800679a:	4605      	mov	r5, r0
 800679c:	2900      	cmp	r1, #0
 800679e:	d040      	beq.n	8006822 <_free_r+0x8a>
 80067a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067a4:	1f0c      	subs	r4, r1, #4
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	bfb8      	it	lt
 80067aa:	18e4      	addlt	r4, r4, r3
 80067ac:	f000 fcbe 	bl	800712c <__malloc_lock>
 80067b0:	4a1c      	ldr	r2, [pc, #112]	; (8006824 <_free_r+0x8c>)
 80067b2:	6813      	ldr	r3, [r2, #0]
 80067b4:	b933      	cbnz	r3, 80067c4 <_free_r+0x2c>
 80067b6:	6063      	str	r3, [r4, #4]
 80067b8:	6014      	str	r4, [r2, #0]
 80067ba:	4628      	mov	r0, r5
 80067bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067c0:	f000 bcba 	b.w	8007138 <__malloc_unlock>
 80067c4:	42a3      	cmp	r3, r4
 80067c6:	d908      	bls.n	80067da <_free_r+0x42>
 80067c8:	6820      	ldr	r0, [r4, #0]
 80067ca:	1821      	adds	r1, r4, r0
 80067cc:	428b      	cmp	r3, r1
 80067ce:	bf01      	itttt	eq
 80067d0:	6819      	ldreq	r1, [r3, #0]
 80067d2:	685b      	ldreq	r3, [r3, #4]
 80067d4:	1809      	addeq	r1, r1, r0
 80067d6:	6021      	streq	r1, [r4, #0]
 80067d8:	e7ed      	b.n	80067b6 <_free_r+0x1e>
 80067da:	461a      	mov	r2, r3
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	b10b      	cbz	r3, 80067e4 <_free_r+0x4c>
 80067e0:	42a3      	cmp	r3, r4
 80067e2:	d9fa      	bls.n	80067da <_free_r+0x42>
 80067e4:	6811      	ldr	r1, [r2, #0]
 80067e6:	1850      	adds	r0, r2, r1
 80067e8:	42a0      	cmp	r0, r4
 80067ea:	d10b      	bne.n	8006804 <_free_r+0x6c>
 80067ec:	6820      	ldr	r0, [r4, #0]
 80067ee:	4401      	add	r1, r0
 80067f0:	1850      	adds	r0, r2, r1
 80067f2:	4283      	cmp	r3, r0
 80067f4:	6011      	str	r1, [r2, #0]
 80067f6:	d1e0      	bne.n	80067ba <_free_r+0x22>
 80067f8:	6818      	ldr	r0, [r3, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	4401      	add	r1, r0
 80067fe:	6011      	str	r1, [r2, #0]
 8006800:	6053      	str	r3, [r2, #4]
 8006802:	e7da      	b.n	80067ba <_free_r+0x22>
 8006804:	d902      	bls.n	800680c <_free_r+0x74>
 8006806:	230c      	movs	r3, #12
 8006808:	602b      	str	r3, [r5, #0]
 800680a:	e7d6      	b.n	80067ba <_free_r+0x22>
 800680c:	6820      	ldr	r0, [r4, #0]
 800680e:	1821      	adds	r1, r4, r0
 8006810:	428b      	cmp	r3, r1
 8006812:	bf01      	itttt	eq
 8006814:	6819      	ldreq	r1, [r3, #0]
 8006816:	685b      	ldreq	r3, [r3, #4]
 8006818:	1809      	addeq	r1, r1, r0
 800681a:	6021      	streq	r1, [r4, #0]
 800681c:	6063      	str	r3, [r4, #4]
 800681e:	6054      	str	r4, [r2, #4]
 8006820:	e7cb      	b.n	80067ba <_free_r+0x22>
 8006822:	bd38      	pop	{r3, r4, r5, pc}
 8006824:	200012a0 	.word	0x200012a0

08006828 <sbrk_aligned>:
 8006828:	b570      	push	{r4, r5, r6, lr}
 800682a:	4e0e      	ldr	r6, [pc, #56]	; (8006864 <sbrk_aligned+0x3c>)
 800682c:	460c      	mov	r4, r1
 800682e:	6831      	ldr	r1, [r6, #0]
 8006830:	4605      	mov	r5, r0
 8006832:	b911      	cbnz	r1, 800683a <sbrk_aligned+0x12>
 8006834:	f000 fbc2 	bl	8006fbc <_sbrk_r>
 8006838:	6030      	str	r0, [r6, #0]
 800683a:	4621      	mov	r1, r4
 800683c:	4628      	mov	r0, r5
 800683e:	f000 fbbd 	bl	8006fbc <_sbrk_r>
 8006842:	1c43      	adds	r3, r0, #1
 8006844:	d00a      	beq.n	800685c <sbrk_aligned+0x34>
 8006846:	1cc4      	adds	r4, r0, #3
 8006848:	f024 0403 	bic.w	r4, r4, #3
 800684c:	42a0      	cmp	r0, r4
 800684e:	d007      	beq.n	8006860 <sbrk_aligned+0x38>
 8006850:	1a21      	subs	r1, r4, r0
 8006852:	4628      	mov	r0, r5
 8006854:	f000 fbb2 	bl	8006fbc <_sbrk_r>
 8006858:	3001      	adds	r0, #1
 800685a:	d101      	bne.n	8006860 <sbrk_aligned+0x38>
 800685c:	f04f 34ff 	mov.w	r4, #4294967295
 8006860:	4620      	mov	r0, r4
 8006862:	bd70      	pop	{r4, r5, r6, pc}
 8006864:	200012a4 	.word	0x200012a4

08006868 <_malloc_r>:
 8006868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800686c:	1ccd      	adds	r5, r1, #3
 800686e:	f025 0503 	bic.w	r5, r5, #3
 8006872:	3508      	adds	r5, #8
 8006874:	2d0c      	cmp	r5, #12
 8006876:	bf38      	it	cc
 8006878:	250c      	movcc	r5, #12
 800687a:	2d00      	cmp	r5, #0
 800687c:	4607      	mov	r7, r0
 800687e:	db01      	blt.n	8006884 <_malloc_r+0x1c>
 8006880:	42a9      	cmp	r1, r5
 8006882:	d905      	bls.n	8006890 <_malloc_r+0x28>
 8006884:	230c      	movs	r3, #12
 8006886:	2600      	movs	r6, #0
 8006888:	603b      	str	r3, [r7, #0]
 800688a:	4630      	mov	r0, r6
 800688c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006890:	4e2e      	ldr	r6, [pc, #184]	; (800694c <_malloc_r+0xe4>)
 8006892:	f000 fc4b 	bl	800712c <__malloc_lock>
 8006896:	6833      	ldr	r3, [r6, #0]
 8006898:	461c      	mov	r4, r3
 800689a:	bb34      	cbnz	r4, 80068ea <_malloc_r+0x82>
 800689c:	4629      	mov	r1, r5
 800689e:	4638      	mov	r0, r7
 80068a0:	f7ff ffc2 	bl	8006828 <sbrk_aligned>
 80068a4:	1c43      	adds	r3, r0, #1
 80068a6:	4604      	mov	r4, r0
 80068a8:	d14d      	bne.n	8006946 <_malloc_r+0xde>
 80068aa:	6834      	ldr	r4, [r6, #0]
 80068ac:	4626      	mov	r6, r4
 80068ae:	2e00      	cmp	r6, #0
 80068b0:	d140      	bne.n	8006934 <_malloc_r+0xcc>
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	4631      	mov	r1, r6
 80068b6:	4638      	mov	r0, r7
 80068b8:	eb04 0803 	add.w	r8, r4, r3
 80068bc:	f000 fb7e 	bl	8006fbc <_sbrk_r>
 80068c0:	4580      	cmp	r8, r0
 80068c2:	d13a      	bne.n	800693a <_malloc_r+0xd2>
 80068c4:	6821      	ldr	r1, [r4, #0]
 80068c6:	3503      	adds	r5, #3
 80068c8:	1a6d      	subs	r5, r5, r1
 80068ca:	f025 0503 	bic.w	r5, r5, #3
 80068ce:	3508      	adds	r5, #8
 80068d0:	2d0c      	cmp	r5, #12
 80068d2:	bf38      	it	cc
 80068d4:	250c      	movcc	r5, #12
 80068d6:	4638      	mov	r0, r7
 80068d8:	4629      	mov	r1, r5
 80068da:	f7ff ffa5 	bl	8006828 <sbrk_aligned>
 80068de:	3001      	adds	r0, #1
 80068e0:	d02b      	beq.n	800693a <_malloc_r+0xd2>
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	442b      	add	r3, r5
 80068e6:	6023      	str	r3, [r4, #0]
 80068e8:	e00e      	b.n	8006908 <_malloc_r+0xa0>
 80068ea:	6822      	ldr	r2, [r4, #0]
 80068ec:	1b52      	subs	r2, r2, r5
 80068ee:	d41e      	bmi.n	800692e <_malloc_r+0xc6>
 80068f0:	2a0b      	cmp	r2, #11
 80068f2:	d916      	bls.n	8006922 <_malloc_r+0xba>
 80068f4:	1961      	adds	r1, r4, r5
 80068f6:	42a3      	cmp	r3, r4
 80068f8:	6025      	str	r5, [r4, #0]
 80068fa:	bf18      	it	ne
 80068fc:	6059      	strne	r1, [r3, #4]
 80068fe:	6863      	ldr	r3, [r4, #4]
 8006900:	bf08      	it	eq
 8006902:	6031      	streq	r1, [r6, #0]
 8006904:	5162      	str	r2, [r4, r5]
 8006906:	604b      	str	r3, [r1, #4]
 8006908:	4638      	mov	r0, r7
 800690a:	f104 060b 	add.w	r6, r4, #11
 800690e:	f000 fc13 	bl	8007138 <__malloc_unlock>
 8006912:	f026 0607 	bic.w	r6, r6, #7
 8006916:	1d23      	adds	r3, r4, #4
 8006918:	1af2      	subs	r2, r6, r3
 800691a:	d0b6      	beq.n	800688a <_malloc_r+0x22>
 800691c:	1b9b      	subs	r3, r3, r6
 800691e:	50a3      	str	r3, [r4, r2]
 8006920:	e7b3      	b.n	800688a <_malloc_r+0x22>
 8006922:	6862      	ldr	r2, [r4, #4]
 8006924:	42a3      	cmp	r3, r4
 8006926:	bf0c      	ite	eq
 8006928:	6032      	streq	r2, [r6, #0]
 800692a:	605a      	strne	r2, [r3, #4]
 800692c:	e7ec      	b.n	8006908 <_malloc_r+0xa0>
 800692e:	4623      	mov	r3, r4
 8006930:	6864      	ldr	r4, [r4, #4]
 8006932:	e7b2      	b.n	800689a <_malloc_r+0x32>
 8006934:	4634      	mov	r4, r6
 8006936:	6876      	ldr	r6, [r6, #4]
 8006938:	e7b9      	b.n	80068ae <_malloc_r+0x46>
 800693a:	230c      	movs	r3, #12
 800693c:	4638      	mov	r0, r7
 800693e:	603b      	str	r3, [r7, #0]
 8006940:	f000 fbfa 	bl	8007138 <__malloc_unlock>
 8006944:	e7a1      	b.n	800688a <_malloc_r+0x22>
 8006946:	6025      	str	r5, [r4, #0]
 8006948:	e7de      	b.n	8006908 <_malloc_r+0xa0>
 800694a:	bf00      	nop
 800694c:	200012a0 	.word	0x200012a0

08006950 <__sfputc_r>:
 8006950:	6893      	ldr	r3, [r2, #8]
 8006952:	b410      	push	{r4}
 8006954:	3b01      	subs	r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	6093      	str	r3, [r2, #8]
 800695a:	da07      	bge.n	800696c <__sfputc_r+0x1c>
 800695c:	6994      	ldr	r4, [r2, #24]
 800695e:	42a3      	cmp	r3, r4
 8006960:	db01      	blt.n	8006966 <__sfputc_r+0x16>
 8006962:	290a      	cmp	r1, #10
 8006964:	d102      	bne.n	800696c <__sfputc_r+0x1c>
 8006966:	bc10      	pop	{r4}
 8006968:	f7ff bc3a 	b.w	80061e0 <__swbuf_r>
 800696c:	6813      	ldr	r3, [r2, #0]
 800696e:	1c58      	adds	r0, r3, #1
 8006970:	6010      	str	r0, [r2, #0]
 8006972:	7019      	strb	r1, [r3, #0]
 8006974:	4608      	mov	r0, r1
 8006976:	bc10      	pop	{r4}
 8006978:	4770      	bx	lr

0800697a <__sfputs_r>:
 800697a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697c:	4606      	mov	r6, r0
 800697e:	460f      	mov	r7, r1
 8006980:	4614      	mov	r4, r2
 8006982:	18d5      	adds	r5, r2, r3
 8006984:	42ac      	cmp	r4, r5
 8006986:	d101      	bne.n	800698c <__sfputs_r+0x12>
 8006988:	2000      	movs	r0, #0
 800698a:	e007      	b.n	800699c <__sfputs_r+0x22>
 800698c:	463a      	mov	r2, r7
 800698e:	4630      	mov	r0, r6
 8006990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006994:	f7ff ffdc 	bl	8006950 <__sfputc_r>
 8006998:	1c43      	adds	r3, r0, #1
 800699a:	d1f3      	bne.n	8006984 <__sfputs_r+0xa>
 800699c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069a0 <_vfiprintf_r>:
 80069a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a4:	460d      	mov	r5, r1
 80069a6:	4614      	mov	r4, r2
 80069a8:	4698      	mov	r8, r3
 80069aa:	4606      	mov	r6, r0
 80069ac:	b09d      	sub	sp, #116	; 0x74
 80069ae:	b118      	cbz	r0, 80069b8 <_vfiprintf_r+0x18>
 80069b0:	6983      	ldr	r3, [r0, #24]
 80069b2:	b90b      	cbnz	r3, 80069b8 <_vfiprintf_r+0x18>
 80069b4:	f7ff fdea 	bl	800658c <__sinit>
 80069b8:	4b89      	ldr	r3, [pc, #548]	; (8006be0 <_vfiprintf_r+0x240>)
 80069ba:	429d      	cmp	r5, r3
 80069bc:	d11b      	bne.n	80069f6 <_vfiprintf_r+0x56>
 80069be:	6875      	ldr	r5, [r6, #4]
 80069c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069c2:	07d9      	lsls	r1, r3, #31
 80069c4:	d405      	bmi.n	80069d2 <_vfiprintf_r+0x32>
 80069c6:	89ab      	ldrh	r3, [r5, #12]
 80069c8:	059a      	lsls	r2, r3, #22
 80069ca:	d402      	bmi.n	80069d2 <_vfiprintf_r+0x32>
 80069cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069ce:	f7ff fe7b 	bl	80066c8 <__retarget_lock_acquire_recursive>
 80069d2:	89ab      	ldrh	r3, [r5, #12]
 80069d4:	071b      	lsls	r3, r3, #28
 80069d6:	d501      	bpl.n	80069dc <_vfiprintf_r+0x3c>
 80069d8:	692b      	ldr	r3, [r5, #16]
 80069da:	b9eb      	cbnz	r3, 8006a18 <_vfiprintf_r+0x78>
 80069dc:	4629      	mov	r1, r5
 80069de:	4630      	mov	r0, r6
 80069e0:	f7ff fc50 	bl	8006284 <__swsetup_r>
 80069e4:	b1c0      	cbz	r0, 8006a18 <_vfiprintf_r+0x78>
 80069e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069e8:	07dc      	lsls	r4, r3, #31
 80069ea:	d50e      	bpl.n	8006a0a <_vfiprintf_r+0x6a>
 80069ec:	f04f 30ff 	mov.w	r0, #4294967295
 80069f0:	b01d      	add	sp, #116	; 0x74
 80069f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f6:	4b7b      	ldr	r3, [pc, #492]	; (8006be4 <_vfiprintf_r+0x244>)
 80069f8:	429d      	cmp	r5, r3
 80069fa:	d101      	bne.n	8006a00 <_vfiprintf_r+0x60>
 80069fc:	68b5      	ldr	r5, [r6, #8]
 80069fe:	e7df      	b.n	80069c0 <_vfiprintf_r+0x20>
 8006a00:	4b79      	ldr	r3, [pc, #484]	; (8006be8 <_vfiprintf_r+0x248>)
 8006a02:	429d      	cmp	r5, r3
 8006a04:	bf08      	it	eq
 8006a06:	68f5      	ldreq	r5, [r6, #12]
 8006a08:	e7da      	b.n	80069c0 <_vfiprintf_r+0x20>
 8006a0a:	89ab      	ldrh	r3, [r5, #12]
 8006a0c:	0598      	lsls	r0, r3, #22
 8006a0e:	d4ed      	bmi.n	80069ec <_vfiprintf_r+0x4c>
 8006a10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a12:	f7ff fe5a 	bl	80066ca <__retarget_lock_release_recursive>
 8006a16:	e7e9      	b.n	80069ec <_vfiprintf_r+0x4c>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a1c:	2320      	movs	r3, #32
 8006a1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a22:	2330      	movs	r3, #48	; 0x30
 8006a24:	f04f 0901 	mov.w	r9, #1
 8006a28:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a2c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006bec <_vfiprintf_r+0x24c>
 8006a30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a34:	4623      	mov	r3, r4
 8006a36:	469a      	mov	sl, r3
 8006a38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a3c:	b10a      	cbz	r2, 8006a42 <_vfiprintf_r+0xa2>
 8006a3e:	2a25      	cmp	r2, #37	; 0x25
 8006a40:	d1f9      	bne.n	8006a36 <_vfiprintf_r+0x96>
 8006a42:	ebba 0b04 	subs.w	fp, sl, r4
 8006a46:	d00b      	beq.n	8006a60 <_vfiprintf_r+0xc0>
 8006a48:	465b      	mov	r3, fp
 8006a4a:	4622      	mov	r2, r4
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	4630      	mov	r0, r6
 8006a50:	f7ff ff93 	bl	800697a <__sfputs_r>
 8006a54:	3001      	adds	r0, #1
 8006a56:	f000 80aa 	beq.w	8006bae <_vfiprintf_r+0x20e>
 8006a5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a5c:	445a      	add	r2, fp
 8006a5e:	9209      	str	r2, [sp, #36]	; 0x24
 8006a60:	f89a 3000 	ldrb.w	r3, [sl]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 80a2 	beq.w	8006bae <_vfiprintf_r+0x20e>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a74:	f10a 0a01 	add.w	sl, sl, #1
 8006a78:	9304      	str	r3, [sp, #16]
 8006a7a:	9307      	str	r3, [sp, #28]
 8006a7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a80:	931a      	str	r3, [sp, #104]	; 0x68
 8006a82:	4654      	mov	r4, sl
 8006a84:	2205      	movs	r2, #5
 8006a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a8a:	4858      	ldr	r0, [pc, #352]	; (8006bec <_vfiprintf_r+0x24c>)
 8006a8c:	f000 fb40 	bl	8007110 <memchr>
 8006a90:	9a04      	ldr	r2, [sp, #16]
 8006a92:	b9d8      	cbnz	r0, 8006acc <_vfiprintf_r+0x12c>
 8006a94:	06d1      	lsls	r1, r2, #27
 8006a96:	bf44      	itt	mi
 8006a98:	2320      	movmi	r3, #32
 8006a9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a9e:	0713      	lsls	r3, r2, #28
 8006aa0:	bf44      	itt	mi
 8006aa2:	232b      	movmi	r3, #43	; 0x2b
 8006aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aa8:	f89a 3000 	ldrb.w	r3, [sl]
 8006aac:	2b2a      	cmp	r3, #42	; 0x2a
 8006aae:	d015      	beq.n	8006adc <_vfiprintf_r+0x13c>
 8006ab0:	4654      	mov	r4, sl
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	f04f 0c0a 	mov.w	ip, #10
 8006ab8:	9a07      	ldr	r2, [sp, #28]
 8006aba:	4621      	mov	r1, r4
 8006abc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ac0:	3b30      	subs	r3, #48	; 0x30
 8006ac2:	2b09      	cmp	r3, #9
 8006ac4:	d94e      	bls.n	8006b64 <_vfiprintf_r+0x1c4>
 8006ac6:	b1b0      	cbz	r0, 8006af6 <_vfiprintf_r+0x156>
 8006ac8:	9207      	str	r2, [sp, #28]
 8006aca:	e014      	b.n	8006af6 <_vfiprintf_r+0x156>
 8006acc:	eba0 0308 	sub.w	r3, r0, r8
 8006ad0:	fa09 f303 	lsl.w	r3, r9, r3
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	46a2      	mov	sl, r4
 8006ad8:	9304      	str	r3, [sp, #16]
 8006ada:	e7d2      	b.n	8006a82 <_vfiprintf_r+0xe2>
 8006adc:	9b03      	ldr	r3, [sp, #12]
 8006ade:	1d19      	adds	r1, r3, #4
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	9103      	str	r1, [sp, #12]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	bfbb      	ittet	lt
 8006ae8:	425b      	neglt	r3, r3
 8006aea:	f042 0202 	orrlt.w	r2, r2, #2
 8006aee:	9307      	strge	r3, [sp, #28]
 8006af0:	9307      	strlt	r3, [sp, #28]
 8006af2:	bfb8      	it	lt
 8006af4:	9204      	strlt	r2, [sp, #16]
 8006af6:	7823      	ldrb	r3, [r4, #0]
 8006af8:	2b2e      	cmp	r3, #46	; 0x2e
 8006afa:	d10c      	bne.n	8006b16 <_vfiprintf_r+0x176>
 8006afc:	7863      	ldrb	r3, [r4, #1]
 8006afe:	2b2a      	cmp	r3, #42	; 0x2a
 8006b00:	d135      	bne.n	8006b6e <_vfiprintf_r+0x1ce>
 8006b02:	9b03      	ldr	r3, [sp, #12]
 8006b04:	3402      	adds	r4, #2
 8006b06:	1d1a      	adds	r2, r3, #4
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	9203      	str	r2, [sp, #12]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	bfb8      	it	lt
 8006b10:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b14:	9305      	str	r3, [sp, #20]
 8006b16:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006bf0 <_vfiprintf_r+0x250>
 8006b1a:	2203      	movs	r2, #3
 8006b1c:	4650      	mov	r0, sl
 8006b1e:	7821      	ldrb	r1, [r4, #0]
 8006b20:	f000 faf6 	bl	8007110 <memchr>
 8006b24:	b140      	cbz	r0, 8006b38 <_vfiprintf_r+0x198>
 8006b26:	2340      	movs	r3, #64	; 0x40
 8006b28:	eba0 000a 	sub.w	r0, r0, sl
 8006b2c:	fa03 f000 	lsl.w	r0, r3, r0
 8006b30:	9b04      	ldr	r3, [sp, #16]
 8006b32:	3401      	adds	r4, #1
 8006b34:	4303      	orrs	r3, r0
 8006b36:	9304      	str	r3, [sp, #16]
 8006b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b3c:	2206      	movs	r2, #6
 8006b3e:	482d      	ldr	r0, [pc, #180]	; (8006bf4 <_vfiprintf_r+0x254>)
 8006b40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b44:	f000 fae4 	bl	8007110 <memchr>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	d03f      	beq.n	8006bcc <_vfiprintf_r+0x22c>
 8006b4c:	4b2a      	ldr	r3, [pc, #168]	; (8006bf8 <_vfiprintf_r+0x258>)
 8006b4e:	bb1b      	cbnz	r3, 8006b98 <_vfiprintf_r+0x1f8>
 8006b50:	9b03      	ldr	r3, [sp, #12]
 8006b52:	3307      	adds	r3, #7
 8006b54:	f023 0307 	bic.w	r3, r3, #7
 8006b58:	3308      	adds	r3, #8
 8006b5a:	9303      	str	r3, [sp, #12]
 8006b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b5e:	443b      	add	r3, r7
 8006b60:	9309      	str	r3, [sp, #36]	; 0x24
 8006b62:	e767      	b.n	8006a34 <_vfiprintf_r+0x94>
 8006b64:	460c      	mov	r4, r1
 8006b66:	2001      	movs	r0, #1
 8006b68:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b6c:	e7a5      	b.n	8006aba <_vfiprintf_r+0x11a>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	f04f 0c0a 	mov.w	ip, #10
 8006b74:	4619      	mov	r1, r3
 8006b76:	3401      	adds	r4, #1
 8006b78:	9305      	str	r3, [sp, #20]
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b80:	3a30      	subs	r2, #48	; 0x30
 8006b82:	2a09      	cmp	r2, #9
 8006b84:	d903      	bls.n	8006b8e <_vfiprintf_r+0x1ee>
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d0c5      	beq.n	8006b16 <_vfiprintf_r+0x176>
 8006b8a:	9105      	str	r1, [sp, #20]
 8006b8c:	e7c3      	b.n	8006b16 <_vfiprintf_r+0x176>
 8006b8e:	4604      	mov	r4, r0
 8006b90:	2301      	movs	r3, #1
 8006b92:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b96:	e7f0      	b.n	8006b7a <_vfiprintf_r+0x1da>
 8006b98:	ab03      	add	r3, sp, #12
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	462a      	mov	r2, r5
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	4b16      	ldr	r3, [pc, #88]	; (8006bfc <_vfiprintf_r+0x25c>)
 8006ba2:	a904      	add	r1, sp, #16
 8006ba4:	f3af 8000 	nop.w
 8006ba8:	4607      	mov	r7, r0
 8006baa:	1c78      	adds	r0, r7, #1
 8006bac:	d1d6      	bne.n	8006b5c <_vfiprintf_r+0x1bc>
 8006bae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bb0:	07d9      	lsls	r1, r3, #31
 8006bb2:	d405      	bmi.n	8006bc0 <_vfiprintf_r+0x220>
 8006bb4:	89ab      	ldrh	r3, [r5, #12]
 8006bb6:	059a      	lsls	r2, r3, #22
 8006bb8:	d402      	bmi.n	8006bc0 <_vfiprintf_r+0x220>
 8006bba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bbc:	f7ff fd85 	bl	80066ca <__retarget_lock_release_recursive>
 8006bc0:	89ab      	ldrh	r3, [r5, #12]
 8006bc2:	065b      	lsls	r3, r3, #25
 8006bc4:	f53f af12 	bmi.w	80069ec <_vfiprintf_r+0x4c>
 8006bc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bca:	e711      	b.n	80069f0 <_vfiprintf_r+0x50>
 8006bcc:	ab03      	add	r3, sp, #12
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	462a      	mov	r2, r5
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	4b09      	ldr	r3, [pc, #36]	; (8006bfc <_vfiprintf_r+0x25c>)
 8006bd6:	a904      	add	r1, sp, #16
 8006bd8:	f000 f882 	bl	8006ce0 <_printf_i>
 8006bdc:	e7e4      	b.n	8006ba8 <_vfiprintf_r+0x208>
 8006bde:	bf00      	nop
 8006be0:	08007500 	.word	0x08007500
 8006be4:	08007520 	.word	0x08007520
 8006be8:	080074e0 	.word	0x080074e0
 8006bec:	08007540 	.word	0x08007540
 8006bf0:	08007546 	.word	0x08007546
 8006bf4:	0800754a 	.word	0x0800754a
 8006bf8:	00000000 	.word	0x00000000
 8006bfc:	0800697b 	.word	0x0800697b

08006c00 <_printf_common>:
 8006c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c04:	4616      	mov	r6, r2
 8006c06:	4699      	mov	r9, r3
 8006c08:	688a      	ldr	r2, [r1, #8]
 8006c0a:	690b      	ldr	r3, [r1, #16]
 8006c0c:	4607      	mov	r7, r0
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	bfb8      	it	lt
 8006c12:	4613      	movlt	r3, r2
 8006c14:	6033      	str	r3, [r6, #0]
 8006c16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c1a:	460c      	mov	r4, r1
 8006c1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c20:	b10a      	cbz	r2, 8006c26 <_printf_common+0x26>
 8006c22:	3301      	adds	r3, #1
 8006c24:	6033      	str	r3, [r6, #0]
 8006c26:	6823      	ldr	r3, [r4, #0]
 8006c28:	0699      	lsls	r1, r3, #26
 8006c2a:	bf42      	ittt	mi
 8006c2c:	6833      	ldrmi	r3, [r6, #0]
 8006c2e:	3302      	addmi	r3, #2
 8006c30:	6033      	strmi	r3, [r6, #0]
 8006c32:	6825      	ldr	r5, [r4, #0]
 8006c34:	f015 0506 	ands.w	r5, r5, #6
 8006c38:	d106      	bne.n	8006c48 <_printf_common+0x48>
 8006c3a:	f104 0a19 	add.w	sl, r4, #25
 8006c3e:	68e3      	ldr	r3, [r4, #12]
 8006c40:	6832      	ldr	r2, [r6, #0]
 8006c42:	1a9b      	subs	r3, r3, r2
 8006c44:	42ab      	cmp	r3, r5
 8006c46:	dc28      	bgt.n	8006c9a <_printf_common+0x9a>
 8006c48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c4c:	1e13      	subs	r3, r2, #0
 8006c4e:	6822      	ldr	r2, [r4, #0]
 8006c50:	bf18      	it	ne
 8006c52:	2301      	movne	r3, #1
 8006c54:	0692      	lsls	r2, r2, #26
 8006c56:	d42d      	bmi.n	8006cb4 <_printf_common+0xb4>
 8006c58:	4649      	mov	r1, r9
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c60:	47c0      	blx	r8
 8006c62:	3001      	adds	r0, #1
 8006c64:	d020      	beq.n	8006ca8 <_printf_common+0xa8>
 8006c66:	6823      	ldr	r3, [r4, #0]
 8006c68:	68e5      	ldr	r5, [r4, #12]
 8006c6a:	f003 0306 	and.w	r3, r3, #6
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	bf18      	it	ne
 8006c72:	2500      	movne	r5, #0
 8006c74:	6832      	ldr	r2, [r6, #0]
 8006c76:	f04f 0600 	mov.w	r6, #0
 8006c7a:	68a3      	ldr	r3, [r4, #8]
 8006c7c:	bf08      	it	eq
 8006c7e:	1aad      	subeq	r5, r5, r2
 8006c80:	6922      	ldr	r2, [r4, #16]
 8006c82:	bf08      	it	eq
 8006c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	bfc4      	itt	gt
 8006c8c:	1a9b      	subgt	r3, r3, r2
 8006c8e:	18ed      	addgt	r5, r5, r3
 8006c90:	341a      	adds	r4, #26
 8006c92:	42b5      	cmp	r5, r6
 8006c94:	d11a      	bne.n	8006ccc <_printf_common+0xcc>
 8006c96:	2000      	movs	r0, #0
 8006c98:	e008      	b.n	8006cac <_printf_common+0xac>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	4652      	mov	r2, sl
 8006c9e:	4649      	mov	r1, r9
 8006ca0:	4638      	mov	r0, r7
 8006ca2:	47c0      	blx	r8
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	d103      	bne.n	8006cb0 <_printf_common+0xb0>
 8006ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb0:	3501      	adds	r5, #1
 8006cb2:	e7c4      	b.n	8006c3e <_printf_common+0x3e>
 8006cb4:	2030      	movs	r0, #48	; 0x30
 8006cb6:	18e1      	adds	r1, r4, r3
 8006cb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cbc:	1c5a      	adds	r2, r3, #1
 8006cbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006cc2:	4422      	add	r2, r4
 8006cc4:	3302      	adds	r3, #2
 8006cc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cca:	e7c5      	b.n	8006c58 <_printf_common+0x58>
 8006ccc:	2301      	movs	r3, #1
 8006cce:	4622      	mov	r2, r4
 8006cd0:	4649      	mov	r1, r9
 8006cd2:	4638      	mov	r0, r7
 8006cd4:	47c0      	blx	r8
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	d0e6      	beq.n	8006ca8 <_printf_common+0xa8>
 8006cda:	3601      	adds	r6, #1
 8006cdc:	e7d9      	b.n	8006c92 <_printf_common+0x92>
	...

08006ce0 <_printf_i>:
 8006ce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ce4:	7e0f      	ldrb	r7, [r1, #24]
 8006ce6:	4691      	mov	r9, r2
 8006ce8:	2f78      	cmp	r7, #120	; 0x78
 8006cea:	4680      	mov	r8, r0
 8006cec:	460c      	mov	r4, r1
 8006cee:	469a      	mov	sl, r3
 8006cf0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006cf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006cf6:	d807      	bhi.n	8006d08 <_printf_i+0x28>
 8006cf8:	2f62      	cmp	r7, #98	; 0x62
 8006cfa:	d80a      	bhi.n	8006d12 <_printf_i+0x32>
 8006cfc:	2f00      	cmp	r7, #0
 8006cfe:	f000 80d9 	beq.w	8006eb4 <_printf_i+0x1d4>
 8006d02:	2f58      	cmp	r7, #88	; 0x58
 8006d04:	f000 80a4 	beq.w	8006e50 <_printf_i+0x170>
 8006d08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d10:	e03a      	b.n	8006d88 <_printf_i+0xa8>
 8006d12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d16:	2b15      	cmp	r3, #21
 8006d18:	d8f6      	bhi.n	8006d08 <_printf_i+0x28>
 8006d1a:	a101      	add	r1, pc, #4	; (adr r1, 8006d20 <_printf_i+0x40>)
 8006d1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d20:	08006d79 	.word	0x08006d79
 8006d24:	08006d8d 	.word	0x08006d8d
 8006d28:	08006d09 	.word	0x08006d09
 8006d2c:	08006d09 	.word	0x08006d09
 8006d30:	08006d09 	.word	0x08006d09
 8006d34:	08006d09 	.word	0x08006d09
 8006d38:	08006d8d 	.word	0x08006d8d
 8006d3c:	08006d09 	.word	0x08006d09
 8006d40:	08006d09 	.word	0x08006d09
 8006d44:	08006d09 	.word	0x08006d09
 8006d48:	08006d09 	.word	0x08006d09
 8006d4c:	08006e9b 	.word	0x08006e9b
 8006d50:	08006dbd 	.word	0x08006dbd
 8006d54:	08006e7d 	.word	0x08006e7d
 8006d58:	08006d09 	.word	0x08006d09
 8006d5c:	08006d09 	.word	0x08006d09
 8006d60:	08006ebd 	.word	0x08006ebd
 8006d64:	08006d09 	.word	0x08006d09
 8006d68:	08006dbd 	.word	0x08006dbd
 8006d6c:	08006d09 	.word	0x08006d09
 8006d70:	08006d09 	.word	0x08006d09
 8006d74:	08006e85 	.word	0x08006e85
 8006d78:	682b      	ldr	r3, [r5, #0]
 8006d7a:	1d1a      	adds	r2, r3, #4
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	602a      	str	r2, [r5, #0]
 8006d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e0a4      	b.n	8006ed6 <_printf_i+0x1f6>
 8006d8c:	6820      	ldr	r0, [r4, #0]
 8006d8e:	6829      	ldr	r1, [r5, #0]
 8006d90:	0606      	lsls	r6, r0, #24
 8006d92:	f101 0304 	add.w	r3, r1, #4
 8006d96:	d50a      	bpl.n	8006dae <_printf_i+0xce>
 8006d98:	680e      	ldr	r6, [r1, #0]
 8006d9a:	602b      	str	r3, [r5, #0]
 8006d9c:	2e00      	cmp	r6, #0
 8006d9e:	da03      	bge.n	8006da8 <_printf_i+0xc8>
 8006da0:	232d      	movs	r3, #45	; 0x2d
 8006da2:	4276      	negs	r6, r6
 8006da4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006da8:	230a      	movs	r3, #10
 8006daa:	485e      	ldr	r0, [pc, #376]	; (8006f24 <_printf_i+0x244>)
 8006dac:	e019      	b.n	8006de2 <_printf_i+0x102>
 8006dae:	680e      	ldr	r6, [r1, #0]
 8006db0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006db4:	602b      	str	r3, [r5, #0]
 8006db6:	bf18      	it	ne
 8006db8:	b236      	sxthne	r6, r6
 8006dba:	e7ef      	b.n	8006d9c <_printf_i+0xbc>
 8006dbc:	682b      	ldr	r3, [r5, #0]
 8006dbe:	6820      	ldr	r0, [r4, #0]
 8006dc0:	1d19      	adds	r1, r3, #4
 8006dc2:	6029      	str	r1, [r5, #0]
 8006dc4:	0601      	lsls	r1, r0, #24
 8006dc6:	d501      	bpl.n	8006dcc <_printf_i+0xec>
 8006dc8:	681e      	ldr	r6, [r3, #0]
 8006dca:	e002      	b.n	8006dd2 <_printf_i+0xf2>
 8006dcc:	0646      	lsls	r6, r0, #25
 8006dce:	d5fb      	bpl.n	8006dc8 <_printf_i+0xe8>
 8006dd0:	881e      	ldrh	r6, [r3, #0]
 8006dd2:	2f6f      	cmp	r7, #111	; 0x6f
 8006dd4:	bf0c      	ite	eq
 8006dd6:	2308      	moveq	r3, #8
 8006dd8:	230a      	movne	r3, #10
 8006dda:	4852      	ldr	r0, [pc, #328]	; (8006f24 <_printf_i+0x244>)
 8006ddc:	2100      	movs	r1, #0
 8006dde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006de2:	6865      	ldr	r5, [r4, #4]
 8006de4:	2d00      	cmp	r5, #0
 8006de6:	bfa8      	it	ge
 8006de8:	6821      	ldrge	r1, [r4, #0]
 8006dea:	60a5      	str	r5, [r4, #8]
 8006dec:	bfa4      	itt	ge
 8006dee:	f021 0104 	bicge.w	r1, r1, #4
 8006df2:	6021      	strge	r1, [r4, #0]
 8006df4:	b90e      	cbnz	r6, 8006dfa <_printf_i+0x11a>
 8006df6:	2d00      	cmp	r5, #0
 8006df8:	d04d      	beq.n	8006e96 <_printf_i+0x1b6>
 8006dfa:	4615      	mov	r5, r2
 8006dfc:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e00:	fb03 6711 	mls	r7, r3, r1, r6
 8006e04:	5dc7      	ldrb	r7, [r0, r7]
 8006e06:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e0a:	4637      	mov	r7, r6
 8006e0c:	42bb      	cmp	r3, r7
 8006e0e:	460e      	mov	r6, r1
 8006e10:	d9f4      	bls.n	8006dfc <_printf_i+0x11c>
 8006e12:	2b08      	cmp	r3, #8
 8006e14:	d10b      	bne.n	8006e2e <_printf_i+0x14e>
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	07de      	lsls	r6, r3, #31
 8006e1a:	d508      	bpl.n	8006e2e <_printf_i+0x14e>
 8006e1c:	6923      	ldr	r3, [r4, #16]
 8006e1e:	6861      	ldr	r1, [r4, #4]
 8006e20:	4299      	cmp	r1, r3
 8006e22:	bfde      	ittt	le
 8006e24:	2330      	movle	r3, #48	; 0x30
 8006e26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e2e:	1b52      	subs	r2, r2, r5
 8006e30:	6122      	str	r2, [r4, #16]
 8006e32:	464b      	mov	r3, r9
 8006e34:	4621      	mov	r1, r4
 8006e36:	4640      	mov	r0, r8
 8006e38:	f8cd a000 	str.w	sl, [sp]
 8006e3c:	aa03      	add	r2, sp, #12
 8006e3e:	f7ff fedf 	bl	8006c00 <_printf_common>
 8006e42:	3001      	adds	r0, #1
 8006e44:	d14c      	bne.n	8006ee0 <_printf_i+0x200>
 8006e46:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4a:	b004      	add	sp, #16
 8006e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e50:	4834      	ldr	r0, [pc, #208]	; (8006f24 <_printf_i+0x244>)
 8006e52:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006e56:	6829      	ldr	r1, [r5, #0]
 8006e58:	6823      	ldr	r3, [r4, #0]
 8006e5a:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e5e:	6029      	str	r1, [r5, #0]
 8006e60:	061d      	lsls	r5, r3, #24
 8006e62:	d514      	bpl.n	8006e8e <_printf_i+0x1ae>
 8006e64:	07df      	lsls	r7, r3, #31
 8006e66:	bf44      	itt	mi
 8006e68:	f043 0320 	orrmi.w	r3, r3, #32
 8006e6c:	6023      	strmi	r3, [r4, #0]
 8006e6e:	b91e      	cbnz	r6, 8006e78 <_printf_i+0x198>
 8006e70:	6823      	ldr	r3, [r4, #0]
 8006e72:	f023 0320 	bic.w	r3, r3, #32
 8006e76:	6023      	str	r3, [r4, #0]
 8006e78:	2310      	movs	r3, #16
 8006e7a:	e7af      	b.n	8006ddc <_printf_i+0xfc>
 8006e7c:	6823      	ldr	r3, [r4, #0]
 8006e7e:	f043 0320 	orr.w	r3, r3, #32
 8006e82:	6023      	str	r3, [r4, #0]
 8006e84:	2378      	movs	r3, #120	; 0x78
 8006e86:	4828      	ldr	r0, [pc, #160]	; (8006f28 <_printf_i+0x248>)
 8006e88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e8c:	e7e3      	b.n	8006e56 <_printf_i+0x176>
 8006e8e:	0659      	lsls	r1, r3, #25
 8006e90:	bf48      	it	mi
 8006e92:	b2b6      	uxthmi	r6, r6
 8006e94:	e7e6      	b.n	8006e64 <_printf_i+0x184>
 8006e96:	4615      	mov	r5, r2
 8006e98:	e7bb      	b.n	8006e12 <_printf_i+0x132>
 8006e9a:	682b      	ldr	r3, [r5, #0]
 8006e9c:	6826      	ldr	r6, [r4, #0]
 8006e9e:	1d18      	adds	r0, r3, #4
 8006ea0:	6961      	ldr	r1, [r4, #20]
 8006ea2:	6028      	str	r0, [r5, #0]
 8006ea4:	0635      	lsls	r5, r6, #24
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	d501      	bpl.n	8006eae <_printf_i+0x1ce>
 8006eaa:	6019      	str	r1, [r3, #0]
 8006eac:	e002      	b.n	8006eb4 <_printf_i+0x1d4>
 8006eae:	0670      	lsls	r0, r6, #25
 8006eb0:	d5fb      	bpl.n	8006eaa <_printf_i+0x1ca>
 8006eb2:	8019      	strh	r1, [r3, #0]
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	4615      	mov	r5, r2
 8006eb8:	6123      	str	r3, [r4, #16]
 8006eba:	e7ba      	b.n	8006e32 <_printf_i+0x152>
 8006ebc:	682b      	ldr	r3, [r5, #0]
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	1d1a      	adds	r2, r3, #4
 8006ec2:	602a      	str	r2, [r5, #0]
 8006ec4:	681d      	ldr	r5, [r3, #0]
 8006ec6:	6862      	ldr	r2, [r4, #4]
 8006ec8:	4628      	mov	r0, r5
 8006eca:	f000 f921 	bl	8007110 <memchr>
 8006ece:	b108      	cbz	r0, 8006ed4 <_printf_i+0x1f4>
 8006ed0:	1b40      	subs	r0, r0, r5
 8006ed2:	6060      	str	r0, [r4, #4]
 8006ed4:	6863      	ldr	r3, [r4, #4]
 8006ed6:	6123      	str	r3, [r4, #16]
 8006ed8:	2300      	movs	r3, #0
 8006eda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ede:	e7a8      	b.n	8006e32 <_printf_i+0x152>
 8006ee0:	462a      	mov	r2, r5
 8006ee2:	4649      	mov	r1, r9
 8006ee4:	4640      	mov	r0, r8
 8006ee6:	6923      	ldr	r3, [r4, #16]
 8006ee8:	47d0      	blx	sl
 8006eea:	3001      	adds	r0, #1
 8006eec:	d0ab      	beq.n	8006e46 <_printf_i+0x166>
 8006eee:	6823      	ldr	r3, [r4, #0]
 8006ef0:	079b      	lsls	r3, r3, #30
 8006ef2:	d413      	bmi.n	8006f1c <_printf_i+0x23c>
 8006ef4:	68e0      	ldr	r0, [r4, #12]
 8006ef6:	9b03      	ldr	r3, [sp, #12]
 8006ef8:	4298      	cmp	r0, r3
 8006efa:	bfb8      	it	lt
 8006efc:	4618      	movlt	r0, r3
 8006efe:	e7a4      	b.n	8006e4a <_printf_i+0x16a>
 8006f00:	2301      	movs	r3, #1
 8006f02:	4632      	mov	r2, r6
 8006f04:	4649      	mov	r1, r9
 8006f06:	4640      	mov	r0, r8
 8006f08:	47d0      	blx	sl
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	d09b      	beq.n	8006e46 <_printf_i+0x166>
 8006f0e:	3501      	adds	r5, #1
 8006f10:	68e3      	ldr	r3, [r4, #12]
 8006f12:	9903      	ldr	r1, [sp, #12]
 8006f14:	1a5b      	subs	r3, r3, r1
 8006f16:	42ab      	cmp	r3, r5
 8006f18:	dcf2      	bgt.n	8006f00 <_printf_i+0x220>
 8006f1a:	e7eb      	b.n	8006ef4 <_printf_i+0x214>
 8006f1c:	2500      	movs	r5, #0
 8006f1e:	f104 0619 	add.w	r6, r4, #25
 8006f22:	e7f5      	b.n	8006f10 <_printf_i+0x230>
 8006f24:	08007551 	.word	0x08007551
 8006f28:	08007562 	.word	0x08007562

08006f2c <_putc_r>:
 8006f2c:	b570      	push	{r4, r5, r6, lr}
 8006f2e:	460d      	mov	r5, r1
 8006f30:	4614      	mov	r4, r2
 8006f32:	4606      	mov	r6, r0
 8006f34:	b118      	cbz	r0, 8006f3e <_putc_r+0x12>
 8006f36:	6983      	ldr	r3, [r0, #24]
 8006f38:	b90b      	cbnz	r3, 8006f3e <_putc_r+0x12>
 8006f3a:	f7ff fb27 	bl	800658c <__sinit>
 8006f3e:	4b1c      	ldr	r3, [pc, #112]	; (8006fb0 <_putc_r+0x84>)
 8006f40:	429c      	cmp	r4, r3
 8006f42:	d124      	bne.n	8006f8e <_putc_r+0x62>
 8006f44:	6874      	ldr	r4, [r6, #4]
 8006f46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f48:	07d8      	lsls	r0, r3, #31
 8006f4a:	d405      	bmi.n	8006f58 <_putc_r+0x2c>
 8006f4c:	89a3      	ldrh	r3, [r4, #12]
 8006f4e:	0599      	lsls	r1, r3, #22
 8006f50:	d402      	bmi.n	8006f58 <_putc_r+0x2c>
 8006f52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f54:	f7ff fbb8 	bl	80066c8 <__retarget_lock_acquire_recursive>
 8006f58:	68a3      	ldr	r3, [r4, #8]
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	60a3      	str	r3, [r4, #8]
 8006f60:	da05      	bge.n	8006f6e <_putc_r+0x42>
 8006f62:	69a2      	ldr	r2, [r4, #24]
 8006f64:	4293      	cmp	r3, r2
 8006f66:	db1c      	blt.n	8006fa2 <_putc_r+0x76>
 8006f68:	b2eb      	uxtb	r3, r5
 8006f6a:	2b0a      	cmp	r3, #10
 8006f6c:	d019      	beq.n	8006fa2 <_putc_r+0x76>
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	1c5a      	adds	r2, r3, #1
 8006f72:	6022      	str	r2, [r4, #0]
 8006f74:	701d      	strb	r5, [r3, #0]
 8006f76:	b2ed      	uxtb	r5, r5
 8006f78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f7a:	07da      	lsls	r2, r3, #31
 8006f7c:	d405      	bmi.n	8006f8a <_putc_r+0x5e>
 8006f7e:	89a3      	ldrh	r3, [r4, #12]
 8006f80:	059b      	lsls	r3, r3, #22
 8006f82:	d402      	bmi.n	8006f8a <_putc_r+0x5e>
 8006f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f86:	f7ff fba0 	bl	80066ca <__retarget_lock_release_recursive>
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	bd70      	pop	{r4, r5, r6, pc}
 8006f8e:	4b09      	ldr	r3, [pc, #36]	; (8006fb4 <_putc_r+0x88>)
 8006f90:	429c      	cmp	r4, r3
 8006f92:	d101      	bne.n	8006f98 <_putc_r+0x6c>
 8006f94:	68b4      	ldr	r4, [r6, #8]
 8006f96:	e7d6      	b.n	8006f46 <_putc_r+0x1a>
 8006f98:	4b07      	ldr	r3, [pc, #28]	; (8006fb8 <_putc_r+0x8c>)
 8006f9a:	429c      	cmp	r4, r3
 8006f9c:	bf08      	it	eq
 8006f9e:	68f4      	ldreq	r4, [r6, #12]
 8006fa0:	e7d1      	b.n	8006f46 <_putc_r+0x1a>
 8006fa2:	4629      	mov	r1, r5
 8006fa4:	4622      	mov	r2, r4
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	f7ff f91a 	bl	80061e0 <__swbuf_r>
 8006fac:	4605      	mov	r5, r0
 8006fae:	e7e3      	b.n	8006f78 <_putc_r+0x4c>
 8006fb0:	08007500 	.word	0x08007500
 8006fb4:	08007520 	.word	0x08007520
 8006fb8:	080074e0 	.word	0x080074e0

08006fbc <_sbrk_r>:
 8006fbc:	b538      	push	{r3, r4, r5, lr}
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	4d05      	ldr	r5, [pc, #20]	; (8006fd8 <_sbrk_r+0x1c>)
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	4608      	mov	r0, r1
 8006fc6:	602b      	str	r3, [r5, #0]
 8006fc8:	f7fa fdfa 	bl	8001bc0 <_sbrk>
 8006fcc:	1c43      	adds	r3, r0, #1
 8006fce:	d102      	bne.n	8006fd6 <_sbrk_r+0x1a>
 8006fd0:	682b      	ldr	r3, [r5, #0]
 8006fd2:	b103      	cbz	r3, 8006fd6 <_sbrk_r+0x1a>
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	bd38      	pop	{r3, r4, r5, pc}
 8006fd8:	200012a8 	.word	0x200012a8

08006fdc <__sread>:
 8006fdc:	b510      	push	{r4, lr}
 8006fde:	460c      	mov	r4, r1
 8006fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe4:	f000 f8ae 	bl	8007144 <_read_r>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	bfab      	itete	ge
 8006fec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006fee:	89a3      	ldrhlt	r3, [r4, #12]
 8006ff0:	181b      	addge	r3, r3, r0
 8006ff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ff6:	bfac      	ite	ge
 8006ff8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ffa:	81a3      	strhlt	r3, [r4, #12]
 8006ffc:	bd10      	pop	{r4, pc}

08006ffe <__swrite>:
 8006ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007002:	461f      	mov	r7, r3
 8007004:	898b      	ldrh	r3, [r1, #12]
 8007006:	4605      	mov	r5, r0
 8007008:	05db      	lsls	r3, r3, #23
 800700a:	460c      	mov	r4, r1
 800700c:	4616      	mov	r6, r2
 800700e:	d505      	bpl.n	800701c <__swrite+0x1e>
 8007010:	2302      	movs	r3, #2
 8007012:	2200      	movs	r2, #0
 8007014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007018:	f000 f868 	bl	80070ec <_lseek_r>
 800701c:	89a3      	ldrh	r3, [r4, #12]
 800701e:	4632      	mov	r2, r6
 8007020:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007024:	81a3      	strh	r3, [r4, #12]
 8007026:	4628      	mov	r0, r5
 8007028:	463b      	mov	r3, r7
 800702a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800702e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007032:	f000 b817 	b.w	8007064 <_write_r>

08007036 <__sseek>:
 8007036:	b510      	push	{r4, lr}
 8007038:	460c      	mov	r4, r1
 800703a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800703e:	f000 f855 	bl	80070ec <_lseek_r>
 8007042:	1c43      	adds	r3, r0, #1
 8007044:	89a3      	ldrh	r3, [r4, #12]
 8007046:	bf15      	itete	ne
 8007048:	6560      	strne	r0, [r4, #84]	; 0x54
 800704a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800704e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007052:	81a3      	strheq	r3, [r4, #12]
 8007054:	bf18      	it	ne
 8007056:	81a3      	strhne	r3, [r4, #12]
 8007058:	bd10      	pop	{r4, pc}

0800705a <__sclose>:
 800705a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800705e:	f000 b813 	b.w	8007088 <_close_r>
	...

08007064 <_write_r>:
 8007064:	b538      	push	{r3, r4, r5, lr}
 8007066:	4604      	mov	r4, r0
 8007068:	4608      	mov	r0, r1
 800706a:	4611      	mov	r1, r2
 800706c:	2200      	movs	r2, #0
 800706e:	4d05      	ldr	r5, [pc, #20]	; (8007084 <_write_r+0x20>)
 8007070:	602a      	str	r2, [r5, #0]
 8007072:	461a      	mov	r2, r3
 8007074:	f7fa fd0f 	bl	8001a96 <_write>
 8007078:	1c43      	adds	r3, r0, #1
 800707a:	d102      	bne.n	8007082 <_write_r+0x1e>
 800707c:	682b      	ldr	r3, [r5, #0]
 800707e:	b103      	cbz	r3, 8007082 <_write_r+0x1e>
 8007080:	6023      	str	r3, [r4, #0]
 8007082:	bd38      	pop	{r3, r4, r5, pc}
 8007084:	200012a8 	.word	0x200012a8

08007088 <_close_r>:
 8007088:	b538      	push	{r3, r4, r5, lr}
 800708a:	2300      	movs	r3, #0
 800708c:	4d05      	ldr	r5, [pc, #20]	; (80070a4 <_close_r+0x1c>)
 800708e:	4604      	mov	r4, r0
 8007090:	4608      	mov	r0, r1
 8007092:	602b      	str	r3, [r5, #0]
 8007094:	f7fa fd1b 	bl	8001ace <_close>
 8007098:	1c43      	adds	r3, r0, #1
 800709a:	d102      	bne.n	80070a2 <_close_r+0x1a>
 800709c:	682b      	ldr	r3, [r5, #0]
 800709e:	b103      	cbz	r3, 80070a2 <_close_r+0x1a>
 80070a0:	6023      	str	r3, [r4, #0]
 80070a2:	bd38      	pop	{r3, r4, r5, pc}
 80070a4:	200012a8 	.word	0x200012a8

080070a8 <_fstat_r>:
 80070a8:	b538      	push	{r3, r4, r5, lr}
 80070aa:	2300      	movs	r3, #0
 80070ac:	4d06      	ldr	r5, [pc, #24]	; (80070c8 <_fstat_r+0x20>)
 80070ae:	4604      	mov	r4, r0
 80070b0:	4608      	mov	r0, r1
 80070b2:	4611      	mov	r1, r2
 80070b4:	602b      	str	r3, [r5, #0]
 80070b6:	f7fa fd15 	bl	8001ae4 <_fstat>
 80070ba:	1c43      	adds	r3, r0, #1
 80070bc:	d102      	bne.n	80070c4 <_fstat_r+0x1c>
 80070be:	682b      	ldr	r3, [r5, #0]
 80070c0:	b103      	cbz	r3, 80070c4 <_fstat_r+0x1c>
 80070c2:	6023      	str	r3, [r4, #0]
 80070c4:	bd38      	pop	{r3, r4, r5, pc}
 80070c6:	bf00      	nop
 80070c8:	200012a8 	.word	0x200012a8

080070cc <_isatty_r>:
 80070cc:	b538      	push	{r3, r4, r5, lr}
 80070ce:	2300      	movs	r3, #0
 80070d0:	4d05      	ldr	r5, [pc, #20]	; (80070e8 <_isatty_r+0x1c>)
 80070d2:	4604      	mov	r4, r0
 80070d4:	4608      	mov	r0, r1
 80070d6:	602b      	str	r3, [r5, #0]
 80070d8:	f7fa fd13 	bl	8001b02 <_isatty>
 80070dc:	1c43      	adds	r3, r0, #1
 80070de:	d102      	bne.n	80070e6 <_isatty_r+0x1a>
 80070e0:	682b      	ldr	r3, [r5, #0]
 80070e2:	b103      	cbz	r3, 80070e6 <_isatty_r+0x1a>
 80070e4:	6023      	str	r3, [r4, #0]
 80070e6:	bd38      	pop	{r3, r4, r5, pc}
 80070e8:	200012a8 	.word	0x200012a8

080070ec <_lseek_r>:
 80070ec:	b538      	push	{r3, r4, r5, lr}
 80070ee:	4604      	mov	r4, r0
 80070f0:	4608      	mov	r0, r1
 80070f2:	4611      	mov	r1, r2
 80070f4:	2200      	movs	r2, #0
 80070f6:	4d05      	ldr	r5, [pc, #20]	; (800710c <_lseek_r+0x20>)
 80070f8:	602a      	str	r2, [r5, #0]
 80070fa:	461a      	mov	r2, r3
 80070fc:	f7fa fd0b 	bl	8001b16 <_lseek>
 8007100:	1c43      	adds	r3, r0, #1
 8007102:	d102      	bne.n	800710a <_lseek_r+0x1e>
 8007104:	682b      	ldr	r3, [r5, #0]
 8007106:	b103      	cbz	r3, 800710a <_lseek_r+0x1e>
 8007108:	6023      	str	r3, [r4, #0]
 800710a:	bd38      	pop	{r3, r4, r5, pc}
 800710c:	200012a8 	.word	0x200012a8

08007110 <memchr>:
 8007110:	4603      	mov	r3, r0
 8007112:	b510      	push	{r4, lr}
 8007114:	b2c9      	uxtb	r1, r1
 8007116:	4402      	add	r2, r0
 8007118:	4293      	cmp	r3, r2
 800711a:	4618      	mov	r0, r3
 800711c:	d101      	bne.n	8007122 <memchr+0x12>
 800711e:	2000      	movs	r0, #0
 8007120:	e003      	b.n	800712a <memchr+0x1a>
 8007122:	7804      	ldrb	r4, [r0, #0]
 8007124:	3301      	adds	r3, #1
 8007126:	428c      	cmp	r4, r1
 8007128:	d1f6      	bne.n	8007118 <memchr+0x8>
 800712a:	bd10      	pop	{r4, pc}

0800712c <__malloc_lock>:
 800712c:	4801      	ldr	r0, [pc, #4]	; (8007134 <__malloc_lock+0x8>)
 800712e:	f7ff bacb 	b.w	80066c8 <__retarget_lock_acquire_recursive>
 8007132:	bf00      	nop
 8007134:	2000129c 	.word	0x2000129c

08007138 <__malloc_unlock>:
 8007138:	4801      	ldr	r0, [pc, #4]	; (8007140 <__malloc_unlock+0x8>)
 800713a:	f7ff bac6 	b.w	80066ca <__retarget_lock_release_recursive>
 800713e:	bf00      	nop
 8007140:	2000129c 	.word	0x2000129c

08007144 <_read_r>:
 8007144:	b538      	push	{r3, r4, r5, lr}
 8007146:	4604      	mov	r4, r0
 8007148:	4608      	mov	r0, r1
 800714a:	4611      	mov	r1, r2
 800714c:	2200      	movs	r2, #0
 800714e:	4d05      	ldr	r5, [pc, #20]	; (8007164 <_read_r+0x20>)
 8007150:	602a      	str	r2, [r5, #0]
 8007152:	461a      	mov	r2, r3
 8007154:	f7fa fc82 	bl	8001a5c <_read>
 8007158:	1c43      	adds	r3, r0, #1
 800715a:	d102      	bne.n	8007162 <_read_r+0x1e>
 800715c:	682b      	ldr	r3, [r5, #0]
 800715e:	b103      	cbz	r3, 8007162 <_read_r+0x1e>
 8007160:	6023      	str	r3, [r4, #0]
 8007162:	bd38      	pop	{r3, r4, r5, pc}
 8007164:	200012a8 	.word	0x200012a8

08007168 <_init>:
 8007168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716a:	bf00      	nop
 800716c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800716e:	bc08      	pop	{r3}
 8007170:	469e      	mov	lr, r3
 8007172:	4770      	bx	lr

08007174 <_fini>:
 8007174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007176:	bf00      	nop
 8007178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800717a:	bc08      	pop	{r3}
 800717c:	469e      	mov	lr, r3
 800717e:	4770      	bx	lr
